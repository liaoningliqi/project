<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\mesh-light.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\mesh-light.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Wed Aug 26 21:34:29 2020
<BR><P>
<H3>Maximum Stack Usage =       1048 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
mesh_task &rArr; meshque_msg_dispose &rArr; proxy_recv &rArr; proxy_complete_pdu &rArr; bt_mesh_net_recv &rArr; bt_mesh_trans_recv &rArr; trans_seg &rArr; ctl_recv &rArr; bt_mesh_friend_req &rArr; friend_cred_create &rArr; friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2e6]">bt_mesh_proxy_beacon_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e6]">bt_mesh_proxy_beacon_send</a><BR>
 <LI><a href="#[33]">mesh_thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">mesh_thread</a><BR>
 <LI><a href="#[483]">uECC_vli_numBits</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[483]">uECC_vli_numBits</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a]">Reset_Handler</a> from startup_ing91800.o(.text) referenced from startup_ing91800.o(RESET)
 <LI><a href="#[c]">__scatterload</a> from init.o(.text) referenced from startup_ing91800.o(.text)
 <LI><a href="#[1a]">_mod_unbind</a> from cfg_srv.o(i._mod_unbind) referenced from cfg_srv.o(i.bt_mesh_app_key_del)
 <LI><a href="#[f]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[10]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[d5]">ack_complete</a> from prov.o(i.ack_complete) referenced from prov.o(.constdata)
 <LI><a href="#[19]">adv_alloc</a> from adv.o(i.adv_alloc) referenced from adv.o(i.bt_mesh_adv_create)
 <LI><a href="#[37]">adv_alloc</a> from friend.o(i.adv_alloc) referenced from friend.o(i.friend_buf_alloc)
 <LI><a href="#[34]">after_power_on</a> from ble_mesh_flash_oper.o(i.after_power_on) referenced from ble_mesh_flash_oper.o(i.fast_switch_monitor)
 <LI><a href="#[99]">app_key_add</a> from cfg_srv.o(i.app_key_add) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[9b]">app_key_del</a> from cfg_srv.o(i.app_key_del) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[9c]">app_key_get</a> from cfg_srv.o(i.app_key_get) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[f1]">app_key_set</a> from settings.o(i.app_key_set) referenced from settings.o(.constdata)
 <LI><a href="#[9a]">app_key_update</a> from cfg_srv.o(i.app_key_update) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[d]">app_main</a> from main.o(i.app_main) referenced from startup_ing91800.o(.text)
 <LI><a href="#[40]">att_read_callback</a> from mesh_srv.o(i.att_read_callback) referenced from mesh_srv.o(i.mesh_env_init)
 <LI><a href="#[48]">att_read_callback</a> from profile.o(i.att_read_callback) referenced from profile.o(i.setup_profile)
 <LI><a href="#[48]">att_read_callback</a> from profile.o(i.att_read_callback) referenced 2 times from profile.o(i.user_packet_handler)
 <LI><a href="#[3f]">att_write_callback</a> from mesh_srv.o(i.att_write_callback) referenced from mesh_srv.o(i.mesh_env_init)
 <LI><a href="#[47]">att_write_callback</a> from profile.o(i.att_write_callback) referenced from profile.o(i.setup_profile)
 <LI><a href="#[47]">att_write_callback</a> from profile.o(i.att_write_callback) referenced 2 times from profile.o(i.user_packet_handler)
 <LI><a href="#[d2]">attention_get</a> from health_srv.o(i.attention_get) referenced from health_srv.o(.constdata)
 <LI><a href="#[23]">attention_off</a> from health_srv.o(i.attention_off) referenced from health_srv.o(i.bt_mesh_health_srv_init)
 <LI><a href="#[d3]">attention_set</a> from health_srv.o(i.attention_set) referenced from health_srv.o(.constdata)
 <LI><a href="#[d4]">attention_set_unrel</a> from health_srv.o(i.attention_set_unrel) referenced from health_srv.o(.constdata)
 <LI><a href="#[97]">beacon_complete</a> from beacon.o(i.beacon_complete) referenced from beacon.o(.constdata)
 <LI><a href="#[9d]">beacon_get</a> from cfg_srv.o(i.beacon_get) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[1b]">beacon_send</a> from beacon.o(i.beacon_send) referenced from beacon.o(i.bt_mesh_beacon_init)
 <LI><a href="#[9e]">beacon_set</a> from cfg_srv.o(i.beacon_set) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[14]">ble_adv_gap_mesh_cb</a> from adv.o(i.ble_adv_gap_mesh_cb) referenced from glue.o(i.ble_adv_conf_adv_instance)
 <LI><a href="#[16]">ble_mesh_light_model_breath_mode_expire</a> from ble_mesh_light_model.o(i.ble_mesh_light_model_breath_mode_expire) referenced from ble_mesh_light_model.o(i.ble_mesh_light_model_unbind_mode_run)
 <LI><a href="#[17]">ble_mesh_light_model_breath_mode_work</a> from ble_mesh_light_model.o(i.ble_mesh_light_model_breath_mode_work) referenced from ble_mesh_light_model.o(i.ble_mesh_light_model_unbind_mode_run)
 <LI><a href="#[15]">ble_mesh_light_model_light_to_save</a> from ble_mesh_light_model.o(i.ble_mesh_light_model_light_to_save) referenced from ble_mesh_light_model.o(i.ble_mesh_light_model_conf_init)
 <LI><a href="#[18]">ble_sm_alg_rand</a> from ble_sm_alg.o(i.ble_sm_alg_rand) referenced from ble_sm_alg.o(i.ble_sm_alg_ecc_init)
 <LI><a href="#[13]">bt_cmd_data_uart_out_data</a> from bt_cmd_data_uart_io_adp.o(i.bt_cmd_data_uart_out_data) referenced from main.o(i.app_main)
 <LI><a href="#[95]">bt_mesh_cfg_cli_init</a> from cfg_cli.o(i.bt_mesh_cfg_cli_init) referenced from access.o(.constdata)
 <LI><a href="#[93]">bt_mesh_cfg_srv_init</a> from cfg_srv.o(i.bt_mesh_cfg_srv_init) referenced from access.o(.constdata)
 <LI><a href="#[24]">bt_mesh_gap_event</a> from mesh.o(i.bt_mesh_gap_event) referenced from mesh.o(i.bt_mesh_init)
 <LI><a href="#[96]">bt_mesh_health_cli_init</a> from health_cli.o(i.bt_mesh_health_cli_init) referenced from access.o(.constdata)
 <LI><a href="#[94]">bt_mesh_health_srv_init</a> from health_srv.o(i.bt_mesh_health_srv_init) referenced from access.o(.constdata)
 <LI><a href="#[27]">bt_mesh_net_local</a> from net.o(i.bt_mesh_net_local) referenced from net.o(i.bt_mesh_net_init)
 <LI><a href="#[e6]">buf_send_end</a> from friend.o(i.buf_send_end) referenced from friend.o(.constdata)
 <LI><a href="#[e5]">buf_send_start</a> from friend.o(i.buf_send_start) referenced from friend.o(.constdata)
 <LI><a href="#[1]">buf_sent</a> from prov.o(i.buf_sent) referenced 2 times from prov.o(.data)
 <LI><a href="#[11]">cb_putc</a> from main.o(i.cb_putc) referenced from main.o(i.app_main)
 <LI><a href="#[f3]">cfg_set</a> from settings.o(i.cfg_set) referenced from settings.o(.constdata)
 <LI><a href="#[21]">clear_timeout</a> from friend.o(i.clear_timeout) referenced from friend.o(i.bt_mesh_friend_init)
 <LI><a href="#[3e]">commit_mod</a> from settings.o(i.commit_mod) referenced from settings.o(i.mesh_commit)
 <LI><a href="#[8]">conf_fcb_load</a> from config_fcb.o(i.conf_fcb_load) referenced 2 times from config_fcb.o(.data)
 <LI><a href="#[9]">conf_fcb_save</a> from config_fcb.o(i.conf_fcb_save) referenced 2 times from config_fcb.o(.data)
 <LI><a href="#[36]">db_mesh_write_to_flash</a> from ble_mesh_flash_oper.o(i.db_mesh_write_to_flash) referenced from ble_mesh_flash_oper.o(i.fast_switch_monitor_init)
 <LI><a href="#[9f]">default_ttl_get</a> from cfg_srv.o(i.default_ttl_get) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[a0]">default_ttl_set</a> from cfg_srv.o(i.default_ttl_set) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[98]">dev_comp_data_get</a> from cfg_srv.o(i.dev_comp_data_get) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[fb]">double_jacobian_default</a> from ecc.o(i.double_jacobian_default) referenced 2 times from ble_sm_alg.o(.constdata)
 <LI><a href="#[5]">dummy_access_cb</a> from proxy.o(i.dummy_access_cb) referenced 4 times from proxy.o(.data)
 <LI><a href="#[52]">dummy_timer_handler</a> from transition.o(i.dummy_timer_handler) referenced from transition.o(i.transition_timers_init)
 <LI><a href="#[c8]">fault_clear</a> from health_srv.o(i.fault_clear) referenced from health_srv.o(.constdata)
 <LI><a href="#[c6]">fault_get_cur</a> from health_srv.o(i.fault_get_cur) referenced from health_srv.o(.constdata)
 <LI><a href="#[c7]">fault_get_reg</a> from health_srv.o(i.fault_get_reg) referenced from health_srv.o(.constdata)
 <LI><a href="#[c9]">fault_test</a> from health_srv.o(i.fault_test) referenced from health_srv.o(.constdata)
 <LI><a href="#[e]">fputc</a> from main.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[e4]">friend_clear_sent</a> from friend.o(i.friend_clear_sent) referenced 2 times from friend.o(.constdata)
 <LI><a href="#[bd]">friend_get</a> from cfg_srv.o(i.friend_get) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[eb]">friend_poll_sent_end</a> from lpn.o(i.friend_poll_sent_end) referenced from lpn.o(.constdata)
 <LI><a href="#[e9]">friend_req_end</a> from lpn.o(i.friend_req_end) referenced from lpn.o(.constdata)
 <LI><a href="#[e8]">friend_req_sent</a> from lpn.o(i.friend_req_sent) referenced from lpn.o(.constdata)
 <LI><a href="#[be]">friend_set</a> from cfg_srv.o(i.friend_set) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[20]">friend_timeout</a> from friend.o(i.friend_timeout) referenced from friend.o(i.bt_mesh_friend_init)
 <LI><a href="#[a1]">gatt_proxy_get</a> from cfg_srv.o(i.gatt_proxy_get) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[a2]">gatt_proxy_set</a> from cfg_srv.o(i.gatt_proxy_set) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[61]">gen_def_trans_time_get</a> from device_composition.o(i.gen_def_trans_time_get) referenced from device_composition.o(.constdata)
 <LI><a href="#[62]">gen_def_trans_time_set</a> from device_composition.o(i.gen_def_trans_time_set) referenced from device_composition.o(.constdata)
 <LI><a href="#[63]">gen_def_trans_time_set_unack</a> from device_composition.o(i.gen_def_trans_time_set_unack) referenced from device_composition.o(.constdata)
 <LI><a href="#[64]">gen_def_trans_time_status</a> from device_composition.o(i.gen_def_trans_time_status) referenced from device_composition.o(.constdata)
 <LI><a href="#[5c]">gen_delta_set</a> from device_composition.o(i.gen_delta_set) referenced from device_composition.o(.constdata)
 <LI><a href="#[5d]">gen_delta_set_unack</a> from device_composition.o(i.gen_delta_set_unack) referenced from device_composition.o(.constdata)
 <LI><a href="#[59]">gen_level_get</a> from device_composition.o(i.gen_level_get) referenced from device_composition.o(.constdata)
 <LI><a href="#[5a]">gen_level_set</a> from device_composition.o(i.gen_level_set) referenced from device_composition.o(.constdata)
 <LI><a href="#[5b]">gen_level_set_unack</a> from device_composition.o(i.gen_level_set_unack) referenced from device_composition.o(.constdata)
 <LI><a href="#[60]">gen_level_status</a> from device_composition.o(i.gen_level_status) referenced from device_composition.o(.constdata)
 <LI><a href="#[5e]">gen_move_set</a> from device_composition.o(i.gen_move_set) referenced from device_composition.o(.constdata)
 <LI><a href="#[5f]">gen_move_set_unack</a> from device_composition.o(i.gen_move_set_unack) referenced from device_composition.o(.constdata)
 <LI><a href="#[55]">gen_onoff_get</a> from device_composition.o(i.gen_onoff_get) referenced from device_composition.o(.constdata)
 <LI><a href="#[56]">gen_onoff_set</a> from device_composition.o(i.gen_onoff_set) referenced from device_composition.o(.constdata)
 <LI><a href="#[57]">gen_onoff_set_unack</a> from device_composition.o(i.gen_onoff_set_unack) referenced from device_composition.o(.constdata)
 <LI><a href="#[58]">gen_onoff_status</a> from device_composition.o(i.gen_onoff_status) referenced from device_composition.o(.constdata)
 <LI><a href="#[65]">gen_onpowerup_get</a> from device_composition.o(i.gen_onpowerup_get) referenced from device_composition.o(.constdata)
 <LI><a href="#[66]">gen_onpowerup_set</a> from device_composition.o(i.gen_onpowerup_set) referenced from device_composition.o(.constdata)
 <LI><a href="#[67]">gen_onpowerup_set_unack</a> from device_composition.o(i.gen_onpowerup_set_unack) referenced from device_composition.o(.constdata)
 <LI><a href="#[68]">gen_onpowerup_status</a> from device_composition.o(i.gen_onpowerup_status) referenced from device_composition.o(.constdata)
 <LI><a href="#[e1]">gen_prov_ack</a> from prov.o(i.gen_prov_ack) referenced from prov.o(.constdata)
 <LI><a href="#[e2]">gen_prov_cont</a> from prov.o(i.gen_prov_cont) referenced from prov.o(.constdata)
 <LI><a href="#[e3]">gen_prov_ctl</a> from prov.o(i.gen_prov_ctl) referenced from prov.o(.constdata)
 <LI><a href="#[e0]">gen_prov_start</a> from prov.o(i.gen_prov_start) referenced from prov.o(.constdata)
 <LI><a href="#[f2]">hb_pub_set</a> from settings.o(i.hb_pub_set) referenced from settings.o(.constdata)
 <LI><a href="#[1d]">hb_publish</a> from cfg_srv.o(i.hb_publish) referenced from cfg_srv.o(i.bt_mesh_cfg_srv_init)
 <LI><a href="#[cb]">health_fault_clear</a> from health_srv.o(i.health_fault_clear) referenced from health_srv.o(.constdata)
 <LI><a href="#[cc]">health_fault_clear_unrel</a> from health_srv.o(i.health_fault_clear_unrel) referenced from health_srv.o(.constdata)
 <LI><a href="#[ca]">health_fault_get</a> from health_srv.o(i.health_fault_get) referenced from health_srv.o(.constdata)
 <LI><a href="#[cd]">health_fault_test</a> from health_srv.o(i.health_fault_test) referenced from health_srv.o(.constdata)
 <LI><a href="#[ce]">health_fault_test_unrel</a> from health_srv.o(i.health_fault_test_unrel) referenced from health_srv.o(.constdata)
 <LI><a href="#[cf]">health_period_get</a> from health_srv.o(i.health_period_get) referenced from health_srv.o(.constdata)
 <LI><a href="#[d0]">health_period_set</a> from health_srv.o(i.health_period_set) referenced from health_srv.o(.constdata)
 <LI><a href="#[d1]">health_period_set_unrel</a> from health_srv.o(i.health_period_set_unrel) referenced from health_srv.o(.constdata)
 <LI><a href="#[22]">health_pub_update</a> from health_srv.o(i.health_pub_update) referenced from health_srv.o(i.bt_mesh_health_srv_init)
 <LI><a href="#[c2]">heartbeat_pub_get</a> from cfg_srv.o(i.heartbeat_pub_get) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[c3]">heartbeat_pub_set</a> from cfg_srv.o(i.heartbeat_pub_set) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[c4]">heartbeat_sub_get</a> from cfg_srv.o(i.heartbeat_sub_get) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[c5]">heartbeat_sub_set</a> from cfg_srv.o(i.heartbeat_sub_set) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[ed]">iv_set</a> from settings.o(i.iv_set) referenced from settings.o(.constdata)
 <LI><a href="#[26]">ivu_refresh</a> from net.o(i.ivu_refresh) referenced from net.o(i.bt_mesh_net_init)
 <LI><a href="#[c0]">krp_get</a> from cfg_srv.o(i.krp_get) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[c1]">krp_set</a> from cfg_srv.o(i.krp_set) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[38]">level_lightness_tt_handler</a> from transition.o(i.level_lightness_tt_handler) referenced from transition.o(i.level_lightness_handler)
 <LI><a href="#[4c]">level_lightness_work_handler</a> from transition.o(i.level_lightness_work_handler) referenced from transition.o(i.transition_timers_init)
 <LI><a href="#[39]">level_temp_tt_handler</a> from transition.o(i.level_temp_tt_handler) referenced from transition.o(i.level_temp_handler)
 <LI><a href="#[4d]">level_temp_work_handler</a> from transition.o(i.level_temp_work_handler) referenced from transition.o(i.transition_timers_init)
 <LI><a href="#[7f]">light_ctl_default_get</a> from device_composition.o(i.light_ctl_default_get) referenced from device_composition.o(.constdata)
 <LI><a href="#[80]">light_ctl_default_set</a> from device_composition.o(i.light_ctl_default_set) referenced from device_composition.o(.constdata)
 <LI><a href="#[81]">light_ctl_default_set_unack</a> from device_composition.o(i.light_ctl_default_set_unack) referenced from device_composition.o(.constdata)
 <LI><a href="#[87]">light_ctl_default_status</a> from device_composition.o(i.light_ctl_default_status) referenced from device_composition.o(.constdata)
 <LI><a href="#[7b]">light_ctl_get</a> from device_composition.o(i.light_ctl_get) referenced from device_composition.o(.constdata)
 <LI><a href="#[7c]">light_ctl_set</a> from device_composition.o(i.light_ctl_set) referenced from device_composition.o(.constdata)
 <LI><a href="#[7d]">light_ctl_set_unack</a> from device_composition.o(i.light_ctl_set_unack) referenced from device_composition.o(.constdata)
 <LI><a href="#[84]">light_ctl_status</a> from device_composition.o(i.light_ctl_status) referenced from device_composition.o(.constdata)
 <LI><a href="#[88]">light_ctl_temp_get</a> from device_composition.o(i.light_ctl_temp_get) referenced from device_composition.o(.constdata)
 <LI><a href="#[7e]">light_ctl_temp_range_get</a> from device_composition.o(i.light_ctl_temp_range_get) referenced from device_composition.o(.constdata)
 <LI><a href="#[82]">light_ctl_temp_range_set</a> from device_composition.o(i.light_ctl_temp_range_set) referenced from device_composition.o(.constdata)
 <LI><a href="#[83]">light_ctl_temp_range_set_unack</a> from device_composition.o(i.light_ctl_temp_range_set_unack) referenced from device_composition.o(.constdata)
 <LI><a href="#[85]">light_ctl_temp_range_status</a> from device_composition.o(i.light_ctl_temp_range_status) referenced from device_composition.o(.constdata)
 <LI><a href="#[89]">light_ctl_temp_set</a> from device_composition.o(i.light_ctl_temp_set) referenced from device_composition.o(.constdata)
 <LI><a href="#[8a]">light_ctl_temp_set_unack</a> from device_composition.o(i.light_ctl_temp_set_unack) referenced from device_composition.o(.constdata)
 <LI><a href="#[86]">light_ctl_temp_status</a> from device_composition.o(i.light_ctl_temp_status) referenced from device_composition.o(.constdata)
 <LI><a href="#[3b]">light_ctl_temp_tt_handler</a> from transition.o(i.light_ctl_temp_tt_handler) referenced from transition.o(i.light_ctl_temp_handler)
 <LI><a href="#[51]">light_ctl_temp_work_handler</a> from transition.o(i.light_ctl_temp_work_handler) referenced from transition.o(i.transition_timers_init)
 <LI><a href="#[3a]">light_ctl_tt_handler</a> from transition.o(i.light_ctl_tt_handler) referenced from transition.o(i.light_ctl_handler)
 <LI><a href="#[50]">light_ctl_work_handler</a> from transition.o(i.light_ctl_work_handler) referenced from transition.o(i.transition_timers_init)
 <LI><a href="#[8f]">light_hsl_get</a> from device_composition.o(i.light_hsl_get) referenced from device_composition.o(.constdata)
 <LI><a href="#[90]">light_hsl_set</a> from device_composition.o(i.light_hsl_set) referenced from device_composition.o(.constdata)
 <LI><a href="#[91]">light_hsl_set_unack</a> from device_composition.o(i.light_hsl_set_unack) referenced from device_composition.o(.constdata)
 <LI><a href="#[3c]">light_lightness_actual_tt_handler</a> from transition.o(i.light_lightness_actual_tt_handler) referenced from transition.o(i.light_lightness_actual_handler)
 <LI><a href="#[4e]">light_lightness_actual_work_handler</a> from transition.o(i.light_lightness_actual_work_handler) referenced from transition.o(i.transition_timers_init)
 <LI><a href="#[70]">light_lightness_default_get</a> from device_composition.o(i.light_lightness_default_get) referenced from device_composition.o(.constdata)
 <LI><a href="#[72]">light_lightness_default_set</a> from device_composition.o(i.light_lightness_default_set) referenced from device_composition.o(.constdata)
 <LI><a href="#[73]">light_lightness_default_set_unack</a> from device_composition.o(i.light_lightness_default_set_unack) referenced from device_composition.o(.constdata)
 <LI><a href="#[79]">light_lightness_default_status</a> from device_composition.o(i.light_lightness_default_status) referenced from device_composition.o(.constdata)
 <LI><a href="#[69]">light_lightness_get</a> from device_composition.o(i.light_lightness_get) referenced from device_composition.o(.constdata)
 <LI><a href="#[6f]">light_lightness_last_get</a> from device_composition.o(i.light_lightness_last_get) referenced from device_composition.o(.constdata)
 <LI><a href="#[78]">light_lightness_last_status</a> from device_composition.o(i.light_lightness_last_status) referenced from device_composition.o(.constdata)
 <LI><a href="#[6c]">light_lightness_linear_get</a> from device_composition.o(i.light_lightness_linear_get) referenced from device_composition.o(.constdata)
 <LI><a href="#[6d]">light_lightness_linear_set</a> from device_composition.o(i.light_lightness_linear_set) referenced from device_composition.o(.constdata)
 <LI><a href="#[6e]">light_lightness_linear_set_unack</a> from device_composition.o(i.light_lightness_linear_set_unack) referenced from device_composition.o(.constdata)
 <LI><a href="#[77]">light_lightness_linear_status</a> from device_composition.o(i.light_lightness_linear_status) referenced from device_composition.o(.constdata)
 <LI><a href="#[3d]">light_lightness_linear_tt_handler</a> from transition.o(i.light_lightness_linear_tt_handler) referenced from transition.o(i.light_lightness_linear_handler)
 <LI><a href="#[4f]">light_lightness_linear_work_handler</a> from transition.o(i.light_lightness_linear_work_handler) referenced from transition.o(i.transition_timers_init)
 <LI><a href="#[71]">light_lightness_range_get</a> from device_composition.o(i.light_lightness_range_get) referenced from device_composition.o(.constdata)
 <LI><a href="#[74]">light_lightness_range_set</a> from device_composition.o(i.light_lightness_range_set) referenced from device_composition.o(.constdata)
 <LI><a href="#[75]">light_lightness_range_set_unack</a> from device_composition.o(i.light_lightness_range_set_unack) referenced from device_composition.o(.constdata)
 <LI><a href="#[7a]">light_lightness_range_status</a> from device_composition.o(i.light_lightness_range_status) referenced from device_composition.o(.constdata)
 <LI><a href="#[6a]">light_lightness_set</a> from device_composition.o(i.light_lightness_set) referenced from device_composition.o(.constdata)
 <LI><a href="#[6b]">light_lightness_set_unack</a> from device_composition.o(i.light_lightness_set_unack) referenced from device_composition.o(.constdata)
 <LI><a href="#[76]">light_lightness_status</a> from device_composition.o(i.light_lightness_status) referenced from device_composition.o(.constdata)
 <LI><a href="#[25]">lpn_timeout</a> from lpn.o(i.lpn_timeout) referenced from lpn.o(i.bt_mesh_lpn_init)
 <LI><a href="#[bf]">lpn_timeout_get</a> from cfg_srv.o(i.lpn_timeout_get) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[b]">main</a> from startup_ing91800.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7]">mesh_commit</a> from settings.o(i.mesh_commit) referenced 2 times from settings.o(.data)
 <LI><a href="#[6]">mesh_set</a> from settings.o(i.mesh_set) referenced 2 times from settings.o(.data)
 <LI><a href="#[6]">mesh_set</a> from settings.o(i.mesh_set) referenced from settings.o(i.conf_parse_and_lookup_new)
 <LI><a href="#[32]">mesh_task</a> from mesh_queue.o(i.mesh_task) referenced from mesh_queue.o(i.create_mesh_task)
 <LI><a href="#[33]">mesh_thread</a> from mesh_queue.o(i.mesh_thread) referenced from mesh_queue.o(i.create_mesh_task)
 <LI><a href="#[b9]">mod_app_bind</a> from cfg_srv.o(i.mod_app_bind) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[bb]">mod_app_get</a> from cfg_srv.o(i.mod_app_get) referenced 2 times from cfg_srv.o(.constdata)
 <LI><a href="#[ba]">mod_app_unbind</a> from cfg_srv.o(i.mod_app_unbind) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[1f]">mod_init</a> from access.o(i.mod_init) referenced from access.o(i.bt_mesh_comp_register)
 <LI><a href="#[a7]">mod_pub_get</a> from cfg_srv.o(i.mod_pub_get) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[a8]">mod_pub_set</a> from cfg_srv.o(i.mod_pub_set) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[a9]">mod_pub_va_set</a> from cfg_srv.o(i.mod_pub_va_set) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[43]">mod_publish</a> from access.o(i.mod_publish) referenced from access.o(i.mod_init)
 <LI><a href="#[1c]">mod_reset</a> from cfg_srv.o(i.mod_reset) referenced from cfg_srv.o(i.bt_mesh_cfg_reset)
 <LI><a href="#[aa]">mod_sub_add</a> from cfg_srv.o(i.mod_sub_add) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[ac]">mod_sub_del</a> from cfg_srv.o(i.mod_sub_del) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[b0]">mod_sub_del_all</a> from cfg_srv.o(i.mod_sub_del_all) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[b1]">mod_sub_get</a> from cfg_srv.o(i.mod_sub_get) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[b2]">mod_sub_get_vnd</a> from cfg_srv.o(i.mod_sub_get_vnd) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[ae]">mod_sub_overwrite</a> from cfg_srv.o(i.mod_sub_overwrite) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[ab]">mod_sub_va_add</a> from cfg_srv.o(i.mod_sub_va_add) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[ad]">mod_sub_va_del</a> from cfg_srv.o(i.mod_sub_va_del) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[af]">mod_sub_va_overwrite</a> from cfg_srv.o(i.mod_sub_va_overwrite) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[b3]">net_key_add</a> from cfg_srv.o(i.net_key_add) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[b5]">net_key_del</a> from cfg_srv.o(i.net_key_del) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[b6]">net_key_get</a> from cfg_srv.o(i.net_key_get) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[f0]">net_key_set</a> from settings.o(i.net_key_set) referenced from settings.o(.constdata)
 <LI><a href="#[b4]">net_key_update</a> from cfg_srv.o(i.net_key_update) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[ec]">net_set</a> from settings.o(i.net_set) referenced from settings.o(.constdata)
 <LI><a href="#[a3]">net_transmit_get</a> from cfg_srv.o(i.net_transmit_get) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[a4]">net_transmit_set</a> from cfg_srv.o(i.net_transmit_set) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[b7]">node_identity_get</a> from cfg_srv.o(i.node_identity_get) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[b8]">node_identity_set</a> from cfg_srv.o(i.node_identity_set) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[bc]">node_reset</a> from cfg_srv.o(i.node_reset) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[1e]">node_reset_after</a> from cfg_srv.o(i.node_reset_after) referenced from cfg_srv.o(i.bt_mesh_cfg_srv_init)
 <LI><a href="#[f6]">node_set</a> from settings.o(i.node_set) referenced from settings.o(.constdata)
 <LI><a href="#[45]">onoff_tt_handler</a> from transition.o(i.onoff_tt_handler) referenced from transition.o(i.onoff_handler)
 <LI><a href="#[4b]">onoff_work_handler</a> from transition.o(i.onoff_work_handler) referenced from transition.o(i.transition_timers_init)
 <LI><a href="#[44]">os_callout_timer_cb</a> from npl_os_freertos.o(i.os_callout_timer_cb) referenced from npl_os_freertos.o(i.npl_freertos_callout_init)
 <LI><a href="#[30]">peripherals_gpio_isr</a> from chip_peripherals.o(i.peripherals_gpio_isr) referenced from chip_peripherals.o(i.chip_peripherals_init)
 <LI><a href="#[2b]">protocol_timeout</a> from prov.o(i.protocol_timeout) referenced from prov.o(i.bt_mesh_prov_init)
 <LI><a href="#[d7]">prov_capabilities</a> from prov.o(i.prov_capabilities) referenced from prov.o(.constdata)
 <LI><a href="#[53]">prov_complete</a> from ble_mesh_app.o(i.prov_complete) referenced 2 times from ble_mesh_app.o(.constdata)
 <LI><a href="#[db]">prov_confirm</a> from prov.o(i.prov_confirm) referenced from prov.o(.constdata)
 <LI><a href="#[dd]">prov_data</a> from prov.o(i.prov_data) referenced from prov.o(.constdata)
 <LI><a href="#[46]">prov_dh_key_cb</a> from prov.o(i.prov_dh_key_cb) referenced from prov.o(i.prov_pub_key)
 <LI><a href="#[46]">prov_dh_key_cb</a> from prov.o(i.prov_dh_key_cb) referenced from prov.o(i.send_pub_key)
 <LI><a href="#[df]">prov_failed</a> from prov.o(i.prov_failed) referenced from prov.o(.constdata)
 <LI><a href="#[da]">prov_input_complete</a> from prov.o(i.prov_input_complete) referenced from prov.o(.constdata)
 <LI><a href="#[d6]">prov_invite</a> from prov.o(i.prov_invite) referenced from prov.o(.constdata)
 <LI><a href="#[d9]">prov_pub_key</a> from prov.o(i.prov_pub_key) referenced from prov.o(.constdata)
 <LI><a href="#[dc]">prov_random</a> from prov.o(i.prov_random) referenced from prov.o(.constdata)
 <LI><a href="#[54]">prov_reset</a> from ble_mesh_app.o(i.prov_reset) referenced from ble_mesh_app.o(.constdata)
 <LI><a href="#[29]">prov_retransmit</a> from prov.o(i.prov_retransmit) referenced from prov.o(i.bt_mesh_prov_init)
 <LI><a href="#[d8]">prov_start</a> from prov.o(i.prov_start) referenced from prov.o(.constdata)
 <LI><a href="#[2a]">prov_whitelist_remove</a> from prov.o(i.prov_whitelist_remove) referenced from prov.o(i.bt_mesh_prov_init)
 <LI><a href="#[4]">proxy_recv</a> from proxy.o(i.proxy_recv) referenced 4 times from proxy.o(.data)
 <LI><a href="#[2c]">proxy_send_beacons</a> from proxy.o(i.proxy_send_beacons) referenced from proxy.o(i.bt_mesh_proxy_init)
 <LI><a href="#[42]">proxy_service_adv_sent</a> from mesh_queue.o(i.proxy_service_adv_sent) referenced from mesh_queue.o(i.meshque_msg_dispose)
 <LI><a href="#[3]">pub_key_ready</a> from prov.o(i.pub_key_ready) referenced 2 times from prov.o(.data)
 <LI><a href="#[2]">pub_key_ready_for_next</a> from prov.o(i.pub_key_ready_for_next) referenced 4 times from prov.o(.data)
 <LI><a href="#[92]">publish_sent</a> from access.o(i.publish_sent) referenced from access.o(.constdata)
 <LI><a href="#[35]">read_mesh_from_flash</a> from ble_mesh_flash_oper.o(i.read_mesh_from_flash) referenced from ble_mesh_flash_oper.o(i.fast_switch_monitor_init)
 <LI><a href="#[a5]">relay_get</a> from cfg_srv.o(i.relay_get) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[a6]">relay_set</a> from cfg_srv.o(i.relay_set) referenced from cfg_srv.o(.constdata)
 <LI><a href="#[28]">relay_stop</a> from net.o(i.relay_stop) referenced from net.o(i.bt_mesh_net_init)
 <LI><a href="#[ea]">req_sent</a> from lpn.o(i.req_sent) referenced from lpn.o(.constdata)
 <LI><a href="#[ef]">rpl_set</a> from settings.o(i.rpl_set) referenced from settings.o(.constdata)
 <LI><a href="#[2f]">seg_ack</a> from transport.o(i.seg_ack) referenced from transport.o(i.bt_mesh_trans_init)
 <LI><a href="#[f7]">seg_first_send_start</a> from transport.o(i.seg_first_send_start) referenced from transport.o(.constdata)
 <LI><a href="#[2e]">seg_retransmit</a> from transport.o(i.seg_retransmit) referenced from transport.o(i.bt_mesh_trans_init)
 <LI><a href="#[f9]">seg_send_start</a> from transport.o(i.seg_send_start) referenced from transport.o(.constdata)
 <LI><a href="#[f8]">seg_sent</a> from transport.o(i.seg_sent) referenced 2 times from transport.o(.constdata)
 <LI><a href="#[fa]">send_ack_end</a> from transport.o(i.send_ack_end) referenced from transport.o(.constdata)
 <LI><a href="#[ee]">seq_set</a> from settings.o(i.seq_set) referenced from settings.o(.constdata)
 <LI><a href="#[12]">setup_profile</a> from profile.o(i.setup_profile) referenced from main.o(i.app_main)
 <LI><a href="#[f4]">sig_mod_set</a> from settings.o(i.sig_mod_set) referenced from settings.o(.constdata)
 <LI><a href="#[2d]">store_pending</a> from settings.o(i.store_pending) referenced from settings.o(i.bt_mesh_settings_init)
 <LI><a href="#[4a]">store_pending_mod</a> from settings.o(i.store_pending_mod) referenced from settings.o(i.store_pending)
 <LI><a href="#[41]">user_packet_handler</a> from mesh_srv.o(i.user_packet_handler) referenced from mesh_srv.o(i.mesh_env_init)
 <LI><a href="#[49]">user_packet_handler</a> from profile.o(i.user_packet_handler) referenced from profile.o(i.setup_profile)
 <LI><a href="#[31]">visit_mesh</a> from config_store.o(i.visit_mesh) referenced from settings.o(i.conf_load_new)
 <LI><a href="#[fd]">vli_mmod_fast_secp256r1</a> from ecc.o(i.vli_mmod_fast_secp256r1) referenced 2 times from ble_sm_alg.o(.constdata)
 <LI><a href="#[8b]">vnd_get</a> from device_composition.o(i.vnd_get) referenced 2 times from device_composition.o(.constdata)
 <LI><a href="#[f5]">vnd_mod_set</a> from settings.o(i.vnd_mod_set) referenced from settings.o(.constdata)
 <LI><a href="#[8c]">vnd_set</a> from device_composition.o(i.vnd_set) referenced 2 times from device_composition.o(.constdata)
 <LI><a href="#[8d]">vnd_set_unack</a> from device_composition.o(i.vnd_set_unack) referenced 2 times from device_composition.o(.constdata)
 <LI><a href="#[8e]">vnd_status</a> from device_composition.o(i.vnd_status) referenced 5 times from device_composition.o(.constdata)
 <LI><a href="#[fc]">x_side_default</a> from ecc.o(i.x_side_default) referenced 2 times from ble_sm_alg.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[458]"></a>att_server_get_mtu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_segment_and_send
</UL>

<P><STRONG><a name="[3f5]"></a>att_server_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_env_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[1f0]"></a>att_server_notify</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_notify_custom
</UL>

<P><STRONG><a name="[3f7]"></a>att_server_register_packet_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_env_init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[4a2]"></a>att_set_db</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[3b2]"></a>btstack_push_user_msg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_report_trigger_send
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmds_put
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_aes
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ccm
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
</UL>

<P><STRONG><a name="[496]"></a>gap_add_whitelist</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[498]"></a>gap_aes_encrypt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[4a0]"></a>gap_clear_white_lists</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[49f]"></a>gap_disconnect</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[49d]"></a>gap_set_adv_set_random_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[49c]"></a>gap_set_ext_adv_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[49a]"></a>gap_set_ext_adv_enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[49b]"></a>gap_set_ext_adv_para</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[499]"></a>gap_set_ext_scan_enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[49e]"></a>gap_set_ext_scan_para</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[495]"></a>gap_set_ext_scan_response_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[4a1]"></a>gap_set_random_device_address</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[497]"></a>gap_start_ccm</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[3f6]"></a>hci_add_event_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_env_init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[318]"></a>kv_commit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_fac_conf
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_switch_monitor
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
</UL>

<P><STRONG><a name="[1fc]"></a>kv_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_switch_monitor
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_power_on
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_sys_init
</UL>

<P><STRONG><a name="[37d]"></a>kv_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_switch_monitor_init
</UL>

<P><STRONG><a name="[186]"></a>kv_put</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_control_word2mirror
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_fac_conf
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_switch_monitor
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_power_on
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_light_to_save
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write2mirror
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_node_addr
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_net_key
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_app_key
</UL>

<P><STRONG><a name="[303]"></a>kv_remove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_provision
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_kv
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write2mirror
</UL>

<P><STRONG><a name="[317]"></a>kv_remove_all</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_fac_conf
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
</UL>

<P><STRONG><a name="[360]"></a>kv_visit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_load_new
</UL>

<P><STRONG><a name="[19f]"></a>platform_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[434]"></a>platform_get_version</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_init_service
</UL>

<P><STRONG><a name="[1b9]"></a>platform_printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_assert_space
</UL>

<P><STRONG><a name="[13d]"></a>platform_raise_assertion</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_trigger
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_sys_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmds_put
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host2Mesh_msg_send
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_put
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dummy_access_cb
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mod_path
</UL>

<P><STRONG><a name="[43b]"></a>platform_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_write_callback
</UL>

<P><STRONG><a name="[19b]"></a>platform_set_evt_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[34c]"></a>platform_set_irq_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_peripherals_init
</UL>

<P><STRONG><a name="[34a]"></a>platform_set_rf_clk_source</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_peripherals_init
</UL>

<P><STRONG><a name="[43a]"></a>platform_switch_app</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_write_callback
</UL>

<P><STRONG><a name="[42a]"></a>pvTimerGetTimerID</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_callout_timer_cb
</UL>

<P><STRONG><a name="[1b4]"></a>reverse_128</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid128
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_service_uuid128
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_characteristic_uuid128
</UL>

<P><STRONG><a name="[1ea]"></a>reverse_bd_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_authen_TMO
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_adv_configure
</UL>

<P><STRONG><a name="[1a3]"></a>vPortEnterCritical</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_msg_get
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_or
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_and
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_get
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_remaining_get
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_small_msg_get
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_small_msg_free
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_msg_free
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_or
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_and
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_and_clear_bit
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put_from_cb
</UL>

<P><STRONG><a name="[1a4]"></a>vPortExitCritical</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_msg_get
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_or
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_and
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_get
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_remaining_get
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_small_msg_get
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_small_msg_free
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_msg_free
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_or
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_and
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_and_clear_bit
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put_from_cb
</UL>

<P><STRONG><a name="[319]"></a>vTaskDelay</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sleep
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
</UL>

<P><STRONG><a name="[427]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_init
</UL>

<P><STRONG><a name="[227]"></a>xQueueGenericCreate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_mesh_task
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_init
</UL>

<P><STRONG><a name="[13c]"></a>xQueueGenericSend</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_release
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host2Mesh_msg_send
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_put
</UL>

<P><STRONG><a name="[426]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_put
</UL>

<P><STRONG><a name="[429]"></a>xQueueGiveFromISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_release
</UL>

<P><STRONG><a name="[400]"></a>xQueueReceive</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_get
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_task
</UL>

<P><STRONG><a name="[425]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_get
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_pend
</UL>

<P><STRONG><a name="[428]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_pend
</UL>

<P><STRONG><a name="[36a]"></a>xTaskCreate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_mesh_task
</UL>

<P><STRONG><a name="[3bf]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_mesh_task
</UL>

<P><STRONG><a name="[338]"></a>xTaskGetTickCount</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rand
</UL>

<P><STRONG><a name="[3c2]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get_32
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_remaining_get
</UL>

<P><STRONG><a name="[421]"></a>xTimerCreate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_init
</UL>

<P><STRONG><a name="[20a]"></a>xTimerGenericCommand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
</UL>

<P><STRONG><a name="[423]"></a>xTimerGetExpiryTime</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_remaining_ticks
</UL>

<P><STRONG><a name="[fe]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[4a6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[ff]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[100]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4a7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[4a8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[4a9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[4aa]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[4ab]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_ing91800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91800.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>main</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_ing91800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91800.o(.text)
</UL>
<P><STRONG><a name="[4ac]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_time_ms_to_ticks
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_sub_send_status
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_rx_reset
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_rx_alloc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[4ad]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_line_parse
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[215]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rand
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_rand
</UL>

<P><STRONG><a name="[4ae]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mesh_from_flash
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_trigger
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_platform_config
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_platform_setup
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmds_put
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host2Mesh_msg_send
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid16
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid128
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_authen_TMO
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_beacon_recv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_recv
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_nonce
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_provision
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_str_from_bytes
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_bytes_from_str
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ad
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k2
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_TM_auth
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_refresh
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_revoke_keys
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_keys_create
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;va_add
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_adv_create
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_prov_adv_create
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pub_key
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_confirm
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_random
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_pub_key
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirm
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_send_pub_key
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_start
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_cont
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copy
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_node_addr
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_net_key
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_app_key
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_net
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_node
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_net_key
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_app_key
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decrypt
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_fcb_save
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;visit_mesh
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_trigger
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ccm
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ccm_encrypt
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ccm_decrypt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_random
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_copypkthdr
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_node_addr
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_net_key
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_app_key
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set
</UL>

<P><STRONG><a name="[4af]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[4b0]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4b1]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_app_key_add
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_node_del
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_reset
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_del
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_nodes
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_clear
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_node
</UL>

<P><STRONG><a name="[1be]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_trigger
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_beacon_disable
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_recv
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_create_from_pool
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_adv_configure
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_link
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_create
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_conf_adv_instance
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_TM_auth
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_del
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_gatt_close
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_task
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_app_key
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subnet_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
</UL>

<P><STRONG><a name="[4b2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[358]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_path2index_new
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_fcb_save
</UL>

<P><STRONG><a name="[29e]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprovisioned_beacon_send
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k1
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_s1
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_adv_create
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_prov_adv_create
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_node_addr
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_net_key
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_app_key
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_fcb_save
</UL>

<P><STRONG><a name="[3fd]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_set
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set
</UL>

<P><STRONG><a name="[194]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_add
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_beacon_recv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_recv
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_key_pair
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_conf_adv_instance
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;va_del
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;va_add
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_random
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_open
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_path2index_new
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_match
</UL>

<P><STRONG><a name="[478]"></a>strpbrk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, strpbrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsep
</UL>

<P><STRONG><a name="[108]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_set
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_to_level
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_light_state
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actual_to_linear
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_to_light_ctl_temp
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_light_state
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_values_calculator
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_actual
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actual_to_linear
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_to_level
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_to_light_ctl_temp
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_tt_values
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_tt_values
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_tt_values
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_tt_values
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_tt_values
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_tt_values
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_actual
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_light_state
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_to_level
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_to_light_ctl_temp
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceiling
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_tt_values
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_tt_values
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_tt_values
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_tt_values
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_tt_values
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_tt_values
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_values_calculator
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_actual
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actual_to_linear
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_tt_values
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_tt_values
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_tt_values
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_tt_values
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_tt_values
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_tt_values
</UL>

<P><STRONG><a name="[347]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_to_level
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceiling
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_tt_values
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_tt_values
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_tt_values
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_tt_values
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_tt_values
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_tt_values
</UL>

<P><STRONG><a name="[3d1]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_light_state
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_values_calculator
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_to_light_ctl_temp
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_actual
</UL>

<P><STRONG><a name="[3e9]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_actual
</UL>

<P><STRONG><a name="[348]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceiling
</UL>

<P><STRONG><a name="[4b3]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[4b4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[4b5]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4b6]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[4b7]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[10d]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[115]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[114]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[11e]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11d]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[4b8]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4b9]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>EccPoint_compute_public_key</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, ecc.o(i.EccPoint_compute_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_isZero
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
</UL>

<P><STRONG><a name="[123]"></a>EccPoint_isZero</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ecc.o(i.EccPoint_isZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EccPoint_isZero &rArr; uECC_vli_isZero
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_point
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
</UL>

<P><STRONG><a name="[122]"></a>EccPoint_mult</STRONG> (Thumb, 336 bytes, Stack size 264 bytes, ecc.o(i.EccPoint_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_initial_double
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
</UL>

<P><STRONG><a name="[136]"></a>GIO_ConfigIntSource</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, peripheral_gpio.o(i.GIO_ConfigIntSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GIO_ConfigIntSource &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_setup
</UL>

<P><STRONG><a name="[138]"></a>GIO_SetDirection</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, peripheral_gpio.o(i.GIO_SetDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GIO_SetDirection &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_complete
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_setup
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_light_state
</UL>

<P><STRONG><a name="[139]"></a>GIO_SetPull</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, peripheral_gpio.o(i.GIO_SetPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GIO_SetPull &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config_uart_user
</UL>

<P><STRONG><a name="[13a]"></a>GIO_WriteValue</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, peripheral_gpio.o(i.GIO_WriteValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GIO_WriteValue &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_complete
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlc59731_write
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_setup
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_light_state
</UL>

<P><STRONG><a name="[13b]"></a>Host2Mesh_msg_send</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, mesh_queue.o(i.Host2Mesh_msg_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Host2Mesh_msg_send &rArr; btstack_memory_dtbt_msg_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_raise_assertion
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_msg_get
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_trigger
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_beacon_disable
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
</UL>

<P><STRONG><a name="[140]"></a>MeshQue_recv_done</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nimble_port.o(i.MeshQue_recv_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = MeshQue_recv_done &rArr; mesh_adv_thread &rArr; adv_send &rArr; bt_le_adv_start &rArr; ble_adv_conf_adv_instance &rArr; ble_gap_ext_adv_configure &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_adv_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_thread
</UL>

<P><STRONG><a name="[442]"></a>PINCTRL_DisableAllInputs</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, peripheral_pinctrl.o(i.PINCTRL_DisableAllInputs))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_setup
</UL>

<P><STRONG><a name="[14d]"></a>PINCTRL_SelUartRxdIn</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, peripheral_pinctrl.o(i.PINCTRL_SelUartRxdIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PINCTRL_SelUartRxdIn &rArr; PINCTRL_SelIn
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelIn
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config_uart_user
</UL>

<P><STRONG><a name="[440]"></a>PINCTRL_SetPadMux</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, peripheral_pinctrl.o(i.PINCTRL_SetPadMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PINCTRL_SetPadMux
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_setup
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config_uart_user
</UL>

<P><STRONG><a name="[441]"></a>PINCTRL_SetPadPwmSel</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, peripheral_pinctrl.o(i.PINCTRL_SetPadPwmSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PINCTRL_SetPadPwmSel
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_setup
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config_uart_user
</UL>

<P><STRONG><a name="[43f]"></a>SYSCTRL_ClearClkGateMulti</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, peripheral_sysctrl.o(i.SYSCTRL_ClearClkGateMulti))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_setup
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config_uart_user
</UL>

<P><STRONG><a name="[21b]"></a>UART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peripheral_uart.o(i.UART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_out_data
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[129]"></a>XYcZ_add</STRONG> (Thumb, 202 bytes, Stack size 64 bytes, ecc.o(i.XYcZ_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = XYcZ_add &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[152]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4ba]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[157]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_reset
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_complete
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_gpio_isr
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_switch_monitor
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_binding
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_light_state
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_provsioned_complete
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_light_to_save
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_default_status_init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_breath_mode_work
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_breath_mode_expire
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_write_callback
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_trigger
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_unbind_mode_run
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_power_on
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_platform_config
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_status_t
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_status
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_status
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_publish
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_get
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_status
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_get
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_last_status
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_last_get
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_get
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_status
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_publish
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_get
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set_unack
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_status
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_status
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_publish
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_get
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_status
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_set
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_get
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_status
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_publish
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_get
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_HSL_status
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_status
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_publish
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_get
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_status
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_set_unack
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_set
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_get
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_status
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_move_publish
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_move_get
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_get
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_status
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_publish
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_get
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_sys_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmds_put
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_is_provisioned
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_restart
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_init0
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_start
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_values_calculator
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_work_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_tt_handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_work_handler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_tt_handler
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temp_target_values
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_lightness_target_values
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_target_lightness
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_tt_values
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_handler
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_tt_values
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_handler
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_publish
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_publish
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_publish
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_publish
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_publish
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_publish
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vnd_status
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vnd_set_unack
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vnd_set
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vnd_get
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_reset
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_beacon_recv
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_start
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_get_reg
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_get_cur
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_aes
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_status_reset
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ccm
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ccm_decrypt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_node_alloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_memory_pool_free
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_service_adv_sent
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_rand
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_fcb_save
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;visit_mesh
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_binary_value
</UL>

<P><STRONG><a name="[154]"></a>__0snprintf$8</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4bb]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[34d]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_node_addr
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_net_key
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_app_key
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_rpl
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_node
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_net_key
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_app_key
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mod_path
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_node
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_net_key
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_app_key
</UL>

<P><STRONG><a name="[155]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4bc]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4bd]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[365]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
</UL>

<P><STRONG><a name="[4be]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[144]"></a>__aeabi_assert</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_tt_handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_tt_handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_tt_handler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_tt_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_tt_handler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_tt_handler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_tt_handler
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[4bf]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[4c0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[4c1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[4c2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[466]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[158]"></a>_copy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, utils.o(i._copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _copy
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_update
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_setup
</UL>

<P><STRONG><a name="[16a]"></a>_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, utils.o(i._set))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_sha256_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_sha256_final
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_setup
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_final
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_init
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_erase
</UL>

<P><STRONG><a name="[16e]"></a>actual_to_linear</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, state_binding.o(i.actual_to_linear))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = actual_to_linear &rArr; ceiling &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceiling
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_binding
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_lightness_target_values
</UL>

<P><STRONG><a name="[171]"></a>ad_data_filter_mesh_msg</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ad_parser.o(i.ad_data_filter_mesh_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ad_data_filter_mesh_msg &rArr; ad_iterator_next
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_iterator_next
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_iterator_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_iterator_has_more
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_iterator_get_data_type
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_iterator_get_data_len
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_iterator_get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtermeshADV
</UL>

<P><STRONG><a name="[175]"></a>ad_iterator_get_data</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ad_parser.o(i.ad_iterator_get_data))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_data_filter_mesh_msg
</UL>

<P><STRONG><a name="[174]"></a>ad_iterator_get_data_len</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ad_parser.o(i.ad_iterator_get_data_len))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_data_filter_mesh_msg
</UL>

<P><STRONG><a name="[173]"></a>ad_iterator_get_data_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ad_parser.o(i.ad_iterator_get_data_type))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_data_filter_mesh_msg
</UL>

<P><STRONG><a name="[177]"></a>ad_iterator_has_more</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ad_parser.o(i.ad_iterator_has_more))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_data_filter_mesh_msg
</UL>

<P><STRONG><a name="[172]"></a>ad_iterator_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ad_parser.o(i.ad_iterator_init))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_data_filter_mesh_msg
</UL>

<P><STRONG><a name="[176]"></a>ad_iterator_next</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ad_parser.o(i.ad_iterator_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ad_iterator_next
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_data_filter_mesh_msg
</UL>

<P><STRONG><a name="[34]"></a>after_power_on</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_mesh_flash_oper.o(i.after_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = after_power_on
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_mesh_flash_oper.o(i.fast_switch_monitor)
</UL>
<P><STRONG><a name="[188]"></a>apUART_BaudRateSet</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, peripheral_uart.o(i.apUART_BaudRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>

<P><STRONG><a name="[21a]"></a>apUART_Check_TXFIFO_FULL</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peripheral_uart.o(i.apUART_Check_TXFIFO_FULL))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_cmd_data_uart_out_data
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[187]"></a>apUART_Initialize</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, peripheral_uart.o(i.apUART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config_uart
</UL>

<P><STRONG><a name="[18b]"></a>app_key_set</STRONG> (Thumb, 314 bytes, Stack size 64 bytes, cfg_srv.o(i.app_key_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = app_key_set &rArr; bt_mesh_k4 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_find
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_get
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_app_key
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k4
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_alloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_update
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_add
</UL>

<P><STRONG><a name="[d]"></a>app_main</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = app_main &rArr; ble_mesh_light_model_power_on &rArr; ble_mesh_light_model_light_reset &rArr; set_led_color &rArr; tlc59731_write &rArr; GIO_WriteValue &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mesh_uart_output_func
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_evt_callback
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_trace_config
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_switch_monitor_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_peripherals_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_power_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91800.o(.text)
</UL>
<P><STRONG><a name="[12d]"></a>apply_z</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, ecc.o(i.apply_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = apply_z &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_initial_double
</UL>

<P><STRONG><a name="[1b7]"></a>att_db_util_add_characteristic_uuid128</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, att_db_util.o(i.att_db_util_add_characteristic_uuid128))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = att_db_util_add_characteristic_uuid128 &rArr; att_db_util_add_attribute_uuid16 &rArr; att_db_util_assert_space
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_128
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid16
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid128
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_init_service
</UL>

<P><STRONG><a name="[1b8]"></a>att_db_util_add_service_uuid128</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, att_db_util.o(i.att_db_util_add_service_uuid128))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = att_db_util_add_service_uuid128 &rArr; att_db_util_add_attribute_uuid16 &rArr; att_db_util_assert_space
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_128
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid16
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_init_service
</UL>

<P><STRONG><a name="[1ba]"></a>att_db_util_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, att_db_util.o(i.att_db_util_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = att_db_util_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_set_end_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_service
</UL>

<P><STRONG><a name="[48]"></a>att_read_callback</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, profile.o(i.att_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = att_read_callback &rArr; ota_read_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_read_callback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> profile.o(i.setup_profile)
<LI> profile.o(i.user_packet_handler)
</UL>
<P><STRONG><a name="[47]"></a>att_write_callback</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, profile.o(i.att_write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = att_write_callback &rArr; ota_write_callback &rArr; EflashProgram &rArr; Delay10US
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_write_callback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> profile.o(i.setup_profile)
<LI> profile.o(i.user_packet_handler)
</UL>
<P><STRONG><a name="[1da]"></a>bearer_prov_link_establish</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, prov.o(i.bearer_prov_link_establish))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bearer_prov_link_establish &rArr; bt_mesh_scan_enable &rArr; ble_gap_ext_disc &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flag_for_adv_sent
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmds_put
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_disable
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_be32
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_get_adv_addr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_disable
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_buf_create
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_link
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_node_res_avail
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_provlink_id
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_reliable
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_clear_tx
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_recv
</UL>

<P><STRONG><a name="[14]"></a>ble_adv_gap_mesh_cb</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, adv.o(i.ble_adv_gap_mesh_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = ble_adv_gap_mesh_cb &rArr; bt_mesh_scan_cb &rArr; bt_mesh_net_recv &rArr; bt_mesh_trans_recv &rArr; trans_seg &rArr; ctl_recv &rArr; bt_mesh_friend_req &rArr; friend_cred_create &rArr; friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_cb
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get_pkthdr
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_gap_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glue.o(i.ble_adv_conf_adv_instance)
</UL>
<P><STRONG><a name="[1e9]"></a>ble_gap_disc_cancel</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, adv.o(i.ble_gap_disc_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_gap_disc_cancel &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmds_put
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_disable
</UL>

<P><STRONG><a name="[1e6]"></a>ble_gap_ext_adv_configure</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, adv.o(i.ble_gap_ext_adv_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_gap_ext_adv_configure &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_bd_addr
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmds_put
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_conf_adv_instance
</UL>

<P><STRONG><a name="[1e5]"></a>ble_gap_ext_adv_remove</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adv.o(i.ble_gap_ext_adv_remove))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_conf_adv_instance
</UL>

<P><STRONG><a name="[1eb]"></a>ble_gap_ext_adv_rsp_set_data</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, adv.o(i.ble_gap_ext_adv_rsp_set_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_gap_ext_adv_rsp_set_data &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmds_put
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_start
</UL>

<P><STRONG><a name="[1ec]"></a>ble_gap_ext_adv_set_data</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, adv.o(i.ble_gap_ext_adv_set_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_gap_ext_adv_set_data &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmds_put
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_start
</UL>

<P><STRONG><a name="[1ed]"></a>ble_gap_ext_adv_start</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, adv.o(i.ble_gap_ext_adv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gap_ext_adv_start &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmds_put
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_start
</UL>

<P><STRONG><a name="[1e4]"></a>ble_gap_ext_adv_stop</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, adv.o(i.ble_gap_ext_adv_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gap_ext_adv_stop &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmds_put
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_stop
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_conf_adv_instance
</UL>

<P><STRONG><a name="[1ee]"></a>ble_gap_ext_disc</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, adv.o(i.ble_gap_ext_disc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_gap_ext_disc &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmds_put
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
</UL>

<P><STRONG><a name="[29b]"></a>ble_gap_mesh_cb_register</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adv.o(i.ble_gap_mesh_cb_register))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_init
</UL>

<P><STRONG><a name="[310]"></a>ble_gap_terminate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adv.o(i.ble_gap_terminate))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_gatt_disconnect
</UL>

<P><STRONG><a name="[1ef]"></a>ble_gattc_notify_custom</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, proxy.o(i.ble_gattc_notify_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_notify_custom
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_send
</UL>

<P><STRONG><a name="[30e]"></a>ble_gatts_find_svc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mesh_srv.o(i.ble_gatts_find_svc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gatts_find_svc
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_prov_enable
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_prov_disable
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_gatt_disable
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_gatt_enable
</UL>

<P><STRONG><a name="[30f]"></a>ble_gatts_svc_set_visibility</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adv.o(i.ble_gatts_svc_set_visibility))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_prov_enable
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_prov_disable
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_gatt_disable
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_gatt_enable
</UL>

<P><STRONG><a name="[1df]"></a>ble_get_adv_addr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, prov.o(i.ble_get_adv_addr))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_prov_link_establish
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set_white_list
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_open
</UL>

<P><STRONG><a name="[1f4]"></a>ble_mesh_light_model_conf_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_mesh_light_model.o(i.ble_mesh_light_model_conf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ble_mesh_light_model_conf_init &rArr; ble_mesh_light_model_default_status_init &rArr; state_binding &rArr; linear_to_actual &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transition_timers_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_default_var_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_default_status_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_init
</UL>

<P><STRONG><a name="[19e]"></a>ble_mesh_light_model_power_on</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, ble_mesh_light_model.o(i.ble_mesh_light_model_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ble_mesh_light_model_power_on &rArr; ble_mesh_light_model_light_reset &rArr; set_led_color &rArr; tlc59731_write &rArr; GIO_WriteValue &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_get
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_light_reset
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_led_color
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1fd]"></a>ble_mesh_light_model_provsioned_complete</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ble_mesh_light_model.o(i.ble_mesh_light_model_provsioned_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_mesh_light_model_provsioned_complete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_is_breath_run
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_complete
</UL>

<P><STRONG><a name="[1fe]"></a>ble_mesh_light_model_unbind_mode_run</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ble_mesh_light_model.o(i.ble_mesh_light_model_unbind_mode_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_mesh_light_model_unbind_mode_run &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[1ff]"></a>ble_mesh_proxy_gap_event</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, proxy.o(i.ble_mesh_proxy_gap_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ble_mesh_proxy_gap_event &rArr; proxy_disconnected &rArr; bt_mesh_pb_gatt_close &rArr; bt_mesh_attention &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_is_provisioned
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_status_reset
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_disconnected
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_connected
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ccc_write
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ccc_write
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_gatt_open
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_gap_event
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
</UL>

<P><STRONG><a name="[422]"></a>ble_npl_event_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net.o(i.ble_npl_event_init))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_init
</UL>

<P><STRONG><a name="[20c]"></a>ble_sm_alg_ecc_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_sm_alg.o(i.ble_sm_alg_ecc_init))
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_set_rng
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_init
</UL>

<P><STRONG><a name="[20e]"></a>ble_sm_alg_gen_dhkey</STRONG> (Thumb, 86 bytes, Stack size 144 bytes, ble_sm_alg.o(i.ble_sm_alg_gen_dhkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 884<LI>Call Chain = ble_sm_alg_gen_dhkey &rArr; uECC_shared_secret &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_public_key
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_dh_key_gen
</UL>

<P><STRONG><a name="[212]"></a>ble_sm_alg_gen_key_pair</STRONG> (Thumb, 78 bytes, Stack size 80 bytes, ble_sm_alg.o(i.ble_sm_alg_gen_key_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 908<LI>Call Chain = ble_sm_alg_gen_key_pair &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_in_place
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buf
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pub_key_gen
</UL>

<P><STRONG><a name="[216]"></a>bt_TM_auth</STRONG> (Thumb, 72 bytes, Stack size 168 bytes, crypto.o(i.bt_TM_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = bt_TM_auth &rArr; tc_sha256_update &rArr; compress
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_sha256_update
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_sha256_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_sha256_final
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_authen_TMO
</UL>

<P><STRONG><a name="[13]"></a>bt_cmd_data_uart_out_data</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bt_cmd_data_uart_io_adp.o(i.bt_cmd_data_uart_out_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_cmd_data_uart_out_data
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.app_main)
</UL>
<P><STRONG><a name="[21c]"></a>bt_dh_key_gen</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, glue.o(i.bt_dh_key_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = bt_dh_key_gen &rArr; ble_sm_alg_gen_dhkey &rArr; uECC_shared_secret &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_dhkey
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pub_key
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_pub_key
</UL>

<P><STRONG><a name="[21d]"></a>bt_encrypt_be</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, glue.o(i.bt_encrypt_be))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_encrypt_be &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aes_result
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_aes
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_time_ms_to_ticks
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_obfuscate
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_id_adv
</UL>

<P><STRONG><a name="[17e]"></a>bt_hex</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, glue.o(i.bt_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bt_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_platform_config
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_cb
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_send
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_recv
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_send
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_overwrite
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_get
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_comp_data_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ttl_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ttl_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_get
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_authen_TMO
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_create
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_recv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_recv
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_send
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_create
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_conf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_obfuscate
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encrypt
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_decrypt
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k2
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_auth
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_encrypt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_decrypt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_keys_create
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ctl_send
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_label_uuid_get
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_get
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_transmit_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_transmit_get
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_filter_status
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_send
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_id_adv
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_id_adv
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_gatt_recv
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pub_key
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_confirm
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_adv
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_retransmit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_random
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_pub_key
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_dh_key_cb
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirm
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_complete
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_send_pub_key
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_decode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_segment_and_send
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_friend_pdu
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_net
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_net_key
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_recv
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_set
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_send
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_local
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_relay
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_match
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdu_recv
</UL>

<P><STRONG><a name="[180]"></a>bt_le_adv_start</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, glue.o(i.bt_le_adv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = bt_le_adv_start &rArr; ble_adv_conf_adv_instance &rArr; ble_gap_ext_adv_configure &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_adv_start
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_adv_set_data
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_adv_rsp_set_data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ad
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_conf_adv_instance
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_send
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_id_adv
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_id_adv
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_adv_start
</UL>

<P><STRONG><a name="[183]"></a>bt_le_adv_stop</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, glue.o(i.bt_le_adv_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_le_adv_stop &rArr; ble_gap_ext_adv_stop &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_adv_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_send
</UL>

<P><STRONG><a name="[17c]"></a>bt_mesh_adv_create</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adv.o(i.bt_mesh_adv_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_mesh_adv_create &rArr; bt_mesh_adv_create_from_pool &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_create_from_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprovisioned_beacon_send
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_send
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_buf_create
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ctl_send
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_relay
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unseg
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_seg
</UL>

<P><STRONG><a name="[223]"></a>bt_mesh_adv_create_from_pool</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, adv.o(i.bt_mesh_adv_create_from_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_mesh_adv_create_from_pool &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get_pkthdr
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_create
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_buf_alloc
</UL>

<P><STRONG><a name="[224]"></a>bt_mesh_adv_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, adv.o(i.bt_mesh_adv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bt_mesh_adv_init &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_init
</UL>

<P><STRONG><a name="[228]"></a>bt_mesh_adv_send</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, adv.o(i.bt_mesh_adv_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_mesh_adv_send &rArr; net_buf_put &rArr; npl_freertos_eventq_put
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_ref
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprovisioned_beacon_send
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_send
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_reliable
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_retransmit
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_ack_send
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_timeout
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_send
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_resend
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_relay
</UL>

<P><STRONG><a name="[22b]"></a>bt_mesh_adv_update</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, adv.o(i.bt_mesh_adv_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bt_mesh_adv_update &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_enable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_add
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_set
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_start
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_set
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_disconnected
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_connected
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_identity_enable
</UL>

<P><STRONG><a name="[22c]"></a>bt_mesh_aes_cmac</STRONG> (Thumb, 68 bytes, Stack size 304 bytes, crypto.o(i.bt_mesh_aes_cmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_update
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_setup
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_final
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprovisioned_beacon_send
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_conf
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k2
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_aes_cmac_one
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_random
</UL>

<P><STRONG><a name="[231]"></a>bt_mesh_app_decrypt</STRONG> (Thumb, 200 bytes, Stack size 88 bytes, crypto.o(i.bt_mesh_app_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = bt_mesh_app_decrypt &rArr; bt_mesh_ccm_decrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ccm_decrypt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_app_nonce
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdu_recv
</UL>

<P><STRONG><a name="[236]"></a>bt_mesh_app_encrypt</STRONG> (Thumb, 290 bytes, Stack size 88 bytes, crypto.o(i.bt_mesh_app_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = bt_mesh_app_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ccm_encrypt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_app_nonce
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_send
</UL>

<P><STRONG><a name="[195]"></a>bt_mesh_app_key_alloc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cfg_srv.o(i.bt_mesh_app_key_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_mesh_app_key_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
</UL>

<P><STRONG><a name="[191]"></a>bt_mesh_app_key_del</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cfg_srv.o(i.bt_mesh_app_key_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bt_mesh_app_key_del &rArr; bt_mesh_clear_app_key &rArr; clear_app_key &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_foreach
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_app_key
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_del
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_del
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
</UL>

<P><STRONG><a name="[15c]"></a>bt_mesh_app_key_find</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, transport.o(i.bt_mesh_app_key_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bt_mesh_app_key_find
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_is_ready
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_start
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_retransmit
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_del
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mod_pub_set
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_keys
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_get
</UL>

<P><STRONG><a name="[23a]"></a>bt_mesh_app_key_get</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, transport.o(i.bt_mesh_app_key_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bt_mesh_app_key_get &rArr; bt_mesh_elem_find
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_node_find
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_find
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_send
</UL>

<P><STRONG><a name="[1c3]"></a>bt_mesh_attention</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, health_srv.o(i.bt_mesh_attention))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_mesh_attention &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_link
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attention_set_unrel
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_gatt_close
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_invite
</UL>

<P><STRONG><a name="[1c5]"></a>bt_mesh_beacon_auth</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, crypto.o(i.bt_mesh_beacon_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_be32
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_aes_cmac_one
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_beacon_update
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_match
</UL>

<P><STRONG><a name="[1d0]"></a>bt_mesh_beacon_create</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, beacon.o(i.bt_mesh_beacon_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_mesh_beacon_create &rArr; net_buf_simple_add_u8 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_be32
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_flags
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_send
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
</UL>

<P><STRONG><a name="[1d4]"></a>bt_mesh_beacon_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, beacon.o(i.bt_mesh_beacon_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_mesh_beacon_disable &rArr; k_delayed_work_cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_beacon_disable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_prov_link_establish
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_start
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_whitelist_remove
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_relay
</UL>

<P><STRONG><a name="[1d3]"></a>bt_mesh_beacon_enable</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, beacon.o(i.bt_mesh_beacon_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = bt_mesh_beacon_enable &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_is_provisioned
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_submit
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_beacon_update
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_start
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_stop
</UL>

<P><STRONG><a name="[1c9]"></a>bt_mesh_beacon_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cfg_srv.o(i.bt_mesh_beacon_get))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_get
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_ivu_initiator
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_recv
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_start
</UL>

<P><STRONG><a name="[241]"></a>bt_mesh_beacon_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, beacon.o(i.bt_mesh_beacon_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_mesh_beacon_init &rArr; k_delayed_work_init &rArr; ble_npl_callout_init &rArr; npl_freertos_callout_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_main
</UL>

<P><STRONG><a name="[242]"></a>bt_mesh_beacon_ivu_initiator</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, beacon.o(i.bt_mesh_beacon_ivu_initiator))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_mesh_beacon_ivu_initiator &rArr; k_work_submit &rArr; npl_freertos_callout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_submit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_get
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_recv
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_resend
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ivu_refresh
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_update
</UL>

<P><STRONG><a name="[243]"></a>bt_mesh_beacon_recv</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, beacon.o(i.bt_mesh_beacon_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = bt_mesh_beacon_recv &rArr; secure_beacon_recv &rArr; bt_mesh_subnet_find &rArr; auth_match &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_prov_link_establish
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_beacon_recv
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_recv
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set_white_list
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_cb
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_complete_pdu
</UL>

<P><STRONG><a name="[234]"></a>bt_mesh_ccm_decrypt</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, crypto.o(i.bt_mesh_ccm_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bt_mesh_ccm_decrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ccm
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ccm_result
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sem_take
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_decrypt
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_decrypt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_decrypt
</UL>

<P><STRONG><a name="[237]"></a>bt_mesh_ccm_encrypt</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, crypto.o(i.bt_mesh_ccm_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ccm
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ccm_result
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sem_take
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_encrypt
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encrypt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_encrypt
</UL>

<P><STRONG><a name="[24a]"></a>bt_mesh_cfg_app_key_add</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, cfg_cli.o(i.bt_mesh_cfg_app_key_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = bt_mesh_cfg_app_key_add &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_reset
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_prepare
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_start
</UL>

<P><STRONG><a name="[95]"></a>bt_mesh_cfg_cli_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cfg_cli.o(i.bt_mesh_cfg_cli_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_mesh_cfg_cli_init &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> access.o(.constdata)
</UL>
<P><STRONG><a name="[349]"></a>bt_mesh_cfg_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cfg_srv.o(i.bt_mesh_cfg_get))
<BR><BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_cfg
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_commit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_set
</UL>

<P><STRONG><a name="[24f]"></a>bt_mesh_cfg_mod_app_bind_vnd</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, cfg_cli.o(i.bt_mesh_cfg_mod_app_bind_vnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = bt_mesh_cfg_mod_app_bind_vnd &rArr; mod_app_bind &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_start
</UL>

<P><STRONG><a name="[251]"></a>bt_mesh_cfg_reset</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, cfg_srv.o(i.bt_mesh_cfg_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = bt_mesh_cfg_reset &rArr; bt_mesh_subnet_del &rArr; bt_mesh_app_key_del &rArr; bt_mesh_clear_app_key &rArr; clear_app_key &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_foreach
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_set_hb_sub_dst
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_del
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
</UL>

<P><STRONG><a name="[93]"></a>bt_mesh_cfg_srv_init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, cfg_srv.o(i.bt_mesh_cfg_srv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bt_mesh_cfg_srv_init &rArr; k_delayed_work_init &rArr; ble_npl_callout_init &rArr; npl_freertos_callout_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_add_arg
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_mesh_role
</UL>
<BR>[Address Reference Count : 1]<UL><LI> access.o(.constdata)
</UL>
<P><STRONG><a name="[239]"></a>bt_mesh_clear_app_key</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, settings.o(i.bt_mesh_clear_app_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = bt_mesh_clear_app_key &rArr; clear_app_key &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_update_find
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_app_key
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_del
</UL>

<P><STRONG><a name="[259]"></a>bt_mesh_clear_net</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, settings.o(i.bt_mesh_clear_net))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bt_mesh_clear_net &rArr; schedule_store &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
</UL>

<P><STRONG><a name="[25a]"></a>bt_mesh_clear_node</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, settings.o(i.bt_mesh_clear_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = bt_mesh_clear_node &rArr; clear_node &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_update_find
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_node
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_node_del
</UL>

<P><STRONG><a name="[25d]"></a>bt_mesh_clear_rpl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, settings.o(i.bt_mesh_clear_rpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_mesh_clear_rpl &rArr; schedule_store &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_rx_reset
</UL>

<P><STRONG><a name="[25e]"></a>bt_mesh_clear_subnet</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, settings.o(i.bt_mesh_clear_subnet))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = bt_mesh_clear_subnet &rArr; clear_net_key &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_update_find
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_net_key
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_del
</UL>

<P><STRONG><a name="[179]"></a>bt_mesh_comp_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, access.o(i.bt_mesh_comp_get))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_get_page_0
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_get_current
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_req
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_free
</UL>

<P><STRONG><a name="[260]"></a>bt_mesh_comp_provision</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, access.o(i.bt_mesh_comp_provision))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bt_mesh_comp_provision &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_provision
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set
</UL>

<P><STRONG><a name="[262]"></a>bt_mesh_comp_register</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, access.o(i.bt_mesh_comp_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_mesh_comp_register &rArr; bt_mesh_model_foreach
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_foreach
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_init
</UL>

<P><STRONG><a name="[263]"></a>bt_mesh_comp_unprovision</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, access.o(i.bt_mesh_comp_unprovision))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_mesh_comp_unprovision &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set
</UL>

<P><STRONG><a name="[264]"></a>bt_mesh_ctl_send</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, transport.o(i.bt_mesh_ctl_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_create
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_reserve
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_enqueue_tx
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_send
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_send
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_update
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_req
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_poll
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_clear
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
</UL>

<P><STRONG><a name="[16d]"></a>bt_mesh_default_ttl_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cfg_srv.o(i.bt_mesh_default_ttl_get))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ttl_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ttl_get
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_send
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_seg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_timeout
</UL>

<P><STRONG><a name="[44e]"></a>bt_mesh_elem_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, access.o(i.bt_mesh_elem_count))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_invite
</UL>

<P><STRONG><a name="[23b]"></a>bt_mesh_elem_find</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, access.o(i.bt_mesh_elem_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bt_mesh_elem_find
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_find_group
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_overwrite
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_del
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_add
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_overwrite
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get_vnd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_del_all
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_del
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_add
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_va_set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_unbind
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_get
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_recv
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_decode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_req
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_send
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_get
</UL>

<P><STRONG><a name="[26c]"></a>bt_mesh_fcs_calc</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, crypto.o(i.bt_mesh_fcs_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_mesh_fcs_calc &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_adv
</UL>

<P><STRONG><a name="[450]"></a>bt_mesh_fcs_check</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, crypto.o(i.bt_mesh_fcs_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bt_mesh_fcs_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_msg_recv
</UL>

<P><STRONG><a name="[26d]"></a>bt_mesh_fixed_group_match</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, access.o(i.bt_mesh_fixed_group_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_mesh_fixed_group_match &rArr; bt_mesh_friend_get &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_relay_get
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_recv
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_recv
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_send
</UL>

<P><STRONG><a name="[270]"></a>bt_mesh_friend_clear</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, friend.o(i.bt_mesh_friend_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = bt_mesh_friend_clear &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_transmit_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_primary_addr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_find
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ctl_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctl_recv
</UL>

<P><STRONG><a name="[275]"></a>bt_mesh_friend_clear_cfm</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, friend.o(i.bt_mesh_friend_clear_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_mesh_friend_clear_cfm &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctl_recv
</UL>

<P><STRONG><a name="[276]"></a>bt_mesh_friend_clear_incomplete</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, friend.o(i.bt_mesh_friend_clear_incomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bt_mesh_friend_clear_incomplete &rArr; net_buf_unref &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_peek_head
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_is_empty
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_get
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_lpn_matches
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_rx_reset
</UL>

<P><STRONG><a name="[27b]"></a>bt_mesh_friend_clear_net_idx</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, friend.o(i.bt_mesh_friend_clear_net_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_mesh_friend_clear_net_idx &rArr; friend_clear &rArr; net_buf_unref &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_set
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_del
</UL>

<P><STRONG><a name="[27c]"></a>bt_mesh_friend_enqueue_rx</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, friend.o(i.bt_mesh_friend_enqueue_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = bt_mesh_friend_enqueue_rx &rArr; friend_lpn_enqueue_rx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_get
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_lpn_matches
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_lpn_enqueue_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_recv
</UL>

<P><STRONG><a name="[267]"></a>bt_mesh_friend_enqueue_tx</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, friend.o(i.bt_mesh_friend_enqueue_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_get
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_match
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_lpn_matches
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_lpn_enqueue_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ctl_send
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unseg
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_seg
</UL>

<P><STRONG><a name="[273]"></a>bt_mesh_friend_find</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, friend.o(i.bt_mesh_friend_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_mesh_friend_find &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout_get
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_sub_rem
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_sub_add
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_req
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_poll
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear
</UL>

<P><STRONG><a name="[26e]"></a>bt_mesh_friend_get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cfg_srv.o(i.bt_mesh_friend_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_mesh_friend_get &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_fixed_group_match
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_send
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_enqueue_tx
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_enqueue_rx
</UL>

<P><STRONG><a name="[280]"></a>bt_mesh_friend_init</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, friend.o(i.bt_mesh_friend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_mesh_friend_init &rArr; k_delayed_work_init &rArr; ble_npl_callout_init &rArr; npl_freertos_callout_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_add_arg
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pool_init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_start
</UL>

<P><STRONG><a name="[27e]"></a>bt_mesh_friend_match</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, friend.o(i.bt_mesh_friend_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bt_mesh_friend_match &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_lpn_matches
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_enqueue_tx
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_recv
</UL>

<P><STRONG><a name="[282]"></a>bt_mesh_friend_poll</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, friend.o(i.bt_mesh_friend_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = bt_mesh_friend_poll &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_is_empty
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_find
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_recv_delay
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_update
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctl_recv
</UL>

<P><STRONG><a name="[285]"></a>bt_mesh_friend_req</STRONG> (Thumb, 552 bytes, Stack size 48 bytes, friend.o(i.bt_mesh_friend_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = bt_mesh_friend_req &rArr; friend_cred_create &rArr; friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get_32
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_find
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_create
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_clear
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offer_delay
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_clear
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_offer
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctl_recv
</UL>

<P><STRONG><a name="[28a]"></a>bt_mesh_friend_sec_update</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, friend.o(i.bt_mesh_friend_sec_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_mesh_friend_sec_update &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_sec_update
</UL>

<P><STRONG><a name="[28b]"></a>bt_mesh_friend_sec_update_done</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, friend.o(i.bt_mesh_friend_sec_update_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = bt_mesh_friend_sec_update_done &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_update
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_recv
</UL>

<P><STRONG><a name="[28c]"></a>bt_mesh_friend_sub_add</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, friend.o(i.bt_mesh_friend_sub_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = bt_mesh_friend_sub_add &rArr; enqueue_sub_cfm &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_be16
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_find
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_recv_delay
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_sub_cfm
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctl_recv
</UL>

<P><STRONG><a name="[28f]"></a>bt_mesh_friend_sub_rem</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, friend.o(i.bt_mesh_friend_sub_rem))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = bt_mesh_friend_sub_rem &rArr; enqueue_sub_cfm &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_be16
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_find
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_recv_delay
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_sub_cfm
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctl_recv
</UL>

<P><STRONG><a name="[3fe]"></a>bt_mesh_gatt_config</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, proxy.o(i.bt_mesh_gatt_config))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_restart
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
</UL>

<P><STRONG><a name="[185]"></a>bt_mesh_gatt_proxy_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cfg_srv.o(i.bt_mesh_gatt_proxy_get))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_send
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_set
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_sec_update
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_start
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gatt_proxy_status
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_set
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_advertise
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertise_subnet
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_relay
</UL>

<P><STRONG><a name="[290]"></a>bt_mesh_handle_set</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, proxy.o(i.bt_mesh_handle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_mesh_handle_set &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_env_init
</UL>

<P><STRONG><a name="[3ae]"></a>bt_mesh_hb_pub_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cfg_srv.o(i.bt_mesh_hb_pub_get))
<BR><BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_hb_pub
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_commit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pub_set
</UL>

<P><STRONG><a name="[96]"></a>bt_mesh_health_cli_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, health_cli.o(i.bt_mesh_health_cli_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_mesh_health_cli_init &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_init
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> access.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>bt_mesh_health_srv_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, health_srv.o(i.bt_mesh_health_srv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_mesh_health_srv_init &rArr; k_delayed_work_init &rArr; ble_npl_callout_init &rArr; npl_freertos_callout_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_add_arg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> access.o(.constdata)
</UL>
<P><STRONG><a name="[292]"></a>bt_mesh_heartbeat</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, cfg_srv.o(i.bt_mesh_heartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_mesh_heartbeat &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_heartbeat
</UL>

<P><STRONG><a name="[294]"></a>bt_mesh_id128</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, crypto.o(i.bt_mesh_id128))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = bt_mesh_id128 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k1
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_keys_create
</UL>

<P><STRONG><a name="[296]"></a>bt_mesh_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mesh.o(i.bt_mesh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = bt_mesh_init &rArr; bt_mesh_prov_init &rArr; bt_pub_key_gen &rArr; ble_sm_alg_gen_key_pair &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_comp_register
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_mesh_cb_register
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_settings_init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_node_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_ecc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_init0
</UL>

<P><STRONG><a name="[1cb]"></a>bt_mesh_is_provisioned</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mesh.o(i.bt_mesh_is_provisioned))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_mesh_is_provisioned &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_is_ready
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_enable
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_start_advertising
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_enable
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_write_callback
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_read_callback
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_send
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_adv_recv
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_recv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_proxy_gap_event
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_connected
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_identity_enable
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_service_adv_sent
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_adv_start
</UL>

<P><STRONG><a name="[26a]"></a>bt_mesh_k1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, crypto.o(i.bt_mesh_k1))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = bt_mesh_k1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_aes_cmac_one
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_session_key
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_nonce
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_dev_key
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_conf_key
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_id128
</UL>

<P><STRONG><a name="[29f]"></a>bt_mesh_k2</STRONG> (Thumb, 300 bytes, Stack size 112 bytes, crypto.o(i.bt_mesh_k2))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_aes_cmac
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_s1
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_aes_cmac_one
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_keys_create
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_set
</UL>

<P><STRONG><a name="[2a0]"></a>bt_mesh_k3</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, crypto.o(i.bt_mesh_k3))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = bt_mesh_k3 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_s1
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_aes_cmac_one
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_keys_create
</UL>

<P><STRONG><a name="[196]"></a>bt_mesh_k4</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, crypto.o(i.bt_mesh_k4))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = bt_mesh_k4 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_s1
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_aes_cmac_one
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
</UL>

<P><STRONG><a name="[2a1]"></a>bt_mesh_kr_update</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, net.o(i.bt_mesh_kr_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_mesh_kr_update &rArr; bt_mesh_net_revoke_keys &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_refresh
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_revoke_keys
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_recv
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_update
</UL>

<P><STRONG><a name="[2a4]"></a>bt_mesh_label_uuid_get</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, cfg_srv.o(i.bt_mesh_label_uuid_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_mesh_label_uuid_get &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_send
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_list_clear
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdu_recv
</UL>

<P><STRONG><a name="[2a5]"></a>bt_mesh_lpn_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpn.o(i.bt_mesh_lpn_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = bt_mesh_lpn_disable &rArr; clear_friendship &rArr; bt_mesh_lpn_status_changed &rArr; hb_send &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_friendship
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
</UL>

<P><STRONG><a name="[2a7]"></a>bt_mesh_lpn_friend_clear_cfm</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lpn.o(i.bt_mesh_lpn_friend_clear_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = bt_mesh_lpn_friend_clear_cfm &rArr; clear_friendship &rArr; bt_mesh_lpn_status_changed &rArr; hb_send &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_primary_addr
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_friendship
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctl_recv
</UL>

<P><STRONG><a name="[2a9]"></a>bt_mesh_lpn_friend_offer</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, lpn.o(i.bt_mesh_lpn_friend_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = bt_mesh_lpn_friend_offer &rArr; friend_cred_create &rArr; friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_poll
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_create
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctl_recv
</UL>

<P><STRONG><a name="[2ac]"></a>bt_mesh_lpn_friend_sub_cfm</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, lpn.o(i.bt_mesh_lpn_friend_sub_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = bt_mesh_lpn_friend_sub_cfm &rArr; sub_update &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_update
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_poll
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_timeout
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_response_received
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_and_clear_bit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_or
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_and
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctl_recv
</UL>

<P><STRONG><a name="[2b0]"></a>bt_mesh_lpn_friend_update</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, lpn.o(i.bt_mesh_lpn_friend_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = bt_mesh_lpn_friend_update &rArr; sub_update &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_iv_update
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_beacon_update
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_kr_update
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_ivu_initiator
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_status_changed
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_update
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_poll
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_timeout
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_response_received
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctl_recv
</UL>

<P><STRONG><a name="[2b3]"></a>bt_mesh_lpn_group_add</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lpn.o(i.bt_mesh_lpn_group_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = bt_mesh_lpn_group_add &rArr; sub_update &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_update
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_group_add
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_established
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_overwrite
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_add
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_overwrite
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_add
</UL>

<P><STRONG><a name="[2b6]"></a>bt_mesh_lpn_group_del</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, lpn.o(i.bt_mesh_lpn_group_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = bt_mesh_lpn_group_del &rArr; sub_update &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_update
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_established
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_overwrite
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_del
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_overwrite
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_del_all
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_del
</UL>

<P><STRONG><a name="[2b7]"></a>bt_mesh_lpn_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lpn.o(i.bt_mesh_lpn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = bt_mesh_lpn_init &rArr; send_friend_req &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_disable
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_req
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_start
</UL>

<P><STRONG><a name="[2b9]"></a>bt_mesh_lpn_msg_received</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lpn.o(i.bt_mesh_lpn_msg_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = bt_mesh_lpn_msg_received &rArr; send_friend_poll &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_poll
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_response_received
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_recv
</UL>

<P><STRONG><a name="[2ba]"></a>bt_mesh_lpn_poll</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lpn.o(i.bt_mesh_lpn_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = bt_mesh_lpn_poll &rArr; send_friend_poll &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_poll
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_seg
</UL>

<P><STRONG><a name="[2b1]"></a>bt_mesh_lpn_status_changed</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cfg_srv.o(i.bt_mesh_lpn_status_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = bt_mesh_lpn_status_changed &rArr; hb_send &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_printf
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_find
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_element_of_node
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_friendship
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_update
</UL>

<P><STRONG><a name="[2c3]"></a>bt_mesh_model_elem</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, access.o(i.bt_mesh_model_elem))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set_unack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set_unack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set_unack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_start
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_retransmit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_send
</UL>

<P><STRONG><a name="[2bc]"></a>bt_mesh_model_find</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, access.o(i.bt_mesh_model_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bt_mesh_model_find
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_status_changed
</UL>

<P><STRONG><a name="[26b]"></a>bt_mesh_model_find_group</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, access.o(i.bt_mesh_model_find_group))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_op
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_del
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_add
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_del
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_add
</UL>

<P><STRONG><a name="[3ac]"></a>bt_mesh_model_find_vnd</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, access.o(i.bt_mesh_model_find_vnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bt_mesh_model_find_vnd
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get_vnd
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model
</UL>

<P><STRONG><a name="[238]"></a>bt_mesh_model_foreach</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, access.o(i.bt_mesh_model_foreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_mesh_model_foreach
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_comp_register
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_reset
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_del
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_commit
</UL>

<P><STRONG><a name="[2bf]"></a>bt_mesh_model_get</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, access.o(i.bt_mesh_model_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_mesh_model_get &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_set
</UL>

<P><STRONG><a name="[18a]"></a>bt_mesh_model_msg_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, access.o(i.bt_mesh_model_msg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bt_mesh_model_msg_init &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_be16
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_status_t
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_publish
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_get
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_get
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_last_get
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_get
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_publish
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_get
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_publish
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_get
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_get
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_publish
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_get
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_HSL_status
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_publish
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_get
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_get
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_move_publish
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_move_get
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_get
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_publish
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_get
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_app_key_add
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_start
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_publish
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_publish
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_publish
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_publish
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_publish
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_publish
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vnd_get
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get_vnd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout_get
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_sub_send_status
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pub_send_status
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_comp_data_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ttl_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ttl_get
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_mod_app_status
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_update
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_del
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_add
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_health_period_status
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_attention_status
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_get_registered
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_get_current
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_key_status
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_sub_status
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_pub_status
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_krp_status
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gatt_proxy_status
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_status
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_get
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_transmit_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_transmit_get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_get
</UL>

<P><STRONG><a name="[15d]"></a>bt_mesh_model_pub_period_get</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, access.o(i.bt_mesh_model_pub_period_get))
<BR><BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_period
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_publish
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mod_pub_set
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commit_mod
</UL>

<P><STRONG><a name="[2c2]"></a>bt_mesh_model_publish</STRONG> (Thumb, 326 bytes, Stack size 72 bytes, access.o(i.bt_mesh_model_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_transmit_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_find
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_send
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_elem
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_publish
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_publish
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_publish
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_publish
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_publish
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_move_publish
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_publish
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_publish
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_publish
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_publish
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_publish
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_publish
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_publish
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_publish
</UL>

<P><STRONG><a name="[2c5]"></a>bt_mesh_model_recv</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, access.o(i.bt_mesh_model_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bt_mesh_model_recv &rArr; get_opcode &rArr; net_buf_simple_pull_be16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_fixed_group_match
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_opcode
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_op
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdu_recv
</UL>

<P><STRONG><a name="[18e]"></a>bt_mesh_model_send</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, access.o(i.bt_mesh_model_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_transmit_get
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_send
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_elem
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_status_t
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_get
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_get
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_last_get
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_get
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_get
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_get
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_get
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_get
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_HSL_status
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_get
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_get
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_move_get
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_get
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_get
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_app_key_add
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vnd_get
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get_vnd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_unbind
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_get
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout_get
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_sub_send_status
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pub_send_status
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_comp_data_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ttl_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ttl_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_update
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_del
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_add
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_health_period_status
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_attention_status
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_test
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_get
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_clear
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_key_status
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_sub_status
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_pub_status
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_krp_status
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gatt_proxy_status
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_status
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_get
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_transmit_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_transmit_get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_get
</UL>

<P><STRONG><a name="[23f]"></a>bt_mesh_net_beacon_update</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, net.o(i.bt_mesh_net_beacon_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_flags
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_auth
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_enable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_add
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krp_set
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_iv_update
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_recv
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_create
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subnet_init
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_update
</UL>

<P><STRONG><a name="[2c8]"></a>bt_mesh_net_create</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, net.o(i.bt_mesh_net_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = bt_mesh_net_create &rArr; bt_mesh_net_keys_create &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_beacon_update
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_keys_create
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_provision
</UL>

<P><STRONG><a name="[2ca]"></a>bt_mesh_net_decode</STRONG> (Thumb, 548 bytes, Stack size 40 bytes, net.o(i.bt_mesh_net_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = bt_mesh_net_decode &rArr; net_find_and_decrypt &rArr; friend_decrypt &rArr; net_decrypt &rArr; bt_mesh_net_decrypt &rArr; bt_mesh_ccm_decrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_be32
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_be16
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_find_and_decrypt
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_recv
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg
</UL>

<P><STRONG><a name="[2ce]"></a>bt_mesh_net_decrypt</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, crypto.o(i.bt_mesh_net_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = bt_mesh_net_decrypt &rArr; bt_mesh_ccm_decrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ccm_decrypt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_proxy_nonce
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_nonce
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_resend
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decrypt
</UL>

<P><STRONG><a name="[2d1]"></a>bt_mesh_net_encode</STRONG> (Thumb, 364 bytes, Stack size 64 bytes, net.o(i.bt_mesh_net_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = bt_mesh_net_encode &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_push_u8
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_push_be16
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_push
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_obfuscate
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encrypt
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_get
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_next_seq
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_trailingspace
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_filter_status
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_send
</UL>

<P><STRONG><a name="[2d8]"></a>bt_mesh_net_encrypt</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, crypto.o(i.bt_mesh_net_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ccm_encrypt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_proxy_nonce
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_nonce
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encode
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_friend_pdu
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_resend
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_relay
</UL>

<P><STRONG><a name="[23e]"></a>bt_mesh_net_flags</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net.o(i.bt_mesh_net_flags))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_beacon_update
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_create
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_update
</UL>

<P><STRONG><a name="[297]"></a>bt_mesh_net_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, net.o(i.bt_mesh_net_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_mesh_net_init &rArr; k_delayed_work_init &rArr; ble_npl_callout_init &rArr; npl_freertos_callout_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_init
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_init
</UL>

<P><STRONG><a name="[2b2]"></a>bt_mesh_net_iv_update</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, net.o(i.bt_mesh_net_iv_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_beacon_update
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_iv
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_rpl_reset
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_tx_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_recv
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_resend
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ivu_refresh
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_update
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_tx_reset
</UL>

<P><STRONG><a name="[2c9]"></a>bt_mesh_net_keys_create</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, net.o(i.bt_mesh_net_keys_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = bt_mesh_net_keys_create &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k3
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k2
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_id128
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_add
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_create
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subnet_init
</UL>

<P><STRONG><a name="[27]"></a>bt_mesh_net_local</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, net.o(i.bt_mesh_net_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = bt_mesh_net_local &rArr; bt_mesh_net_recv &rArr; bt_mesh_trans_recv &rArr; trans_seg &rArr; ctl_recv &rArr; bt_mesh_friend_req &rArr; friend_cred_create &rArr; friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_recv
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_get
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net.o(i.bt_mesh_net_init)
</UL>
<P><STRONG><a name="[2d9]"></a>bt_mesh_net_obfuscate</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, crypto.o(i.bt_mesh_net_obfuscate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_mesh_net_obfuscate &rArr; bt_encrypt_be &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_be32
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_encrypt_be
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encode
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_friend_pdu
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_resend
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decrypt
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_relay
</UL>

<P><STRONG><a name="[2de]"></a>bt_mesh_net_recv</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, net.o(i.bt_mesh_net_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = bt_mesh_net_recv &rArr; bt_mesh_trans_recv &rArr; trans_seg &rArr; ctl_recv &rArr; bt_mesh_friend_req &rArr; friend_cred_create &rArr; friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_is_provisioned
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_fixed_group_match
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_decode
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_addr_add
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_recv
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_relay
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_cb
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_complete_pdu
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_local
</UL>

<P><STRONG><a name="[2e4]"></a>bt_mesh_net_resend</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, net.o(i.bt_mesh_net_resend))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = bt_mesh_net_resend &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_sec_update
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_iv_update
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_ivu_initiator
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_send
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_obfuscate
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encrypt
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_decrypt
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_next_seq
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_tx_send_unacked
</UL>

<P><STRONG><a name="[2a2]"></a>bt_mesh_net_revoke_keys</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, net.o(i.bt_mesh_net_revoke_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_mesh_net_revoke_keys &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krp_set
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_kr_update
</UL>

<P><STRONG><a name="[2e5]"></a>bt_mesh_net_sec_update</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, net.o(i.bt_mesh_net_sec_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bt_mesh_net_sec_update &rArr; bt_mesh_proxy_beacon_send &rArr;  bt_mesh_proxy_beacon_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_beacon_send
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_gatt_proxy_get
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_sec_update
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_recv
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_resend
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_tx_reset
</UL>

<P><STRONG><a name="[268]"></a>bt_mesh_net_send</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, net.o(i.bt_mesh_net_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = bt_mesh_net_send &rArr; bt_mesh_net_encode &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_fixed_group_match
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_submit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_ref
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_send
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_put
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_default_ttl_get
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encode
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_relay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_trailingspace
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ctl_send
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unseg
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_seg
</UL>

<P><STRONG><a name="[2e8]"></a>bt_mesh_net_start</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, net.o(i.bt_mesh_net_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = bt_mesh_net_start &rArr; bt_mesh_lpn_init &rArr; send_friend_req &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_enable
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_disable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_primary_addr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_get
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_update
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_gatt_proxy_get
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_complete
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_gatt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_init
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_provision
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_commit
</UL>

<P><STRONG><a name="[271]"></a>bt_mesh_net_transmit_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cfg_srv.o(i.bt_mesh_net_transmit_get))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_start
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_retransmit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_send
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_transmit_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_transmit_get
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_clear
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_relay
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
</UL>

<P><STRONG><a name="[2d5]"></a>bt_mesh_next_seq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, net.o(i.bt_mesh_next_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bt_mesh_next_seq &rArr; bt_mesh_store_seq &rArr; schedule_store &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encode
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_lpn_enqueue_tx
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_friend_ctl
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_resend
</UL>

<P><STRONG><a name="[2ec]"></a>bt_mesh_node_alloc</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, nodes.o(i.bt_mesh_node_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_mesh_node_alloc &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_free
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_capabilities
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set
</UL>

<P><STRONG><a name="[2ee]"></a>bt_mesh_node_del</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nodes.o(i.bt_mesh_node_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bt_mesh_node_del &rArr; bt_mesh_clear_node &rArr; clear_node &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_node
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set
</UL>

<P><STRONG><a name="[23c]"></a>bt_mesh_node_find</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, nodes.o(i.bt_mesh_node_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bt_mesh_node_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_start
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_nodes
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_get
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdu_recv
</UL>

<P><STRONG><a name="[29d]"></a>bt_mesh_node_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nodes.o(i.bt_mesh_node_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_mesh_node_init
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_init
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
</UL>

<P><STRONG><a name="[1db]"></a>bt_mesh_node_res_avail</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nodes.o(i.bt_mesh_node_res_avail))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_prov_link_establish
</UL>

<P><STRONG><a name="[2ef]"></a>bt_mesh_pb_adv_recv</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, prov.o(i.bt_mesh_pb_adv_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bt_mesh_pb_adv_recv &rArr; net_buf_simple_pull_be32 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_is_provisioned
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_be32
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_prov_active
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_cb
</UL>

<P><STRONG><a name="[2f2]"></a>bt_mesh_pb_gatt_close</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, prov.o(i.bt_mesh_pb_gatt_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bt_mesh_pb_gatt_close &rArr; bt_mesh_attention &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set_bit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_attention
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_prov_disable
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_disconnected
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_timeout
</UL>

<P><STRONG><a name="[201]"></a>bt_mesh_pb_gatt_open</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, prov.o(i.bt_mesh_pb_gatt_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_mesh_pb_gatt_open &rArr; atomic_test_and_set_bit &rArr; atomic_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_and_set_bit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_proxy_gap_event
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ccc_write
</UL>

<P><STRONG><a name="[2f3]"></a>bt_mesh_pb_gatt_recv</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, prov.o(i.bt_mesh_pb_gatt_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bt_mesh_pb_gatt_recv &rArr; prov_send_fail_msg &rArr; prov_send &rArr; prov_send_adv &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_fail_msg
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_complete_pdu
</UL>

<P><STRONG><a name="[17a]"></a>bt_mesh_primary_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, access.o(i.bt_mesh_primary_addr))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_sub_set
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_start
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_filter_status
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_id_adv
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_update
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_req
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_poll
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_clear
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_friend_ctl
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_net
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_set
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_clear_cfm
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_free
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
</UL>

<P><STRONG><a name="[2ea]"></a>bt_mesh_prov_complete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, prov.o(i.bt_mesh_prov_complete))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_start
</UL>

<P><STRONG><a name="[2f5]"></a>bt_mesh_prov_conf</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, crypto.o(i.bt_mesh_prov_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = bt_mesh_prov_conf &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_aes_cmac
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_confirm
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_random
</UL>

<P><STRONG><a name="[2f6]"></a>bt_mesh_prov_conf_key</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, crypto.o(i.bt_mesh_prov_conf_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = bt_mesh_prov_conf_key &rArr; bt_mesh_k1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k1
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_confirm
</UL>

<P><STRONG><a name="[2f7]"></a>bt_mesh_prov_conf_salt</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, crypto.o(i.bt_mesh_prov_conf_salt))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = bt_mesh_prov_conf_salt &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_aes_cmac_one
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_confirm
</UL>

<P><STRONG><a name="[2f8]"></a>bt_mesh_prov_decrypt</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, crypto.o(i.bt_mesh_prov_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bt_mesh_prov_decrypt &rArr; bt_mesh_ccm_decrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ccm_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
</UL>

<P><STRONG><a name="[2f9]"></a>bt_mesh_prov_enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mesh.o(i.bt_mesh_prov_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bt_mesh_prov_enable &rArr; bt_mesh_scan_enable &rArr; ble_gap_ext_disc &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_is_provisioned
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_update
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_prov_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_reset
</UL>

<P><STRONG><a name="[2fb]"></a>bt_mesh_prov_encrypt</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, crypto.o(i.bt_mesh_prov_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bt_mesh_prov_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ccm_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
</UL>

<P><STRONG><a name="[198]"></a>bt_mesh_prov_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, prov.o(i.bt_mesh_prov_get))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprovisioned_beacon_send
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_adv_create
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_prov_adv_create
</UL>

<P><STRONG><a name="[299]"></a>bt_mesh_prov_init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, prov.o(i.bt_mesh_prov_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 932<LI>Call Chain = bt_mesh_prov_init &rArr; bt_pub_key_gen &rArr; ble_sm_alg_gen_key_pair &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pub_key_gen
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_con_state
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_init
</UL>

<P><STRONG><a name="[44b]"></a>bt_mesh_prov_node_added</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, prov.o(i.bt_mesh_prov_node_added))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_complete
</UL>

<P><STRONG><a name="[31c]"></a>bt_mesh_prov_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, prov.o(i.bt_mesh_prov_reset))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
</UL>

<P><STRONG><a name="[300]"></a>bt_mesh_provision</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, mesh.o(i.bt_mesh_provision))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = bt_mesh_provision &rArr; bt_mesh_net_create &rArr; bt_mesh_net_keys_create &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_remove
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_comp_provision
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_net
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_iv
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_prov_enable
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_prov_disable
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_start
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_create
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_subnet
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
</UL>

<P><STRONG><a name="[2df]"></a>bt_mesh_proxy_addr_add</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, proxy.o(i.bt_mesh_proxy_addr_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bt_mesh_proxy_addr_add &rArr; filter_remove &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_remove
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_recv
</UL>

<P><STRONG><a name="[308]"></a>bt_mesh_proxy_adv_start</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, proxy.o(i.bt_mesh_proxy_adv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = bt_mesh_proxy_adv_start &rArr; gatt_proxy_advertise &rArr; node_id_adv &rArr; bt_le_adv_start &rArr; ble_adv_conf_adv_instance &rArr; ble_gap_ext_adv_configure &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_is_provisioned
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_start
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_sub
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_advertise
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_prov_adv_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_start_advertising
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_service_adv_sent
</UL>

<P><STRONG><a name="[2e6]"></a>bt_mesh_proxy_beacon_send</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, proxy.o(i.bt_mesh_proxy_beacon_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = bt_mesh_proxy_beacon_send &rArr;  bt_mesh_proxy_beacon_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_beacon_send
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_add
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_beacon_send
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_sec_update
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_send
</UL>

<P><STRONG><a name="[30c]"></a>bt_mesh_proxy_gatt_disable</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, proxy.o(i.bt_mesh_proxy_gatt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_mesh_proxy_gatt_disable &rArr; bt_mesh_proxy_gatt_disconnect &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_svc
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_svc_set_visibility
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_gatt_disconnect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
</UL>

<P><STRONG><a name="[30d]"></a>bt_mesh_proxy_gatt_disconnect</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, proxy.o(i.bt_mesh_proxy_gatt_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_mesh_proxy_gatt_disconnect &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_terminate
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_set
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_gatt_disable
</UL>

<P><STRONG><a name="[2e9]"></a>bt_mesh_proxy_gatt_enable</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, proxy.o(i.bt_mesh_proxy_gatt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_mesh_proxy_gatt_enable &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_svc
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_svc_set_visibility
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_start
</UL>

<P><STRONG><a name="[311]"></a>bt_mesh_proxy_identity_enable</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, proxy.o(i.bt_mesh_proxy_identity_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bt_mesh_proxy_identity_enable &rArr; bt_mesh_is_provisioned &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_is_provisioned
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_update
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_identity_start
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
</UL>

<P><STRONG><a name="[312]"></a>bt_mesh_proxy_identity_start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, proxy.o(i.bt_mesh_proxy_identity_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_mesh_proxy_identity_start &rArr; k_uptime_get_32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get_32
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_set
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_identity_enable
</UL>

<P><STRONG><a name="[393]"></a>bt_mesh_proxy_identity_stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, proxy.o(i.bt_mesh_proxy_identity_stop))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_set
</UL>

<P><STRONG><a name="[29a]"></a>bt_mesh_proxy_init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, proxy.o(i.bt_mesh_proxy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_mesh_proxy_init &rArr; NET_BUF_SIMPLE &rArr; os_msys_get &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_init
</UL>

<P><STRONG><a name="[302]"></a>bt_mesh_proxy_prov_disable</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, proxy.o(i.bt_mesh_proxy_prov_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bt_mesh_proxy_prov_disable &rArr; bt_mesh_pb_gatt_close &rArr; bt_mesh_attention &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_svc
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_svc_set_visibility
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_gatt_close
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_provision
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_commit
</UL>

<P><STRONG><a name="[2fa]"></a>bt_mesh_proxy_prov_enable</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, proxy.o(i.bt_mesh_proxy_prov_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_mesh_proxy_prov_enable &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_find_svc
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_svc_set_visibility
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_enable
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_provision
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
</UL>

<P><STRONG><a name="[2e3]"></a>bt_mesh_proxy_relay</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, proxy.o(i.bt_mesh_proxy_relay))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bt_mesh_proxy_relay &rArr; bt_mesh_proxy_send &rArr; proxy_segment_and_send &rArr; net_buf_simple_pull &rArr; os_mbuf_adj &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_filter_match
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_send
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_send
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_relay
</UL>

<P><STRONG><a name="[314]"></a>bt_mesh_proxy_send</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, proxy.o(i.bt_mesh_proxy_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bt_mesh_proxy_send &rArr; proxy_segment_and_send &rArr; net_buf_simple_pull &rArr; os_mbuf_adj &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_client
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_segment_and_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_relay
</UL>

<P><STRONG><a name="[26f]"></a>bt_mesh_relay_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cfg_srv.o(i.bt_mesh_relay_get))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_fixed_group_match
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_send
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_get
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_relay
</UL>

<P><STRONG><a name="[2e2]"></a>bt_mesh_relay_retransmit_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cfg_srv.o(i.bt_mesh_relay_retransmit_get))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_get
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_relay
</UL>

<P><STRONG><a name="[316]"></a>bt_mesh_reset</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, mesh.o(i.bt_mesh_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = bt_mesh_reset &rArr; bt_mesh_tx_reset &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_remove_all
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_commit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_put
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmds_put
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_enable
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_disable
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_restart
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_comp_unprovision
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_disable
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_link
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_tx_reset
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_rx_reset
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_prov_enable
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_gatt_disable
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_reset
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_disable
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_net
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_status_reset
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear_net_idx
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_reset_after
</UL>

<P><STRONG><a name="[2dc]"></a>bt_mesh_rpl_reset</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, net.o(i.bt_mesh_rpl_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bt_mesh_rpl_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_iv_update
</UL>

<P><STRONG><a name="[31a]"></a>bt_mesh_rx_reset</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, transport.o(i.bt_mesh_rx_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bt_mesh_rx_reset &rArr; seg_rx_reset &rArr; bt_mesh_friend_clear_incomplete &rArr; net_buf_unref &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_rx_reset
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_rpl
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_friendship
</UL>

<P><STRONG><a name="[1e0]"></a>bt_mesh_scan_disable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adv.o(i.bt_mesh_scan_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bt_mesh_scan_disable &rArr; ble_gap_disc_cancel &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_prov_link_establish
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_recv
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_whitelist_remove
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_retransmit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_open
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_response_received
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_init
</UL>

<P><STRONG><a name="[1e2]"></a>bt_mesh_scan_enable</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, adv.o(i.bt_mesh_scan_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bt_mesh_scan_enable &rArr; ble_gap_ext_disc &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_disc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_enable
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_prov_link_establish
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_recv
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_start
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_whitelist_remove
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_retransmit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_open
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_clear_sent
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_init
</UL>

<P><STRONG><a name="[252]"></a>bt_mesh_set_hb_sub_dst</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, transport.o(i.bt_mesh_set_hb_sub_dst))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_sub_set
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_reset
</UL>

<P><STRONG><a name="[29c]"></a>bt_mesh_settings_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, settings.o(i.bt_mesh_settings_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bt_mesh_settings_init &rArr; k_delayed_work_init &rArr; ble_npl_callout_init &rArr; npl_freertos_callout_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_register
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_init
</UL>

<P><STRONG><a name="[197]"></a>bt_mesh_store_app_key</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, settings.o(i.bt_mesh_store_app_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = bt_mesh_store_app_key &rArr; store_app_key &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_app_key
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_update_find
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
</UL>

<P><STRONG><a name="[1d2]"></a>bt_mesh_store_cfg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, settings.o(i.bt_mesh_store_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_mesh_store_cfg &rArr; schedule_store &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ttl_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_set
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_transmit_set
</UL>

<P><STRONG><a name="[323]"></a>bt_mesh_store_hb_pub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, settings.o(i.bt_mesh_store_hb_pub))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_mesh_store_hb_pub &rArr; schedule_store &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_pub_set
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_del
</UL>

<P><STRONG><a name="[2dd]"></a>bt_mesh_store_iv</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, settings.o(i.bt_mesh_store_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bt_mesh_store_iv &rArr; schedule_store &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_iv_update
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_provision
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ivu_refresh
</UL>

<P><STRONG><a name="[324]"></a>bt_mesh_store_mod_bind</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, settings.o(i.bt_mesh_store_mod_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_mesh_store_mod_bind &rArr; schedule_store &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_unbind
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_bind
</UL>

<P><STRONG><a name="[161]"></a>bt_mesh_store_mod_pub</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, settings.o(i.bt_mesh_store_mod_pub))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_mesh_store_mod_pub &rArr; schedule_store &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mod_pub_set
</UL>

<P><STRONG><a name="[325]"></a>bt_mesh_store_mod_sub</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, settings.o(i.bt_mesh_store_mod_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_mesh_store_mod_sub &rArr; schedule_store &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_overwrite
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_del
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_add
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_overwrite
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_del_all
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_del
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_add
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_reset
</UL>

<P><STRONG><a name="[304]"></a>bt_mesh_store_net</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, settings.o(i.bt_mesh_store_net))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_mesh_store_net &rArr; schedule_store &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_provision
</UL>

<P><STRONG><a name="[326]"></a>bt_mesh_store_node</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, settings.o(i.bt_mesh_store_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = bt_mesh_store_node &rArr; store_node &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_node
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_update_find
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_complete
</UL>

<P><STRONG><a name="[2eb]"></a>bt_mesh_store_seq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, settings.o(i.bt_mesh_store_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bt_mesh_store_seq &rArr; schedule_store &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_next_seq
</UL>

<P><STRONG><a name="[305]"></a>bt_mesh_store_subnet</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, settings.o(i.bt_mesh_store_subnet))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = bt_mesh_store_subnet &rArr; store_net_key &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_net_key
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_update_find
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_add
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_provision
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
</UL>

<P><STRONG><a name="[253]"></a>bt_mesh_subnet_del</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, cfg_srv.o(i.bt_mesh_subnet_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = bt_mesh_subnet_del &rArr; bt_mesh_app_key_del &rArr; bt_mesh_clear_app_key &rArr; clear_app_key &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pub_disable
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_hb_pub
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear_net_idx
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_subnet
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_del
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_reset
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_del
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_set
</UL>

<P><STRONG><a name="[32a]"></a>bt_mesh_subnet_find</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, net.o(i.bt_mesh_subnet_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = bt_mesh_subnet_find &rArr; auth_match &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_match
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_recv
</UL>

<P><STRONG><a name="[190]"></a>bt_mesh_subnet_get</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, net.o(i.bt_mesh_subnet_get))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_start
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_retransmit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_add
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krp_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krp_get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_pub_set
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_send
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_publish
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_set
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_del
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_recv
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_get
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_del
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_update
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_friend_pdu
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_keys
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
</UL>

<P><STRONG><a name="[298]"></a>bt_mesh_trans_init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, transport.o(i.bt_mesh_trans_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bt_mesh_trans_init &rArr; NET_BUF_SIMPLE &rArr; os_msys_get &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_add_arg
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_init
</UL>

<P><STRONG><a name="[2e0]"></a>bt_mesh_trans_recv</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, transport.o(i.bt_mesh_trans_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = bt_mesh_trans_recv &rArr; trans_seg &rArr; ctl_recv &rArr; bt_mesh_friend_req &rArr; friend_cred_create &rArr; friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_match
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_enqueue_rx
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_msg_received
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_unseg
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_save
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_restore
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_waiting_update
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_established
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_recv
</UL>

<P><STRONG><a name="[331]"></a>bt_mesh_trans_send</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, transport.o(i.bt_mesh_trans_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_encrypt
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_label_uuid_get
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_get
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unseg
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_seg
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_trailingspace
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_retransmit
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_send
</UL>

<P><STRONG><a name="[2db]"></a>bt_mesh_tx_in_progress</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, transport.o(i.bt_mesh_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_iv_update
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_timeout
</UL>

<P><STRONG><a name="[31b]"></a>bt_mesh_tx_reset</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, transport.o(i.bt_mesh_tx_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = bt_mesh_tx_reset &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_tx_reset
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
</UL>

<P><STRONG><a name="[336]"></a>bt_mesh_virtual_addr</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, crypto.o(i.bt_mesh_virtual_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = bt_mesh_virtual_addr &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_be16
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_s1
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_aes_cmac_one
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;va_add
</UL>

<P><STRONG><a name="[1ca]"></a>bt_prov_active</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, prov.o(i.bt_prov_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bt_prov_active &rArr; atomic_test_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_adv_recv
</UL>

<P><STRONG><a name="[2fc]"></a>bt_pub_key_gen</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, glue.o(i.bt_pub_key_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = bt_pub_key_gen &rArr; ble_sm_alg_gen_key_pair &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_key_pair
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_init
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubkey_reproduce
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_failed
</UL>

<P><STRONG><a name="[3a7]"></a>bt_pub_key_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, glue.o(i.bt_pub_key_get))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_link
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pub_key
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_send_pub_key
</UL>

<P><STRONG><a name="[337]"></a>bt_rand</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, glue.o(i.bt_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bt_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_id_adv
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_confirm
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth
</UL>

<P><STRONG><a name="[339]"></a>btstack_memory_dtbt_msg_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mesh_queue.o(i.btstack_memory_dtbt_msg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = btstack_memory_dtbt_msg_free &rArr; mesh_memory_pool_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_memory_pool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
</UL>

<P><STRONG><a name="[13e]"></a>btstack_memory_dtbt_msg_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mesh_queue.o(i.btstack_memory_dtbt_msg_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btstack_memory_dtbt_msg_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_memory_pool_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_trigger
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host2Mesh_msg_send
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
</UL>

<P><STRONG><a name="[33c]"></a>btstack_memory_dtbt_pool_flush</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mesh_queue.o(i.btstack_memory_dtbt_pool_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btstack_memory_dtbt_pool_flush &rArr; mesh_memory_pool_create &rArr; mesh_memory_pool_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_memory_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[33e]"></a>btstack_memory_dtbt_small_msg_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mesh_queue.o(i.btstack_memory_dtbt_small_msg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = btstack_memory_dtbt_small_msg_free &rArr; mesh_memory_pool_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_memory_pool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[33f]"></a>btstack_memory_dtbt_small_msg_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mesh_queue.o(i.btstack_memory_dtbt_small_msg_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btstack_memory_dtbt_small_msg_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_memory_pool_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmds_put
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_aes
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ccm
</UL>

<P><STRONG><a name="[340]"></a>calculate_lightness_target_values</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, state_binding.o(i.calculate_lightness_target_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = calculate_lightness_target_values &rArr; linear_to_actual &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_actual
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actual_to_linear
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_to_level
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_target_lightness
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_tt_values
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_tt_values
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_tt_values
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_tt_values
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_tt_values
</UL>

<P><STRONG><a name="[344]"></a>calculate_rt</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, transition.o(i.calculate_rt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = calculate_rt &rArr; k_uptime_get
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_get
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_get
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_get
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_publish
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_publish
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_publish
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_publish
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_publish
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_publish
</UL>

<P><STRONG><a name="[345]"></a>calculate_temp_target_values</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, state_binding.o(i.calculate_temp_target_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = calculate_temp_target_values &rArr; light_ctl_temp_to_level &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_to_level
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_to_light_ctl_temp
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_tt_values
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_tt_values
</UL>

<P><STRONG><a name="[11]"></a>cb_putc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(i.cb_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.app_main)
</UL>
<P><STRONG><a name="[19c]"></a>chip_peripherals_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, chip_peripherals.o(i.chip_peripherals_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = chip_peripherals_init &rArr; peripherals_setup &rArr; peripherals_config_uart_user &rArr; peripherals_config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_rf_clk_source
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_irq_callback
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[356]"></a>conf_dst_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, config_store.o(i.conf_dst_register))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_fcb_dst
</UL>

<P><STRONG><a name="[355]"></a>conf_fcb_dst</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, config_fcb.o(i.conf_fcb_dst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = conf_fcb_dst
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_dst_register
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_sys_init
</UL>

<P><STRONG><a name="[35c]"></a>conf_fcb_src</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, config_fcb.o(i.conf_fcb_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = conf_fcb_src &rArr; conf_src_register
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_src_register
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_sys_init
</UL>

<P><STRONG><a name="[35e]"></a>conf_line_parse</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, config_line.o(i.conf_line_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = conf_line_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;visit_mesh
</UL>

<P><STRONG><a name="[35f]"></a>conf_load_new</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, settings.o(i.conf_load_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = conf_load_new &rArr; mesh_commit &rArr; subnet_init &rArr; bt_mesh_net_keys_create &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_visit
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
</UL>

<P><STRONG><a name="[254]"></a>conf_mesh_role</STRONG> (Thumb, 134 bytes, Stack size 28 bytes, cfg_srv.o(i.conf_mesh_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = conf_mesh_role
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_srv_init
</UL>

<P><STRONG><a name="[361]"></a>conf_parse_and_lookup_new</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, settings.o(i.conf_parse_and_lookup_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = conf_parse_and_lookup_new &rArr; conf_parse_name &rArr; strtok_r &rArr; strsep &rArr; strpbrk
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_parse_name
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_set_value_new
</UL>

<P><STRONG><a name="[362]"></a>conf_parse_name</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, config.o(i.conf_parse_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = conf_parse_name &rArr; strtok_r &rArr; strsep &rArr; strpbrk
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_parse_and_lookup_new
</UL>

<P><STRONG><a name="[321]"></a>conf_register</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, config.o(i.conf_register))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_settings_init
</UL>

<P><STRONG><a name="[364]"></a>conf_set_value_new</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, config.o(i.conf_set_value_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = conf_set_value_new &rArr; conf_parse_and_lookup_new &rArr; conf_parse_name &rArr; strtok_r &rArr; strsep &rArr; strpbrk
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_parse_and_lookup_new
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;visit_mesh
</UL>

<P><STRONG><a name="[35d]"></a>conf_src_register</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, config_store.o(i.conf_src_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = conf_src_register
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_fcb_src
</UL>

<P><STRONG><a name="[2bd]"></a>console_printf</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, mesh_srv.o(i.console_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = console_printf &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_status_changed
</UL>

<P><STRONG><a name="[369]"></a>create_mesh_task</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mesh_queue.o(i.create_mesh_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = create_mesh_task
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[36]"></a>db_mesh_write_to_flash</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_mesh_flash_oper.o(i.db_mesh_write_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = db_mesh_write_to_flash &rArr; program_flash &rArr; program_flash0 &rArr; EflashProgram &rArr; Delay10US
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_mesh_flash_oper.o(i.fast_switch_monitor_init)
</UL>
<P><STRONG><a name="[480]"></a>delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, chip_peripherals.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlc59731_write
</UL>

<P><STRONG><a name="[fb]"></a>double_jacobian_default</STRONG> (Thumb, 340 bytes, Stack size 96 bytes, ecc.o(i.double_jacobian_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = double_jacobian_default &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_sm_alg.o(.constdata)
<LI> ecc.o(.constdata)
</UL>
<P><STRONG><a name="[37b]"></a>fast_switch_monitor</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ble_mesh_flash_oper.o(i.fast_switch_monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fast_switch_monitor &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_commit
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_fac_conf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_put
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_get
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_switch_monitor_init
</UL>

<P><STRONG><a name="[19d]"></a>fast_switch_monitor_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_mesh_flash_oper.o(i.fast_switch_monitor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fast_switch_monitor_init &rArr; fast_switch_monitor &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_switch_monitor
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[380]"></a>filtermeshADV</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, adv.o(i.filtermeshADV))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = filtermeshADV &rArr; ad_data_filter_mesh_msg &rArr; ad_iterator_next
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_data_filter_mesh_msg
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_handle_mesh_ext_advreport
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_handle_mesh_advreport
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[359]"></a>flash_write</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, info2ram.o(i.flash_write))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_fcb_save
</UL>

<P><STRONG><a name="[35a]"></a>flash_write_mark</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, info2ram.o(i.flash_write_mark))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_fcb_save
</UL>

<P><STRONG><a name="[e]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; cb_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[2ab]"></a>friend_cred_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net.o(i.friend_cred_clear))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_del
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_create
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_offer
</UL>

<P><STRONG><a name="[288]"></a>friend_cred_create</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, net.o(i.friend_cred_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = friend_cred_create &rArr; friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_set
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_req
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_offer
</UL>

<P><STRONG><a name="[351]"></a>friend_cred_del</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, net.o(i.friend_cred_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = friend_cred_del
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_friendship
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_clear
</UL>

<P><STRONG><a name="[2d7]"></a>friend_cred_get</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, net.o(i.friend_cred_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = friend_cred_get &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encode
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_friend_pdu
</UL>

<P><STRONG><a name="[2a3]"></a>friend_cred_refresh</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, net.o(i.friend_cred_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = friend_cred_refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krp_set
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_kr_update
</UL>

<P><STRONG><a name="[385]"></a>friend_cred_set</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, net.o(i.friend_cred_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_primary_addr
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_be16
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_update
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_create
</UL>

<P><STRONG><a name="[386]"></a>friend_cred_update</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, net.o(i.friend_cred_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = friend_cred_update &rArr; friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_set
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
</UL>

<P><STRONG><a name="[38d]"></a>gap_beacon_disable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mesh_srv.o(i.gap_beacon_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gap_beacon_disable &rArr; Host2Mesh_msg_send &rArr; btstack_memory_dtbt_msg_get
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_mesh_task
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_disable
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host2Mesh_msg_send
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vnd_set
</UL>

<P><STRONG><a name="[2fd]"></a>gatt_con_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, proxy.o(i.gatt_con_state))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_init
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_confirm
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_random
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_pub_key
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirm
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_timeout
</UL>

<P><STRONG><a name="[398]"></a>gen_level_publish</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, device_composition.o(i.gen_level_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = gen_level_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rt
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set_unack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set_unack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set
</UL>

<P><STRONG><a name="[39d]"></a>gen_onoff_publish</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, device_composition.o(i.gen_onoff_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = gen_onoff_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rt
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_set_unack
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_set
</UL>

<P><STRONG><a name="[221]"></a>get_aes_result</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mesh_queue.o(i.get_aes_result))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_update
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_setup
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_final
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_encrypt_be
</UL>

<P><STRONG><a name="[2cd]"></a>get_be16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, endian.o(i.get_be16))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_be16
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_virtual_addr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_capabilities
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_decode
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decrypt
</UL>

<P><STRONG><a name="[2cb]"></a>get_be32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, endian.o(i.get_be32))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_be32
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_decode
</UL>

<P><STRONG><a name="[249]"></a>get_ccm_result</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mesh_queue.o(i.get_ccm_result))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ccm_encrypt
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ccm_decrypt
</UL>

<P><STRONG><a name="[415]"></a>get_comp_of_node</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_composition.o(i.get_comp_of_node))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_init
</UL>

<P><STRONG><a name="[2bb]"></a>get_element_of_node</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_composition.o(i.get_element_of_node))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_status_changed
</UL>

<P><STRONG><a name="[35b]"></a>get_flash_write_mark</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, info2ram.o(i.get_flash_write_mark))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_fcb_save
</UL>

<P><STRONG><a name="[375]"></a>get_index_in_elems</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, access.o(i.get_index_in_elems))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_index_in_elems
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mod_path
</UL>

<P><STRONG><a name="[3ca]"></a>get_le16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, endian.o(i.get_le16))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_idx_unpack
</UL>

<P><STRONG><a name="[41c]"></a>get_le32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, endian.o(i.get_le32))
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le32
</UL>

<P><STRONG><a name="[493]"></a>get_model_by_id</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, device_composition.o(i.get_model_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_model_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[1de]"></a>get_provlink_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, prov.o(i.get_provlink_id))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_prov_link_establish
</UL>

<P><STRONG><a name="[47e]"></a>gf_double</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cmac_mode.o(i.gf_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gf_double
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_setup
</UL>

<P><STRONG><a name="[1e1]"></a>hci_cmds_put</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mesh_queue.o(i.hci_cmds_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_raise_assertion
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_small_msg_get
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_restart
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_prov_link_establish
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set_white_list
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_disc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_adv_stop
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_adv_start
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_adv_set_data
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_adv_rsp_set_data
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_adv_configure
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disc_cancel
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_whitelist_remove
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_open
</UL>

<P><STRONG><a name="[3bb]"></a>init_pub</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, device_composition.o(i.init_pub))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_pub &rArr; NET_BUF_SIMPLE &rArr; os_msys_get &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_init
</UL>

<P><STRONG><a name="[3bc]"></a>init_service</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, profile.o(i.init_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = init_service &rArr; ota_init_service &rArr; att_db_util_add_characteristic_uuid128 &rArr; att_db_util_add_attribute_uuid16 &rArr; att_db_util_assert_space
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_init_service
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[37c]"></a>initial_fac_conf</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_mesh_flash_oper.o(i.initial_fac_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initial_fac_conf &rArr; write_control_word2mirror
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_control_word2mirror
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_remove_all
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_commit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_put
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_switch_monitor
</UL>

<P><STRONG><a name="[38e]"></a>is_mesh_task</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mesh_queue.o(i.is_mesh_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_mesh_task
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_beacon_disable
</UL>

<P><STRONG><a name="[405]"></a>is_provisioned_poweron</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, info2ram.o(i.is_provisioned_poweron))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
</UL>

<P><STRONG><a name="[255]"></a>k_delayed_work_add_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, glue.o(i.k_delayed_work_add_arg))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_health_srv_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_srv_init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_init
</UL>

<P><STRONG><a name="[160]"></a>k_delayed_work_cancel</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, glue.o(i.k_delayed_work_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = k_delayed_work_cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_provsioned_complete
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_disable
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_publish
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_pub_set
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pub_disable
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mod_pub_set
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_ivu_initiator
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_link
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_proxy_gap_event
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_attention
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_complete
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_clear_tx
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_response_received
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_friendship
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear_cfm
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_clear
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_relay
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_offer
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_ack
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_tx_reset
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_rx_reset
</UL>

<P><STRONG><a name="[1f8]"></a>k_delayed_work_init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, glue.o(i.k_delayed_work_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = k_delayed_work_init &rArr; ble_npl_callout_init &rArr; npl_freertos_callout_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_get_dflt_eventq
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_init
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_switch_monitor
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_conf_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_unbind_mode_run
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_health_srv_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_srv_init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_settings_init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_init
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_init
</UL>

<P><STRONG><a name="[3c1]"></a>k_delayed_work_remaining_get</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, glue.o(i.k_delayed_work_remaining_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = k_delayed_work_remaining_get &rArr; npl_freertos_callout_remaining_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_remaining_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout_get
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_attention_status
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
</UL>

<P><STRONG><a name="[15f]"></a>k_delayed_work_submit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, glue.o(i.k_delayed_work_submit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_time_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_switch_monitor
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_light_state
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_breath_mode_work
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_unbind_mode_run
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_start_advertising
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_sent
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_publish
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_publish
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mod_pub_set
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_iv_update
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_sent
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_attention
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_reset
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_msg_recv
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_complete
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_service_adv_sent
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;req_sent
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_req_sent
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_clear_sent
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_friendship
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_req
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_recv_delay
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_clear_sent
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_send_end
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_commit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commit_mod
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ivu_refresh
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_relay
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_msg_received
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_sub_cfm
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_sent
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_send_start
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_ack
</UL>

<P><STRONG><a name="[182]"></a>k_sleep</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, glue.o(i.k_sleep))
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_send
</UL>

<P><STRONG><a name="[293]"></a>k_uptime_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, glue.o(i.k_uptime_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = k_uptime_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_set_unack
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_set_unack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_set_unack
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_set
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_set_unack
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_set
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_set_unack
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set_unack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set_unack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set_unack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_work_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_work_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_work_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_work_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_work_handler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_work_handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_work_handler
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vnd_set_unack
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_sub_set
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_sub_send_status
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_heartbeat
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_reliable
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_retransmit
</UL>

<P><STRONG><a name="[1c8]"></a>k_uptime_get_32</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, glue.o(i.k_uptime_get_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = k_uptime_get_32
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_period
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_publish
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_send
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_complete
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_identity_start
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_advertise
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_req
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_timeout
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_ack
</UL>

<P><STRONG><a name="[454]"></a>k_work_add_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, glue.o(i.k_work_add_arg))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ccc_write
</UL>

<P><STRONG><a name="[2da]"></a>k_work_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, glue.o(i.k_work_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = k_work_init &rArr; ble_npl_callout_init &rArr; npl_freertos_callout_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_get_dflt_eventq
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_init
</UL>

<P><STRONG><a name="[240]"></a>k_work_submit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, glue.o(i.k_work_submit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = k_work_submit &rArr; npl_freertos_callout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_enable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_pub_set
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_ivu_initiator
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ccc_write
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_commit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_send
</UL>

<P><STRONG><a name="[3c8]"></a>kb_report_trigger_send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chip_peripherals.o(i.kb_report_trigger_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kb_report_trigger_send
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_state_changed
</UL>

<P><STRONG><a name="[3c9]"></a>kb_state_changed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, chip_peripherals.o(i.kb_state_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = kb_state_changed &rArr; kb_report_trigger_send
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_report_trigger_send
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_gpio_isr
</UL>

<P><STRONG><a name="[204]"></a>le_adv_status_reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, glue.o(i.le_adv_status_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = le_adv_status_reset &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_proxy_gap_event
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
</UL>

<P><STRONG><a name="[381]"></a>le_handle_mesh_advreport</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adv.o(i.le_handle_mesh_advreport))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtermeshADV
</UL>

<P><STRONG><a name="[382]"></a>le_handle_mesh_ext_advreport</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adv.o(i.le_handle_mesh_ext_advreport))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtermeshADV
</UL>

<P><STRONG><a name="[399]"></a>level_lightness_handler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, transition.o(i.level_lightness_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = level_lightness_handler &rArr; npl_freertos_callout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_get_dflt_eventq
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reconf_timer_callback_entry
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_set_arg
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set_unack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set_unack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set_unack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set
</UL>

<P><STRONG><a name="[39a]"></a>level_temp_handler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, transition.o(i.level_temp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = level_temp_handler &rArr; npl_freertos_callout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_get_dflt_eventq
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reconf_timer_callback_entry
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_set_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set_unack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set_unack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set_unack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set
</UL>

<P><STRONG><a name="[397]"></a>level_tt_values</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, transition.o(i.level_tt_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = level_tt_values &rArr; calculate_lightness_target_values &rArr; linear_to_actual &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_values_calculator
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bound_states_transition_type_reassignment
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temp_target_values
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_lightness_target_values
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set_unack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set_unack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set_unack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set
</UL>

<P><STRONG><a name="[3d7]"></a>light_ctl_handler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, transition.o(i.light_ctl_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = light_ctl_handler &rArr; npl_freertos_callout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_get_dflt_eventq
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reconf_timer_callback_entry
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_set_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_set_unack
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_set
</UL>

<P><STRONG><a name="[3d8]"></a>light_ctl_publish</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, device_composition.o(i.light_ctl_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = light_ctl_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rt
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_set_unack
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_set
</UL>

<P><STRONG><a name="[3da]"></a>light_ctl_temp_handler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, transition.o(i.light_ctl_temp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = light_ctl_temp_handler &rArr; npl_freertos_callout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_get_dflt_eventq
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reconf_timer_callback_entry
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_set_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_set_unack
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_set
</UL>

<P><STRONG><a name="[3db]"></a>light_ctl_temp_publish</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, device_composition.o(i.light_ctl_temp_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = light_ctl_temp_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rt
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_set_unack
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_set
</UL>

<P><STRONG><a name="[3de]"></a>light_ctl_temp_tt_values</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, transition.o(i.light_ctl_temp_tt_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = light_ctl_temp_tt_values &rArr; calculate_temp_target_values &rArr; light_ctl_temp_to_level &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_values_calculator
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bound_states_transition_type_reassignment
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temp_target_values
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_set_unack
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_set
</UL>

<P><STRONG><a name="[3d9]"></a>light_ctl_tt_values</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, transition.o(i.light_ctl_tt_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = light_ctl_tt_values &rArr; calculate_lightness_target_values &rArr; linear_to_actual &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_values_calculator
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bound_states_transition_type_reassignment
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_lightness_target_values
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_set_unack
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_set
</UL>

<P><STRONG><a name="[3e0]"></a>light_lightness_actual_handler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, transition.o(i.light_lightness_actual_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = light_lightness_actual_handler &rArr; npl_freertos_callout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_get_dflt_eventq
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reconf_timer_callback_entry
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_set_arg
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_set_unack
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_set
</UL>

<P><STRONG><a name="[3e1]"></a>light_lightness_actual_tt_values</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, transition.o(i.light_lightness_actual_tt_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = light_lightness_actual_tt_values &rArr; calculate_lightness_target_values &rArr; linear_to_actual &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_values_calculator
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bound_states_transition_type_reassignment
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_lightness_target_values
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_set_unack
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_set
</UL>

<P><STRONG><a name="[3e3]"></a>light_lightness_linear_handler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, transition.o(i.light_lightness_linear_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = light_lightness_linear_handler &rArr; npl_freertos_callout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_get_dflt_eventq
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reconf_timer_callback_entry
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_set_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_set_unack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_set
</UL>

<P><STRONG><a name="[3e4]"></a>light_lightness_linear_publish</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, device_composition.o(i.light_lightness_linear_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = light_lightness_linear_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rt
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_set_unack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_set
</UL>

<P><STRONG><a name="[3e5]"></a>light_lightness_linear_tt_values</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, transition.o(i.light_lightness_linear_tt_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = light_lightness_linear_tt_values &rArr; calculate_lightness_target_values &rArr; linear_to_actual &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_values_calculator
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bound_states_transition_type_reassignment
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_lightness_target_values
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_set_unack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_set
</UL>

<P><STRONG><a name="[3e6]"></a>light_lightness_publish</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, device_composition.o(i.light_lightness_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = light_lightness_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rt
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_set_unack
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_set
</UL>

<P><STRONG><a name="[341]"></a>linear_to_actual</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, state_binding.o(i.linear_to_actual))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = linear_to_actual &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_binding
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_lightness_target_values
</UL>

<P><STRONG><a name="[3ec]"></a>mem_init_mbuf_pool</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mem.o(i.mem_init_mbuf_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mem_init_mbuf_pool &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mempool_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_init
</UL>

<P><STRONG><a name="[141]"></a>mesh_adv_thread</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, adv.o(i.mesh_adv_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mesh_adv_thread &rArr; adv_send &rArr; bt_le_adv_start &rArr; ble_adv_conf_adv_instance &rArr; ble_gap_ext_adv_configure &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_send
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_get
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeshQue_recv_done
</UL>

<P><STRONG><a name="[3ee]"></a>mesh_app_start</STRONG> (Thumb, 340 bytes, Stack size 96 bytes, access.o(i.mesh_app_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = mesh_app_start &rArr; bt_mesh_cfg_mod_app_bind_vnd &rArr; mod_app_bind &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_node_find
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_transmit_get
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_mod_app_bind_vnd
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_app_key_add
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_find
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_send
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_elem
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
</UL>

<P><STRONG><a name="[3f0]"></a>mesh_env_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mesh_srv.o(i.mesh_env_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 980<LI>Call Chain = mesh_env_init &rArr; mesh_main &rArr; mesh_init0 &rArr; bt_mesh_init &rArr; bt_mesh_prov_init &rArr; bt_pub_key_gen &rArr; ble_sm_alg_gen_key_pair &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_add_event_handler
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_packet_handler
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_init
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_init
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_platform_setup
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_memory_init
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_feature_set
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_handle_set
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_main
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[3f3]"></a>mesh_feature_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cfg_srv.o(i.mesh_feature_set))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_env_init
</UL>

<P><STRONG><a name="[3f9]"></a>mesh_flash_sys_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, info2ram.o(i.mesh_flash_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mesh_flash_sys_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_get
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_raise_assertion
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_fcb_src
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_fcb_dst
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[3fa]"></a>mesh_init0</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mesh_srv.o(i.mesh_init0))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = mesh_init0 &rArr; bt_mesh_init &rArr; bt_mesh_prov_init &rArr; bt_pub_key_gen &rArr; ble_sm_alg_gen_key_pair &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_main
</UL>

<P><STRONG><a name="[3f8]"></a>mesh_main</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mesh_srv.o(i.mesh_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 972<LI>Call Chain = mesh_main &rArr; mesh_init0 &rArr; bt_mesh_init &rArr; bt_mesh_prov_init &rArr; bt_pub_key_gen &rArr; ble_sm_alg_gen_key_pair &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_init
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_init0
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_env_init
</UL>

<P><STRONG><a name="[3f2]"></a>mesh_memory_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mesh_queue.o(i.mesh_memory_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mesh_memory_init &rArr; mesh_memory_pool_create &rArr; mesh_memory_pool_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_memory_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_env_init
</UL>

<P><STRONG><a name="[33d]"></a>mesh_memory_pool_create</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, mesh_queue.o(i.mesh_memory_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mesh_memory_pool_create &rArr; mesh_memory_pool_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_memory_pool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_memory_init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_pool_flush
</UL>

<P><STRONG><a name="[33a]"></a>mesh_memory_pool_free</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mesh_queue.o(i.mesh_memory_pool_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mesh_memory_pool_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_memory_pool_create
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_small_msg_free
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_msg_free
</UL>

<P><STRONG><a name="[33b]"></a>mesh_memory_pool_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mesh_queue.o(i.mesh_memory_pool_get))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_msg_get
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_small_msg_get
</UL>

<P><STRONG><a name="[3fb]"></a>mesh_platform_config</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, prov.o(i.mesh_platform_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mesh_platform_config &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_platform_setup
</UL>

<P><STRONG><a name="[3f1]"></a>mesh_platform_setup</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ble_mesh_app.o(i.mesh_platform_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mesh_platform_setup &rArr; mesh_platform_config &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_platform_config
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_env_init
</UL>

<P><STRONG><a name="[1bc]"></a>mesh_read_callback</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mesh_srv.o(i.mesh_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mesh_read_callback &rArr; bt_mesh_is_provisioned &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_is_provisioned
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback
</UL>

<P><STRONG><a name="[3fc]"></a>mesh_service_trigger</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, mesh_srv.o(i.mesh_service_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mesh_service_trigger &rArr; Host2Mesh_msg_send &rArr; btstack_memory_dtbt_msg_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_raise_assertion
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_msg_get
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host2Mesh_msg_send
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[465]"></a>mesh_set_dev_name</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, proxy.o(i.mesh_set_dev_name))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[245]"></a>mesh_set_white_list</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, adv.o(i.mesh_set_white_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mesh_set_white_list &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmds_put
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_get_adv_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_recv
</UL>

<P><STRONG><a name="[416]"></a>mesh_setup</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mesh_srv.o(i.mesh_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mesh_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_init
</UL>

<P><STRONG><a name="[31d]"></a>mesh_srv_restart</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mesh_srv.o(i.mesh_srv_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mesh_srv_restart &rArr; mesh_start_advertising &rArr; bt_mesh_proxy_adv_start &rArr; gatt_proxy_advertise &rArr; node_id_adv &rArr; bt_le_adv_start &rArr; ble_adv_conf_adv_instance &rArr; ble_gap_ext_adv_configure &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_start_advertising
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmds_put
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_gatt_config
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
</UL>

<P><STRONG><a name="[3ff]"></a>mesh_start_advertising</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mesh_queue.o(i.mesh_start_advertising))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = mesh_start_advertising &rArr; bt_mesh_proxy_adv_start &rArr; gatt_proxy_advertise &rArr; node_id_adv &rArr; bt_le_adv_start &rArr; ble_adv_conf_adv_instance &rArr; ble_gap_ext_adv_configure &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_is_provisioned
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_adv_start
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_restart
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
</UL>

<P><STRONG><a name="[32]"></a>mesh_task</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, mesh_queue.o(i.mesh_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = mesh_task &rArr; meshque_msg_dispose &rArr; proxy_recv &rArr; proxy_complete_pdu &rArr; bt_mesh_net_recv &rArr; bt_mesh_trans_recv &rArr; trans_seg &rArr; ctl_recv &rArr; bt_mesh_friend_req &rArr; friend_cred_create &rArr; friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_timerque_dispose
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_queue.o(i.create_mesh_task)
</UL>
<P><STRONG><a name="[33]"></a>mesh_thread</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mesh_queue.o(i.mesh_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + In Cycle
<LI>Call Chain = mesh_thread &rArr;  mesh_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeshQue_recv_done
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_queue.o(i.create_mesh_task)
</UL>
<P><STRONG><a name="[402]"></a>mesh_timerque_dispose</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mesh_queue.o(i.mesh_timerque_dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mesh_timerque_dispose &rArr; npl_freertos_eventq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_get_dflt_eventq
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_task
</UL>

<P><STRONG><a name="[1a1]"></a>mesh_trace_config</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mesh_srv.o(i.mesh_trace_config))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1bf]"></a>mesh_write_callback</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, mesh_srv.o(i.mesh_write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mesh_write_callback &rArr; bt_mesh_is_provisioned &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_is_provisioned
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
</UL>

<P><STRONG><a name="[401]"></a>meshque_msg_dispose</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, mesh_queue.o(i.meshque_msg_dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = meshque_msg_dispose &rArr; proxy_recv &rArr; proxy_complete_pdu &rArr; bt_mesh_net_recv &rArr; bt_mesh_trans_recv &rArr; trans_seg &rArr; ctl_recv &rArr; bt_mesh_friend_req &rArr; friend_cred_create &rArr; friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_init
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_provisioned_poweron
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_remove
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_start_advertising
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_is_provisioned
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_gatt_config
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_enable
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_disable
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_con_handle
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_start
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_link
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_node_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_proxy_gap_event
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_adv_param
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_adv_status_reset
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_kv
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_load_new
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_msg_free
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_recv
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_task
</UL>

<P><STRONG><a name="[407]"></a>mod_bind</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, cfg_srv.o(i.mod_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mod_bind &rArr; bt_mesh_store_mod_bind &rArr; schedule_store &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_is_valid
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_mod_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
</UL>

<P><STRONG><a name="[162]"></a>mod_unbind</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, cfg_srv.o(i.mod_unbind))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mod_unbind &rArr; _mod_pub_set &rArr; bt_mesh_store_mod_pub &rArr; schedule_store &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_is_valid
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mod_pub_set
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_mod_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_unbind
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mod_unbind
</UL>

<P><STRONG><a name="[414]"></a>model_info_pub</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, device_composition.o(i.model_info_pub))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_init
</UL>

<P><STRONG><a name="[3f4]"></a>model_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ble_mesh_app.o(i.model_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = model_init &rArr; ble_mesh_light_model_conf_init &rArr; ble_mesh_light_model_default_status_init &rArr; state_binding &rArr; linear_to_actual &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_conf_init
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_info_pub
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_setup
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pub
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_comp_of_node
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_env_init
</UL>

<P><STRONG><a name="[22a]"></a>net_buf_put</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, glue.o(i.net_buf_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_buf_put &rArr; npl_freertos_eventq_put
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_put
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_send
</UL>

<P><STRONG><a name="[229]"></a>net_buf_ref</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, glue.o(i.net_buf_ref))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_send
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_send
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_seg
</UL>

<P><STRONG><a name="[266]"></a>net_buf_reserve</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, glue.o(i.net_buf_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_buf_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ctl_send
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unseg
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_seg
</UL>

<P><STRONG><a name="[235]"></a>net_buf_simple_add</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, glue.o(i.net_buf_simple_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_buf_simple_add &rArr; os_mbuf_extend &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_status_t
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_HSL_status
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pub_send_status
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_mod_app_status
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_get_registered
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_get_current
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encrypt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_encrypt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_decrypt
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_sub_status
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_pub_status
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pub_key
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_confirm
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_send_pub_key
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_sub_cfm
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_offer
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_update
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decrypt
</UL>

<P><STRONG><a name="[2c1]"></a>net_buf_simple_add_be16</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, glue.o(i.net_buf_simple_add_be16))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprovisioned_beacon_send
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_filter_status
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_adv
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_invite
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_friend_pdu
</UL>

<P><STRONG><a name="[1d7]"></a>net_buf_simple_add_be32</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, glue.o(i.net_buf_simple_add_be32))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = net_buf_simple_add_be32 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_prov_link_establish
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_create
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_ctl_send
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_adv
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_ack_send
</UL>

<P><STRONG><a name="[193]"></a>net_buf_simple_add_le16</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, glue.o(i.net_buf_simple_add_le16))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = net_buf_simple_add_le16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_publish
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_get
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_get
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_last_get
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_get
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_publish
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_get
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_publish
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_get
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_get
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_publish
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_get
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_move_publish
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_move_get
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_get
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_app_key_add
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_publish
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_publish
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_publish
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_publish
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_publish
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vnd_get
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get_vnd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout_get
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_idx_pack
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_sub_send_status
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pub_send_status
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_mod_app_status
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_get_page_0
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_add_elem
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_get
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_get_registered
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_key_status
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_sub_status
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_pub_status
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_krp_status
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_get
</UL>

<P><STRONG><a name="[419]"></a>net_buf_simple_add_le32</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, glue.o(i.net_buf_simple_add_le32))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = net_buf_simple_add_le32 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vnd_get
</UL>

<P><STRONG><a name="[18c]"></a>net_buf_simple_add_u8</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, glue.o(i.net_buf_simple_add_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = net_buf_simple_add_u8 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_publish
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_get
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_get
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_get
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_publish
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_get
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_get
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_publish
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_get
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_get
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_move_publish
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_move_get
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_publish
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_get
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_app_key_add
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_publish
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_publish
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_publish
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_publish
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_publish
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_publish
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get_vnd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout_get
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_idx_pack
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_sub_send_status
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pub_send_status
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_comp_data_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ttl_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ttl_get
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_mod_app_status
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_add_elem
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_update
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_del
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_add
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_prov_link_establish
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_create
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprovisioned_beacon_send
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_ctl_send
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_health_period_status
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_attention_status
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ctl_send
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_key_status
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_sub_status
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_pub_status
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_krp_status
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gatt_proxy_status
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_status
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_get
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_get
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_transmit_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_transmit_get
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_filter_status
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_start
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_fail_msg
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_adv
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_invite
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_buf_init
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_ack
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_ack_send
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_friend_pdu
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unseg
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_seg
</UL>

<P><STRONG><a name="[31f]"></a>net_buf_simple_pull</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, glue.o(i.net_buf_simple_pull))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_buf_simple_pull &rArr; os_mbuf_adj &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_cb
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_overwrite
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_del
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_add
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_va_set
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_idx_unpack
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_recv
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_adv
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_segment_and_send
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_recv
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_seg
</UL>

<P><STRONG><a name="[28d]"></a>net_buf_simple_pull_be16</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, glue.o(i.net_buf_simple_pull_be16))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_buf_simple_pull_be16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_opcode
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_start
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_sub_rem
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_sub_add
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_heartbeat
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_ack
</UL>

<P><STRONG><a name="[2f0]"></a>net_buf_simple_pull_be32</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, glue.o(i.net_buf_simple_pull_be32))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_buf_simple_pull_be32 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_be32
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_recv
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_adv_recv
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_ack
</UL>

<P><STRONG><a name="[192]"></a>net_buf_simple_pull_le16</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, glue.o(i.net_buf_simple_pull_le16))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_status
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_set_unack
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_status
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_setunack
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_set_unack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_set
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_last_status
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_status
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_set_unack
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set_unack
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_status
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_set_unack
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_status
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_setunack
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_status
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_set_unack
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_status
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_setunack
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set_unack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_status
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set_unack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_opcode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vnd_status
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vnd_set_unack
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_add
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_overwrite
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_del
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_add
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_overwrite
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get_vnd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_del_all
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_del
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_add
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_va_set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_unbind
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_get
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout_get
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krp_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krp_get
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_sub_set
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_get
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_test_unrel
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_test
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_get
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_clear_unrel
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_clear
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_get
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_del
</UL>

<P><STRONG><a name="[396]"></a>net_buf_simple_pull_le32</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, glue.o(i.net_buf_simple_pull_le32))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_buf_simple_pull_le32 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le32
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set_unack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vnd_status
</UL>

<P><STRONG><a name="[1c2]"></a>net_buf_simple_pull_u8</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, glue.o(i.net_buf_simple_pull_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_buf_simple_pull_u8 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_status
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_set_unack
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_status
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_status
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_set_unack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_status
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_set_unack
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_status
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_status
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_set_unack
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_set
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_status
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_setunack
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_status
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_set_unack
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set_unack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_status
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set_unack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set_unack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_status
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_setunack
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_cb
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_opcode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vnd_set_unack
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_va_set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_set
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krp_set
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_sub_set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_comp_data_get
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_recv
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_adv_recv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_recv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_period_set_unrel
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_test_unrel
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_test
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attention_set_unrel
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_set
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_set
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_gatt_recv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_start
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_sub_rem
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_sub_add
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_unseg
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_heartbeat
</UL>

<P><STRONG><a name="[2d4]"></a>net_buf_simple_push</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, glue.o(i.net_buf_simple_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_buf_simple_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encode
</UL>

<P><STRONG><a name="[2d3]"></a>net_buf_simple_push_be16</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, glue.o(i.net_buf_simple_push_be16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_buf_simple_push_be16
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encode
</UL>

<P><STRONG><a name="[2d6]"></a>net_buf_simple_push_u8</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, glue.o(i.net_buf_simple_push_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_buf_simple_push_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_segment_and_send
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_friend_ctl
</UL>

<P><STRONG><a name="[279]"></a>net_buf_slist_get</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, glue.o(i.net_buf_slist_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_buf_slist_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_peek_head
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear_incomplete
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_timeout
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_clear
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_buf
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discard_buffer
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_local
</UL>

<P><STRONG><a name="[281]"></a>net_buf_slist_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glue.o(i.net_buf_slist_init))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_init
</UL>

<P><STRONG><a name="[27a]"></a>net_buf_slist_is_empty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, glue.o(i.net_buf_slist_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_poll
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear_incomplete
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_clear
</UL>

<P><STRONG><a name="[37a]"></a>net_buf_slist_merge_slist</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, glue.o(i.net_buf_slist_merge_slist))
<BR><BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_friend_pdu
</UL>

<P><STRONG><a name="[278]"></a>net_buf_slist_peek_head</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, glue.o(i.net_buf_slist_peek_head))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_get
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear_incomplete
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_purge_old_ack
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_friend_pdu
</UL>

<P><STRONG><a name="[38c]"></a>net_buf_slist_peek_next</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, glue.o(i.net_buf_slist_peek_next))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_purge_old_ack
</UL>

<P><STRONG><a name="[2e7]"></a>net_buf_slist_put</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, glue.o(i.net_buf_slist_put))
<BR><BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_friend_pdu
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_buf
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_send
</UL>

<P><STRONG><a name="[38b]"></a>net_buf_slist_remove</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, glue.o(i.net_buf_slist_remove))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_purge_old_ack
</UL>

<P><STRONG><a name="[181]"></a>net_buf_unref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, glue.o(i.net_buf_unref))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_buf_unref &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_send
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprovisioned_beacon_send
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_send
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_adv_thread
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_segments
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ctl_send
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_ack_send
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_req_end
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_poll_sent_end
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_clear_sent
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_poll
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear_incomplete
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_purge_old_ack
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_clear
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_sub_cfm
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_offer
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_friend_pdu
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_buf
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discard_buffer
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_friend_pdu
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_send_start
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_send_end
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_send
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_local
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_relay
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_ack
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unseg
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_seg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack_end
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_tx_reset
</UL>

<P><STRONG><a name="[3c0]"></a>nimble_port_get_dflt_eventq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nimble_port.o(i.nimble_port_get_dflt_eventq))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transition_timers_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_init
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_handler
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_handler
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_handler
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_handler
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_handler
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_handler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_init
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_timerque_dispose
</UL>

<P><STRONG><a name="[413]"></a>nimble_port_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nimble_port.o(i.nimble_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nimble_port_init &rArr; os_msys_init &rArr; mem_init_mbuf_pool &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_init
</UL>

<P><STRONG><a name="[208]"></a>npl_freertos_callout_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, npl_os_freertos.o(i.npl_freertos_callout_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = npl_freertos_callout_init
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_event_init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transition_timers_init
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_handler
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_handler
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_handler
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_handler
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_handler
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_handler
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_init
</UL>

<P><STRONG><a name="[3c3]"></a>npl_freertos_callout_remaining_ticks</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, npl_os_freertos.o(i.npl_freertos_callout_remaining_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = npl_freertos_callout_remaining_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetExpiryTime
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_remaining_get
</UL>

<P><STRONG><a name="[3c4]"></a>npl_freertos_callout_reset</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, npl_os_freertos.o(i.npl_freertos_callout_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = npl_freertos_callout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_tt_handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_tt_handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_tt_handler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_tt_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_tt_handler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_tt_handler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_tt_handler
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_handler
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_handler
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_handler
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_handler
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_handler
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_handler
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_submit
</UL>

<P><STRONG><a name="[3ed]"></a>npl_freertos_eventq_get</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, npl_os_freertos.o(i.npl_freertos_eventq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = npl_freertos_eventq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_adv_thread
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_timerque_dispose
</UL>

<P><STRONG><a name="[417]"></a>npl_freertos_eventq_put</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, npl_os_freertos.o(i.npl_freertos_eventq_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = npl_freertos_eventq_put
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_raise_assertion
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_put
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_callout_timer_cb
</UL>

<P><STRONG><a name="[24e]"></a>npl_freertos_sem_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, npl_os_freertos.o(i.npl_freertos_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = npl_freertos_sem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_health_cli_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_cli_init
</UL>

<P><STRONG><a name="[220]"></a>npl_freertos_sem_pend</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, npl_os_freertos.o(i.npl_freertos_sem_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = npl_freertos_sem_pend
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_encrypt_be
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sem_take
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sem_take
</UL>

<P><STRONG><a name="[3c6]"></a>npl_freertos_sem_release</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, npl_os_freertos.o(i.npl_freertos_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = npl_freertos_sem_release
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sem_give
</UL>

<P><STRONG><a name="[21f]"></a>npl_freertos_time_ms_to_ticks</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, npl_os_freertos.o(i.npl_freertos_time_ms_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_encrypt_be
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sem_take
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sem_take
</UL>

<P><STRONG><a name="[39f]"></a>onoff_handler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, transition.o(i.onoff_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = onoff_handler &rArr; npl_freertos_callout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_get_dflt_eventq
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reconf_timer_callback_entry
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_set_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_set_unack
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_set
</UL>

<P><STRONG><a name="[39e]"></a>onoff_tt_values</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, transition.o(i.onoff_tt_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = onoff_tt_values &rArr; calculate_lightness_target_values &rArr; linear_to_actual &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_values_calculator
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bound_states_transition_type_reassignment
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_lightness_target_values
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_set_unack
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_set
</UL>

<P><STRONG><a name="[41a]"></a>os_mbuf_adj</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, os_mbuf.o(i.os_mbuf_adj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_mbuf_adj &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_be16
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le32
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_be32
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull
</UL>

<P><STRONG><a name="[1d8]"></a>os_mbuf_append</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, os_mbuf.o(i.os_mbuf_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_trailingspace
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_be16
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_app_key_add
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_start
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_retransmit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le32
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_get
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_be32
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_prov_link_establish
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_create
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprovisioned_beacon_send
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_gap_mesh_cb
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_ctl_send
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ctl_send
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_adv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_random
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirm
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_recv
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_relay
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_friend_pdu
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_relay
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unseg
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_seg
</UL>

<P><STRONG><a name="[418]"></a>os_mbuf_extend</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, os_mbuf.o(i.os_mbuf_extend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_mbuf_extend &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_trailingspace
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
</UL>

<P><STRONG><a name="[42d]"></a>os_mbuf_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_mbuf.o(i.os_mbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_put
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
</UL>

<P><STRONG><a name="[18f]"></a>os_mbuf_free_chain</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_mbuf.o(i.os_mbuf_free_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_status_t
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_get
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_get
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_last_get
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_get
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_get
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_get
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_get
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_get
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_HSL_status
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_get
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_get
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_move_get
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_get
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_get
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_app_key_add
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_start
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_retransmit
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vnd_get
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get_vnd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_unbind
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_get
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout_get
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_sub_send_status
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pub_send_status
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_comp_data_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ttl_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ttl_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_update
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_del
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_add
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_recv
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_gap_mesh_cb
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_health_period_status
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_attention_status
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_test
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_get
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_clear
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_adj
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_key_status
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_sub_status
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_pub_status
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_krp_status
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gatt_proxy_status
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_status
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_get
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_transmit_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_transmit_get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_get
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_start
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pub_key
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_confirm
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_fail_msg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_random
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_invite
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirm
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_ack
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_send_pub_key
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_relay
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_sub_cfm
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_offer
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_update
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdu_recv
</UL>

<P><STRONG><a name="[42c]"></a>os_mbuf_get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, os_mbuf.o(i.os_mbuf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memblock_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get_pkthdr
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
</UL>

<P><STRONG><a name="[1e7]"></a>os_mbuf_get_pkthdr</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_mbuf.o(i.os_mbuf_get_pkthdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_create_from_pool
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_gap_mesh_cb
</UL>

<P><STRONG><a name="[226]"></a>os_mbuf_pool_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_mbuf.o(i.os_mbuf_pool_init))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_init
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init_mbuf_pool
</UL>

<P><STRONG><a name="[41b]"></a>os_mbuf_pullup</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, os_mbuf.o(i.os_mbuf_pullup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_trailingspace
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_copypkthdr
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_be16
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le32
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_be32
</UL>

<P><STRONG><a name="[42f]"></a>os_memblock_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_mempool.o(i.os_memblock_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
</UL>

<P><STRONG><a name="[42e]"></a>os_memblock_put</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, os_mempool.o(i.os_memblock_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_memblock_put
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free
</UL>

<P><STRONG><a name="[430]"></a>os_memblock_put_from_cb</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, os_mempool.o(i.os_memblock_put_from_cb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[225]"></a>os_mempool_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, os_mempool.o(i.os_mempool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_mempool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_init
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init_mbuf_pool
</UL>

<P><STRONG><a name="[143]"></a>os_msys_get</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_mbuf.o(i.os_msys_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_msys_get &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_msys_find_pool
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_recv
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>

<P><STRONG><a name="[420]"></a>os_msys_init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_msys_init.o(i.os_msys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_msys_init &rArr; mem_init_mbuf_pool &rArr; os_mempool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_reset
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_register
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init_mbuf_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_init
</UL>

<P><STRONG><a name="[433]"></a>os_msys_register</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, os_mbuf.o(i.os_msys_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = os_msys_register
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_init
</UL>

<P><STRONG><a name="[432]"></a>os_msys_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_mbuf.o(i.os_msys_reset))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_init
</UL>

<P><STRONG><a name="[3bd]"></a>ota_init_service</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ota_service.o(i.ota_init_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ota_init_service &rArr; att_db_util_add_characteristic_uuid128 &rArr; att_db_util_add_attribute_uuid16 &rArr; att_db_util_assert_space
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_version
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_service_uuid128
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_characteristic_uuid128
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_service
</UL>

<P><STRONG><a name="[1bb]"></a>ota_read_callback</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ota_service.o(i.ota_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ota_read_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback
</UL>

<P><STRONG><a name="[1bd]"></a>ota_write_callback</STRONG> (Thumb, 488 bytes, Stack size 32 bytes, ota_service.o(i.ota_write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ota_write_callback &rArr; EflashProgram &rArr; Delay10US
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_switch_app
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_eflash_prog
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseEFlashPage
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EflashProgramEnable
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EflashProgramDisable
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EflashProgram
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EflashCacheFlush
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EflashCacheEna
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
</UL>

<P><STRONG><a name="[43c]"></a>parse_path2index_new</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, info2ram.o(i.parse_path2index_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_binary_value
</UL>

<P><STRONG><a name="[30]"></a>peripherals_gpio_isr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, chip_peripherals.o(i.peripherals_gpio_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = peripherals_gpio_isr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_state_changed
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_peripherals.o(i.chip_peripherals_init)
</UL>
<P><STRONG><a name="[34b]"></a>peripherals_setup</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, chip_peripherals.o(i.peripherals_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = peripherals_setup &rArr; peripherals_config_uart_user &rArr; peripherals_config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadPwmSel
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_DisableAllInputs
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ConfigIntSource
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config_uart_user
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_led_color
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_peripherals_init
</UL>

<P><STRONG><a name="[36f]"></a>program_flash</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, eflash.o(i.program_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = program_flash &rArr; program_flash0 &rArr; EflashProgram &rArr; Delay10US
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash0
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_mesh_write_to_flash
</UL>

<P><STRONG><a name="[443]"></a>program_flash0</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, eflash.o(i.program_flash0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = program_flash0 &rArr; EflashProgram &rArr; Delay10US
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseEFlashPage
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EflashProgramEnable
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EflashProgramDisable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EflashProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash
</UL>

<P><STRONG><a name="[448]"></a>prov_authen_TMO</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, prov.o(i.prov_authen_TMO))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = prov_authen_TMO &rArr; bt_TM_auth &rArr; tc_sha256_update &rArr; compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_bd_addr
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_TM_auth
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprovisioned_beacon_send
</UL>

<P><STRONG><a name="[2a]"></a>prov_whitelist_remove</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, prov.o(i.prov_whitelist_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prov_whitelist_remove &rArr; bt_mesh_scan_enable &rArr; ble_gap_ext_disc &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flag_for_adv_sent
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmds_put
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_disable
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_disable
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(i.bt_mesh_prov_init)
</UL>
<P><STRONG><a name="[4]"></a>proxy_recv</STRONG> (Thumb, 490 bytes, Stack size 40 bytes, proxy.o(i.proxy_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = proxy_recv &rArr; proxy_complete_pdu &rArr; bt_mesh_net_recv &rArr; bt_mesh_trans_recv &rArr; trans_seg &rArr; ctl_recv &rArr; bt_mesh_friend_req &rArr; friend_cred_create &rArr; friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_complete_pdu
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_client
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
</UL>
<BR>[Address Reference Count : 2]<UL><LI> proxy.o(.data)
<LI> proxy.o(.data)
</UL>
<P><STRONG><a name="[1d1]"></a>proxy_segment_and_send</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, proxy.o(i.proxy_segment_and_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = proxy_segment_and_send &rArr; net_buf_simple_pull &rArr; os_mbuf_adj &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_get_mtu
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_push_u8
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_send
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_filter_status
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_send
</UL>

<P><STRONG><a name="[44f]"></a>pubkey_reproduce</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, prov.o(i.pubkey_reproduce))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = pubkey_reproduce &rArr; bt_pub_key_gen &rArr; ble_sm_alg_gen_key_pair &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pub_key_gen
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_invite
</UL>

<P><STRONG><a name="[366]"></a>put_be16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, endian.o(i.put_be16))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_push_be16
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_app_nonce
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_id_adv
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_adv_create
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_prov_adv_create
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_set
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
</UL>

<P><STRONG><a name="[23d]"></a>put_be32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, endian.o(i.put_be32))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_obfuscate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_auth
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_proxy_nonce
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_net_nonce
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_app_nonce
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
</UL>

<P><STRONG><a name="[3b6]"></a>put_le16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, endian.o(i.put_le16))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_get_current
</UL>

<P><STRONG><a name="[35]"></a>read_mesh_from_flash</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_mesh_flash_oper.o(i.read_mesh_from_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_mesh_from_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_mesh_flash_oper.o(i.fast_switch_monitor_init)
</UL>
<P><STRONG><a name="[3cc]"></a>reconf_timer_callback_entry</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, transition.o(i.reconf_timer_callback_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = reconf_timer_callback_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_handler
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_handler
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_handler
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_handler
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_handler
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_handler
</UL>

<P><STRONG><a name="[121]"></a>regularize_k</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ecc.o(i.regularize_k))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = regularize_k &rArr; uECC_vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
</UL>

<P><STRONG><a name="[403]"></a>reset_adv_param</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, glue.o(i.reset_adv_param))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
</UL>

<P><STRONG><a name="[404]"></a>reset_con_handle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mesh_srv.o(i.reset_con_handle))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
</UL>

<P><STRONG><a name="[1dd]"></a>reset_link</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, prov.o(i.reset_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = reset_link &rArr; bt_mesh_attention &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set_bit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_clear_bit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_attention
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pub_key_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_clear_tx
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_prov_link_establish
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_retransmit
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_timeout
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_ctl
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
</UL>

<P><STRONG><a name="[34f]"></a>save_binary_value</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, config_store.o(i.save_binary_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_path2index_new
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_rpl
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_seq
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_net
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_mod_sub
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_mod_pub
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_mod_bind
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_iv
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_hb_pub
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_cfg
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_node
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_net_key
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_app_key
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_node
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_net_key
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_app_key
</UL>

<P><STRONG><a name="[462]"></a>service_is_ready</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, access.o(i.service_is_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = service_is_ready &rArr; bt_mesh_is_provisioned &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_is_provisioned
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_find
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
</UL>

<P><STRONG><a name="[4a4]"></a>set_aes_result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mesh_queue.o(i.set_aes_result))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[4a3]"></a>set_ccm_result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mesh_queue.o(i.set_ccm_result))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[1dc]"></a>set_flag_for_adv_sent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adv.o(i.set_flag_for_adv_sent))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_reset
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_complete
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_prov_link_establish
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_whitelist_remove
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_ack
</UL>

<P><STRONG><a name="[34e]"></a>set_flashmirror_info</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, info2ram.o(i.set_flashmirror_info))
<BR><BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_rpl
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_nodes
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_node
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_net_key
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_app_key
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mod_path
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_net_key
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_app_key
</UL>

<P><STRONG><a name="[1fb]"></a>set_led_color</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, chip_peripherals.o(i.set_led_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = set_led_color &rArr; tlc59731_write &rArr; GIO_WriteValue &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlc59731_write
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_complete
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_setup
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_light_state
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_light_reset
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_power_on
</UL>

<P><STRONG><a name="[44a]"></a>set_mesh_sleep_duration</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mesh_srv.o(i.set_mesh_sleep_duration))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_complete
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[1a0]"></a>set_mesh_uart_output_func</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mesh_srv.o(i.set_mesh_uart_output_func))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[19a]"></a>settings_bytes_from_str</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, glue.o(i.settings_bytes_from_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = settings_bytes_from_str
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seq_set
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_set
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_set_sub
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_set_pub
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_set_bind
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_set
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pub_set
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
</UL>

<P><STRONG><a name="[464]"></a>settings_str_from_bytes</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, glue.o(i.settings_str_from_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = settings_str_from_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_node_addr
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_net_key
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_app_key
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_rpl
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_seq
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_net
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_mod_sub
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_mod_pub
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_mod_bind
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_iv
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_hb_pub
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_cfg
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_node
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_net_key
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_app_key
</UL>

<P><STRONG><a name="[12]"></a>setup_profile</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, profile.o(i.setup_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 996<LI>Call Chain = setup_profile &rArr; mesh_env_init &rArr; mesh_main &rArr; mesh_init0 &rArr; bt_mesh_init &rArr; bt_mesh_prov_init &rArr; bt_pub_key_gen &rArr; ble_sm_alg_gen_key_pair &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set_dev_name
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_env_init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_add_event_handler
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_mesh_task
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_packet_handler
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_init
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_service
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.app_main)
</UL>
<P><STRONG><a name="[3ea]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_actual
</UL>

<P><STRONG><a name="[21e]"></a>start_aes</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mesh_queue.o(i.start_aes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = start_aes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_small_msg_get
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_update
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_setup
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_final
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_encrypt_be
</UL>

<P><STRONG><a name="[247]"></a>start_ccm</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mesh_queue.o(i.start_ccm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = start_ccm &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_small_msg_get
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ccm_encrypt
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ccm_decrypt
</UL>

<P><STRONG><a name="[438]"></a>start_eflash_prog</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ota_service.o(i.start_eflash_prog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = start_eflash_prog
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EflashRepair
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EflashCacheBypass
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EflashBaseTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_write_callback
</UL>

<P><STRONG><a name="[1f9]"></a>state_binding</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, state_binding.o(i.state_binding))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = state_binding &rArr; linear_to_actual &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_actual
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actual_to_linear
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_to_level
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_to_light_ctl_temp
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_lightness2
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_lightness
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_default_status_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_work_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_work_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_work_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_work_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_work_handler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_work_handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_work_handler
</UL>

<P><STRONG><a name="[477]"></a>strsep</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, strsep.o(i.strsep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strsep &rArr; strpbrk
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</UL>

<P><STRONG><a name="[363]"></a>strtok_r</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, strtok_r.o(i.strtok_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strtok_r &rArr; strsep &rArr; strpbrk
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsep
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_parse_name
</UL>

<P><STRONG><a name="[20f]"></a>swap_buf</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, endian.o(i.swap_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = swap_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_key_pair
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_dhkey
</UL>

<P><STRONG><a name="[214]"></a>swap_in_place</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, endian.o(i.swap_in_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swap_in_place
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_key_pair
</UL>

<P><STRONG><a name="[406]"></a>sync_kv</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, settings.o(i.sync_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sync_kv &rArr; sync_net_key &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_remove
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_node_addr
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_net_key
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_app_key
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meshque_msg_dispose
</UL>

<P><STRONG><a name="[47c]"></a>tc_cmac_erase</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmac_mode.o(i.tc_cmac_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tc_cmac_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_final
</UL>

<P><STRONG><a name="[22f]"></a>tc_cmac_final</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, cmac_mode.o(i.tc_cmac_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tc_cmac_final &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aes_result
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_aes
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_erase
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_aes_cmac
</UL>

<P><STRONG><a name="[47d]"></a>tc_cmac_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cmac_mode.o(i.tc_cmac_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tc_cmac_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_setup
</UL>

<P><STRONG><a name="[22d]"></a>tc_cmac_setup</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, cmac_mode.o(i.tc_cmac_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tc_cmac_setup &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aes_result
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_aes
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copy
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf_double
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_aes_cmac
</UL>

<P><STRONG><a name="[22e]"></a>tc_cmac_update</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, cmac_mode.o(i.tc_cmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aes_result
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_aes
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_copy
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_aes_cmac
</UL>

<P><STRONG><a name="[219]"></a>tc_sha256_final</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, sha256.o(i.tc_sha256_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tc_sha256_final &rArr; compress
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_TM_auth
</UL>

<P><STRONG><a name="[217]"></a>tc_sha256_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sha256.o(i.tc_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tc_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_TM_auth
</UL>

<P><STRONG><a name="[218]"></a>tc_sha256_update</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sha256.o(i.tc_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tc_sha256_update &rArr; compress
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_TM_auth
</UL>

<P><STRONG><a name="[463]"></a>tlc59731_write</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, chip_peripherals.o(i.tlc59731_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tlc59731_write &rArr; GIO_WriteValue &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_led_color
</UL>

<P><STRONG><a name="[1f6]"></a>transition_timers_init</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, transition.o(i.transition_timers_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = transition_timers_init &rArr; npl_freertos_callout_init
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nimble_port_get_dflt_eventq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_conf_init
</UL>

<P><STRONG><a name="[482]"></a>uECC_generate_random_int</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ecc.o(i.uECC_generate_random_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uECC_generate_random_int &rArr; uECC_vli_cmp &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
</UL>

<P><STRONG><a name="[485]"></a>uECC_get_rng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ecc.o(i.uECC_get_rng))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
</UL>

<P><STRONG><a name="[213]"></a>uECC_make_key</STRONG> (Thumb, 156 bytes, Stack size 184 bytes, ecc_dh.o(i.uECC_make_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_nativeToBytes
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mmod
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_get_rng
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_key_pair
</UL>

<P><STRONG><a name="[20d]"></a>uECC_set_rng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ecc.o(i.uECC_set_rng))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_ecc_init
</UL>

<P><STRONG><a name="[211]"></a>uECC_shared_secret</STRONG> (Thumb, 186 bytes, Stack size 192 bytes, ecc_dh.o(i.uECC_shared_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = uECC_shared_secret &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_nativeToBytes
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_isZero
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_dhkey
</UL>

<P><STRONG><a name="[489]"></a>uECC_valid_point</STRONG> (Thumb, 106 bytes, Stack size 88 bytes, ecc.o(i.uECC_valid_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = uECC_valid_point &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_equal
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_isZero
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_public_key
</UL>

<P><STRONG><a name="[210]"></a>uECC_valid_public_key</STRONG> (Thumb, 72 bytes, Stack size 80 bytes, ecc.o(i.uECC_valid_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = uECC_valid_public_key &rArr; uECC_valid_point &rArr; uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_point
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sm_alg_gen_dhkey
</UL>

<P><STRONG><a name="[488]"></a>uECC_vli_bytesToNative</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ecc.o(i.uECC_vli_bytesToNative))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uECC_vli_bytesToNative
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_public_key
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
</UL>

<P><STRONG><a name="[151]"></a>uECC_vli_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ecc.o(i.uECC_vli_clear))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mmod
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_initial_double
</UL>

<P><STRONG><a name="[484]"></a>uECC_vli_cmp</STRONG> (Thumb, 54 bytes, Stack size 44 bytes, ecc.o(i.uECC_vli_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uECC_vli_cmp &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
</UL>

<P><STRONG><a name="[48a]"></a>uECC_vli_cmp_unsafe</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ecc.o(i.uECC_vli_cmp_unsafe))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uECC_vli_cmp_unsafe
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_point
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_public_key
</UL>

<P><STRONG><a name="[48b]"></a>uECC_vli_equal</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, ecc.o(i.uECC_vli_equal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uECC_vli_equal
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_point
</UL>

<P><STRONG><a name="[124]"></a>uECC_vli_isZero</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecc.o(i.uECC_vli_isZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uECC_vli_isZero
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_isZero
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
</UL>

<P><STRONG><a name="[486]"></a>uECC_vli_mmod</STRONG> (Thumb, 262 bytes, Stack size 200 bytes, ecc.o(i.uECC_vli_mmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = uECC_vli_mmod &rArr; uECC_vli_set
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
</UL>

<P><STRONG><a name="[150]"></a>uECC_vli_modAdd</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ecc.o(i.uECC_vli_modAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uECC_vli_modAdd &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
</UL>

<P><STRONG><a name="[12c]"></a>uECC_vli_modInv</STRONG> (Thumb, 270 bytes, Stack size 152 bytes, ecc.o(i.uECC_vli_modInv))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = uECC_vli_modInv &rArr; vli_modInv_update &rArr; uECC_vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv_update
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[12b]"></a>uECC_vli_modMult_fast</STRONG> (Thumb, 32 bytes, Stack size 80 bytes, ecc.o(i.uECC_vli_modMult_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
</UL>

<P><STRONG><a name="[12a]"></a>uECC_vli_modSub</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ecc.o(i.uECC_vli_modSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uECC_vli_modSub &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
</UL>

<P><STRONG><a name="[487]"></a>uECC_vli_nativeToBytes</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ecc.o(i.uECC_vli_nativeToBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uECC_vli_nativeToBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
</UL>

<P><STRONG><a name="[483]"></a>uECC_vli_numBits</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ecc.o(i.uECC_vli_numBits))
<BR><BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mmod
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
</UL>

<P><STRONG><a name="[125]"></a>uECC_vli_set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ecc.o(i.uECC_vli_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uECC_vli_set
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mmod
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_initial_double
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
</UL>

<P><STRONG><a name="[48c]"></a>uECC_vli_sub</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, ecc.o(i.uECC_vli_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uECC_vli_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
</UL>

<P><STRONG><a name="[127]"></a>uECC_vli_testBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ecc.o(i.uECC_vli_testBit))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
</UL>

<P><STRONG><a name="[4a5]"></a>update_led_command</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, profile.o(i.update_led_command))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vnd_set
</UL>

<P><STRONG><a name="[3d0]"></a>update_light_state</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, ble_mesh_light_model.o(i.update_light_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = update_light_state &rArr; set_led_color &rArr; tlc59731_write &rArr; GIO_WriteValue &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_led_color
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_work_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_work_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_work_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_work_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_work_handler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_work_handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_work_handler
</UL>

<P><STRONG><a name="[494]"></a>user_msg_handler</STRONG> (Thumb, 350 bytes, Stack size 64 bytes, mesh_queue.o(i.user_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = user_msg_handler &rArr; btstack_memory_dtbt_pool_flush &rArr; mesh_memory_pool_create &rArr; mesh_memory_pool_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_scan_response_data
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_para
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_enable
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_data
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_adv_set_random_addr
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_start_ccm
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_scan_para
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_scan_enable
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_clear_white_lists
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_aes_encrypt
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_add_whitelist
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_small_msg_free
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_pool_flush
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[49]"></a>user_packet_handler</STRONG> (Thumb, 434 bytes, Stack size 128 bytes, profile.o(i.user_packet_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = user_packet_handler &rArr; user_msg_handler &rArr; mesh_service_trigger &rArr; Host2Mesh_msg_send &rArr; btstack_memory_dtbt_msg_get
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mesh_sleep_duration
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flag_for_adv_sent
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_is_ready
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_trigger
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_provisioned_poweron
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_random_device_address
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_scan_response_data
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_para
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_enable
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_data
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_adv_set_random_addr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_unbind_mode_run
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_set_db
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(i.setup_profile)
</UL>
<P><STRONG><a name="[31]"></a>visit_mesh</STRONG> (Thumb, 88 bytes, Stack size 312 bytes, config_store.o(i.visit_mesh))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = visit_mesh &rArr; conf_set_value_new &rArr; conf_parse_and_lookup_new &rArr; conf_parse_name &rArr; strtok_r &rArr; strsep &rArr; strpbrk
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_line_parse
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_set_value_new
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.conf_load_new)
</UL>
<P><STRONG><a name="[fd]"></a>vli_mmod_fast_secp256r1</STRONG> (Thumb, 428 bytes, Stack size 56 bytes, ecc.o(i.vli_mmod_fast_secp256r1))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = vli_mmod_fast_secp256r1 &rArr; uECC_vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_sm_alg.o(.constdata)
<LI> ecc.o(.constdata)
</UL>
<P><STRONG><a name="[357]"></a>write2mirror</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, info2ram.o(i.write2mirror))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write2mirror
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_put
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_fcb_save
</UL>

<P><STRONG><a name="[3be]"></a>write_control_word2mirror</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, info2ram.o(i.write_control_word2mirror))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_control_word2mirror
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_put
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_fac_conf
</UL>

<P><STRONG><a name="[fc]"></a>x_side_default</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, ecc.o(i.x_side_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = x_side_default &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_sm_alg.o(.constdata)
<LI> ecc.o(.constdata)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[492]"></a>user_msg_handler</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, profile.o(i.user_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = user_msg_handler &rArr; mesh_service_trigger &rArr; Host2Mesh_msg_send &rArr; btstack_memory_dtbt_msg_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_led_color
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_is_ready
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_service_trigger
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model_by_id
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[1f1]"></a>ble_mesh_light_model_breath_mode</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, ble_mesh_light_model.o(i.ble_mesh_light_model_breath_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ble_mesh_light_model_breath_mode &rArr; ble_mesh_light_model_light_reset &rArr; set_led_color &rArr; tlc59731_write &rArr; GIO_WriteValue &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_light_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_breath_mode_work
</UL>

<P><STRONG><a name="[16]"></a>ble_mesh_light_model_breath_mode_expire</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_mesh_light_model.o(i.ble_mesh_light_model_breath_mode_expire))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_mesh_light_model_breath_mode_expire &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_mesh_light_model.o(i.ble_mesh_light_model_unbind_mode_run)
</UL>
<P><STRONG><a name="[17]"></a>ble_mesh_light_model_breath_mode_work</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_mesh_light_model.o(i.ble_mesh_light_model_breath_mode_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ble_mesh_light_model_breath_mode_work &rArr; ble_mesh_light_model_breath_mode &rArr; ble_mesh_light_model_light_reset &rArr; set_led_color &rArr; tlc59731_write &rArr; GIO_WriteValue &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_is_breath_run
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_breath_mode
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_mesh_light_model.o(i.ble_mesh_light_model_unbind_mode_run)
</UL>
<P><STRONG><a name="[1f7]"></a>ble_mesh_light_model_default_status_init</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, ble_mesh_light_model.o(i.ble_mesh_light_model_default_status_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ble_mesh_light_model_default_status_init &rArr; state_binding &rArr; linear_to_actual &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_binding
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_conf_init
</UL>

<P><STRONG><a name="[1f5]"></a>ble_mesh_light_model_default_var_init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ble_mesh_light_model.o(i.ble_mesh_light_model_default_var_init))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_conf_init
</UL>

<P><STRONG><a name="[1f3]"></a>ble_mesh_light_model_is_breath_run</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_mesh_light_model.o(i.ble_mesh_light_model_is_breath_run))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_provsioned_complete
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_breath_mode_work
</UL>

<P><STRONG><a name="[1f2]"></a>ble_mesh_light_model_light_reset</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ble_mesh_light_model.o(i.ble_mesh_light_model_light_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ble_mesh_light_model_light_reset &rArr; set_led_color &rArr; tlc59731_write &rArr; GIO_WriteValue &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_pwm_value_update
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_led_color
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_breath_mode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_power_on
</UL>

<P><STRONG><a name="[15]"></a>ble_mesh_light_model_light_to_save</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_mesh_light_model.o(i.ble_mesh_light_model_light_to_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_mesh_light_model_light_to_save &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_put
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_mesh_light_model.o(i.ble_mesh_light_model_conf_init)
</UL>
<P><STRONG><a name="[1fa]"></a>ble_mesh_light_model_pwm_value_update</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, ble_mesh_light_model.o(i.ble_mesh_light_model_pwm_value_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_mesh_light_model_pwm_value_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_light_reset
</UL>

<P><STRONG><a name="[43d]"></a>peripherals_config_uart</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, chip_peripherals.o(i.peripherals_config_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = peripherals_config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config_uart_user
</UL>

<P><STRONG><a name="[43e]"></a>peripherals_config_uart_user</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, chip_peripherals.o(i.peripherals_config_uart_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = peripherals_config_uart_user &rArr; peripherals_config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadPwmSel
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelUartRxdIn
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetPull
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_setup
</UL>

<P><STRONG><a name="[53]"></a>prov_complete</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ble_mesh_app.o(i.prov_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = prov_complete &rArr; set_led_color &rArr; tlc59731_write &rArr; GIO_WriteValue &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_light_model_provsioned_complete
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mesh_sleep_duration
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_led_color
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flag_for_adv_sent
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_mesh_app.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>prov_reset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_mesh_app.o(i.prov_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prov_reset &rArr; bt_mesh_prov_enable &rArr; bt_mesh_scan_enable &rArr; ble_gap_ext_disc &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flag_for_adv_sent
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_enable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_mesh_app.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>Delay10US</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, eflash.o(i.Delay10US))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay10US
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EflashProgram
</UL>

<P><STRONG><a name="[133]"></a>DelayMS</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, eflash.o(i.DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseEFlashPage
</UL>

<P><STRONG><a name="[3ba]"></a>EflashBaseTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eflash.o(i.EflashBaseTime))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[3b9]"></a>EflashCacheBypass</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eflash.o(i.EflashCacheBypass))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[490]"></a>EflashCacheEna</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eflash.o(i.EflashCacheEna))
<BR><BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
</UL>

<P><STRONG><a name="[491]"></a>EflashCacheFlush</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, eflash.o(i.EflashCacheFlush))
<BR><BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
</UL>

<P><STRONG><a name="[12e]"></a>EflashProgram</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, eflash.o(i.EflashProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EflashProgram &rArr; Delay10US
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay10US
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash0
</UL>

<P><STRONG><a name="[445]"></a>EflashProgramDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eflash.o(i.EflashProgramDisable))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash0
</UL>

<P><STRONG><a name="[444]"></a>EflashProgramEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eflash.o(i.EflashProgramEnable))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash0
</UL>

<P><STRONG><a name="[132]"></a>EraseEFlashPage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, eflash.o(i.EraseEFlashPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EraseEFlashPage &rArr; DelayMS
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash0
</UL>

<P><STRONG><a name="[3b8]"></a>init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, eflash.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EflashCacheBypass
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EflashBaseTime
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash0
</UL>

<P><STRONG><a name="[446]"></a>uninit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, eflash.o(i.uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EflashCacheFlush
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EflashCacheEna
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash0
</UL>

<P><STRONG><a name="[137]"></a>GIO_MaskedWrite</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, peripheral_gpio.o(i.GIO_MaskedWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetPull
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ConfigIntSource
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
</UL>

<P><STRONG><a name="[14e]"></a>PINCTRL_SelIn</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, peripheral_pinctrl.o(i.PINCTRL_SelIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PINCTRL_SelIn
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SelUartRxdIn
</UL>

<P><STRONG><a name="[131]"></a>Delay10US</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ota_service.o(i.Delay10US))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay10US
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EflashProgram
</UL>

<P><STRONG><a name="[135]"></a>DelayMS</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ota_service.o(i.DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseEFlashPage
</UL>

<P><STRONG><a name="[468]"></a>EflashBaseTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ota_service.o(i.EflashBaseTime))
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_eflash_prog
</UL>

<P><STRONG><a name="[467]"></a>EflashCacheBypass</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ota_service.o(i.EflashCacheBypass))
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_eflash_prog
</UL>

<P><STRONG><a name="[436]"></a>EflashCacheEna</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ota_service.o(i.EflashCacheEna))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_write_callback
</UL>

<P><STRONG><a name="[437]"></a>EflashCacheFlush</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ota_service.o(i.EflashCacheFlush))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_write_callback
</UL>

<P><STRONG><a name="[130]"></a>EflashProgram</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ota_service.o(i.EflashProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EflashProgram &rArr; Delay10US
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay10US
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_write_callback
</UL>

<P><STRONG><a name="[435]"></a>EflashProgramDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ota_service.o(i.EflashProgramDisable))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_write_callback
</UL>

<P><STRONG><a name="[439]"></a>EflashProgramEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ota_service.o(i.EflashProgramEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_write_callback
</UL>

<P><STRONG><a name="[469]"></a>EflashRepair</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ota_service.o(i.EflashRepair))
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_eflash_prog
</UL>

<P><STRONG><a name="[134]"></a>EraseEFlashPage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ota_service.o(i.EraseEFlashPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EraseEFlashPage &rArr; DelayMS
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_write_callback
</UL>

<P><STRONG><a name="[1b2]"></a>att_db_util_add_attribute_uuid128</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, att_db_util.o(i.att_db_util_add_attribute_uuid128))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = att_db_util_add_attribute_uuid128 &rArr; att_db_util_assert_space
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_128
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_set_end_tag
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_assert_space
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_characteristic_uuid128
</UL>

<P><STRONG><a name="[1b6]"></a>att_db_util_add_attribute_uuid16</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, att_db_util.o(i.att_db_util_add_attribute_uuid16))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = att_db_util_add_attribute_uuid16 &rArr; att_db_util_assert_space
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_set_end_tag
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_assert_space
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_service_uuid128
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_characteristic_uuid128
</UL>

<P><STRONG><a name="[1b3]"></a>att_db_util_assert_space</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, att_db_util.o(i.att_db_util_assert_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = att_db_util_assert_space
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid16
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid128
</UL>

<P><STRONG><a name="[1b5]"></a>att_db_util_set_end_tag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, att_db_util.o(i.att_db_util_set_end_tag))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid16
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_db_util_add_attribute_uuid128
</UL>

<P><STRONG><a name="[40]"></a>att_read_callback</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, mesh_srv.o(i.att_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = att_read_callback &rArr; mesh_read_callback &rArr; bt_mesh_is_provisioned &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_read_callback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mesh_srv.o(i.mesh_env_init)
<LI> mesh_srv.o(i.user_packet_handler)
</UL>
<P><STRONG><a name="[3f]"></a>att_write_callback</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, mesh_srv.o(i.att_write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = att_write_callback &rArr; mesh_write_callback &rArr; bt_mesh_is_provisioned &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_raise_assertion
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_msg_get
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host2Mesh_msg_send
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_write_callback
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mesh_srv.o(i.mesh_env_init)
<LI> mesh_srv.o(i.user_packet_handler)
</UL>
<P><STRONG><a name="[3c5]"></a>k_sem_give</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mesh_srv.o(i.k_sem_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = k_sem_give &rArr; npl_freertos_sem_release
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[41]"></a>user_packet_handler</STRONG> (Thumb, 674 bytes, Stack size 32 bytes, mesh_srv.o(i.user_packet_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = user_packet_handler &rArr; user_msg_handler &rArr; btstack_memory_dtbt_pool_flush &rArr; mesh_memory_pool_create &rArr; mesh_memory_pool_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_set_db
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_bd_addr
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_128
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_raise_assertion
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ccm_result
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aes_result
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_flash_sys_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aes_result
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filtermeshADV
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_dtbt_msg_get
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_is_provisioned
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host2Mesh_msg_send
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sem_give
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_srv.o(i.mesh_env_init)
</UL>
<P><STRONG><a name="[142]"></a>NET_BUF_SIMPLE</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, device_composition.o(i.NET_BUF_SIMPLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NET_BUF_SIMPLE &rArr; os_msys_get &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pub
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_status_t
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_get
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_get
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_last_get
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_get
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_get
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_get
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_get
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_get
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_HSL_status
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_get
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_get
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_move_get
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_get
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_get
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vnd_get
</UL>

<P><STRONG><a name="[209]"></a>ble_npl_callout_stop</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, device_composition.o(i.ble_npl_callout_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_npl_callout_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_set_unack
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_set_unack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_set_unack
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_set
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_set_unack
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_set
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_set_unack
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set_unack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set_unack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set_unack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set
</UL>

<P><STRONG><a name="[61]"></a>gen_def_trans_time_get</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, device_composition.o(i.gen_def_trans_time_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = gen_def_trans_time_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[394]"></a>gen_def_trans_time_publish</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, device_composition.o(i.gen_def_trans_time_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = gen_def_trans_time_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_set_unack
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_set
</UL>

<P><STRONG><a name="[62]"></a>gen_def_trans_time_set</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, device_composition.o(i.gen_def_trans_time_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = gen_def_trans_time_set &rArr; gen_def_trans_time_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_setunack
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_publish
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>gen_def_trans_time_set_unack</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, device_composition.o(i.gen_def_trans_time_set_unack))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = gen_def_trans_time_set_unack &rArr; gen_def_trans_time_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_setunack
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[395]"></a>gen_def_trans_time_setunack</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, device_composition.o(i.gen_def_trans_time_setunack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gen_def_trans_time_setunack &rArr; net_buf_simple_pull_u8 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_set_unack
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_def_trans_time_set
</UL>

<P><STRONG><a name="[64]"></a>gen_def_trans_time_status</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, device_composition.o(i.gen_def_trans_time_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gen_def_trans_time_status &rArr; net_buf_simple_pull_u8 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>gen_delta_set</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, device_composition.o(i.gen_delta_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = gen_delta_set &rArr; gen_level_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le32
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_tt_values
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_elem
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>gen_delta_set_unack</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, device_composition.o(i.gen_delta_set_unack))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = gen_delta_set_unack &rArr; gen_level_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le32
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_tt_values
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_elem
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>gen_level_get</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, device_composition.o(i.gen_level_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = gen_level_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_delta_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[39b]"></a>gen_level_move_get</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, device_composition.o(i.gen_level_move_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = gen_level_move_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set
</UL>

<P><STRONG><a name="[39c]"></a>gen_level_move_publish</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, device_composition.o(i.gen_level_move_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = gen_level_move_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set_unack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_move_set
</UL>

<P><STRONG><a name="[5a]"></a>gen_level_set</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, device_composition.o(i.gen_level_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = gen_level_set &rArr; gen_level_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_tt_values
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_elem
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>gen_level_set_unack</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, device_composition.o(i.gen_level_set_unack))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = gen_level_set_unack &rArr; gen_level_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_tt_values
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_elem
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>gen_level_status</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, device_composition.o(i.gen_level_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gen_level_status &rArr; net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>gen_move_set</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, device_composition.o(i.gen_move_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = gen_move_set &rArr; gen_level_move_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_move_publish
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_move_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_tt_values
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_elem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>gen_move_set_unack</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, device_composition.o(i.gen_move_set_unack))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = gen_move_set_unack &rArr; gen_level_move_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_level_move_publish
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_tt_values
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_elem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>gen_onoff_get</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, device_composition.o(i.gen_onoff_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = gen_onoff_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>gen_onoff_set</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, device_composition.o(i.gen_onoff_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = gen_onoff_set &rArr; gen_onoff_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_tt_values
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_handler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_publish
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>gen_onoff_set_unack</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, device_composition.o(i.gen_onoff_set_unack))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = gen_onoff_set_unack &rArr; gen_onoff_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_tt_values
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_handler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onoff_publish
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>gen_onoff_status</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, device_composition.o(i.gen_onoff_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gen_onoff_status &rArr; net_buf_simple_pull_u8 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>gen_onpowerup_get</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, device_composition.o(i.gen_onpowerup_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = gen_onpowerup_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[3a0]"></a>gen_onpowerup_publish</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, device_composition.o(i.gen_onpowerup_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = gen_onpowerup_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_set_unack
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_set
</UL>

<P><STRONG><a name="[66]"></a>gen_onpowerup_set</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, device_composition.o(i.gen_onpowerup_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = gen_onpowerup_set &rArr; gen_onpowerup_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_setunack
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_publish
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>gen_onpowerup_set_unack</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, device_composition.o(i.gen_onpowerup_set_unack))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = gen_onpowerup_set_unack &rArr; gen_onpowerup_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_setunack
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[3a1]"></a>gen_onpowerup_setunack</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, device_composition.o(i.gen_onpowerup_setunack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gen_onpowerup_setunack &rArr; net_buf_simple_pull_u8 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_set_unack
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_onpowerup_set
</UL>

<P><STRONG><a name="[68]"></a>gen_onpowerup_status</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, device_composition.o(i.gen_onpowerup_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gen_onpowerup_status &rArr; net_buf_simple_pull_u8 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[3d4]"></a>light_HSL_status</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, device_composition.o(i.light_HSL_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = light_HSL_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set
</UL>

<P><STRONG><a name="[7f]"></a>light_ctl_default_get</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, device_composition.o(i.light_ctl_default_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = light_ctl_default_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[3d5]"></a>light_ctl_default_publish</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, device_composition.o(i.light_ctl_default_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = light_ctl_default_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_set_unack
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_set
</UL>

<P><STRONG><a name="[80]"></a>light_ctl_default_set</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, device_composition.o(i.light_ctl_default_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = light_ctl_default_set &rArr; light_ctl_default_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_setunack
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_publish
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>light_ctl_default_set_unack</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, device_composition.o(i.light_ctl_default_set_unack))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = light_ctl_default_set_unack &rArr; light_ctl_default_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_setunack
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[3d6]"></a>light_ctl_default_setunack</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, device_composition.o(i.light_ctl_default_setunack))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = light_ctl_default_setunack &rArr; net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_set_unack
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_default_set
</UL>

<P><STRONG><a name="[87]"></a>light_ctl_default_status</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, device_composition.o(i.light_ctl_default_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = light_ctl_default_status &rArr; net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>light_ctl_get</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, device_composition.o(i.light_ctl_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = light_ctl_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>light_ctl_set</STRONG> (Thumb, 380 bytes, Stack size 64 bytes, device_composition.o(i.light_ctl_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = light_ctl_set &rArr; light_ctl_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_tt_values
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_publish
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>light_ctl_set_unack</STRONG> (Thumb, 338 bytes, Stack size 64 bytes, device_composition.o(i.light_ctl_set_unack))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = light_ctl_set_unack &rArr; light_ctl_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_tt_values
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>light_ctl_status</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, device_composition.o(i.light_ctl_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = light_ctl_status &rArr; net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>light_ctl_temp_get</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, device_composition.o(i.light_ctl_temp_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = light_ctl_temp_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>light_ctl_temp_range_get</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, device_composition.o(i.light_ctl_temp_range_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = light_ctl_temp_range_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[3dc]"></a>light_ctl_temp_range_publish</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, device_composition.o(i.light_ctl_temp_range_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = light_ctl_temp_range_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_set_unack
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_set
</UL>

<P><STRONG><a name="[82]"></a>light_ctl_temp_range_set</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, device_composition.o(i.light_ctl_temp_range_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = light_ctl_temp_range_set &rArr; light_ctl_temp_range_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_setunack
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_publish
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>light_ctl_temp_range_set_unack</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, device_composition.o(i.light_ctl_temp_range_set_unack))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = light_ctl_temp_range_set_unack &rArr; light_ctl_temp_range_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_setunack
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[3dd]"></a>light_ctl_temp_range_setunack</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, device_composition.o(i.light_ctl_temp_range_setunack))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = light_ctl_temp_range_setunack &rArr; net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_set_unack
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_range_set
</UL>

<P><STRONG><a name="[85]"></a>light_ctl_temp_range_status</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, device_composition.o(i.light_ctl_temp_range_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = light_ctl_temp_range_status &rArr; net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>light_ctl_temp_set</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, device_composition.o(i.light_ctl_temp_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = light_ctl_temp_set &rArr; light_ctl_temp_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_tt_values
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>light_ctl_temp_set_unack</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, device_composition.o(i.light_ctl_temp_set_unack))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = light_ctl_temp_set_unack &rArr; light_ctl_temp_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_tt_values
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>light_ctl_temp_status</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, device_composition.o(i.light_ctl_temp_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = light_ctl_temp_status &rArr; net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>light_hsl_get</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, device_composition.o(i.light_hsl_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = light_hsl_get &rArr; light_lightness_status_t &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_status_t
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>light_hsl_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, device_composition.o(i.light_hsl_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = light_hsl_set &rArr; light_HSL_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set_unack
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_HSL_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>light_hsl_set_unack</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, device_composition.o(i.light_hsl_set_unack))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = light_hsl_set_unack &rArr; net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>light_lightness_default_get</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, device_composition.o(i.light_lightness_default_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = light_lightness_default_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[3e2]"></a>light_lightness_default_publish</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, device_composition.o(i.light_lightness_default_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = light_lightness_default_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_set_unack
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_set
</UL>

<P><STRONG><a name="[72]"></a>light_lightness_default_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, device_composition.o(i.light_lightness_default_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = light_lightness_default_set &rArr; light_lightness_default_set_unack &rArr; light_lightness_default_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_set_unack
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_publish
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>light_lightness_default_set_unack</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, device_composition.o(i.light_lightness_default_set_unack))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = light_lightness_default_set_unack &rArr; light_lightness_default_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_publish
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_default_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>light_lightness_default_status</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, device_composition.o(i.light_lightness_default_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = light_lightness_default_status &rArr; net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>light_lightness_get</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, device_composition.o(i.light_lightness_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = light_lightness_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>light_lightness_last_get</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, device_composition.o(i.light_lightness_last_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = light_lightness_last_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>light_lightness_last_status</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, device_composition.o(i.light_lightness_last_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = light_lightness_last_status &rArr; net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>light_lightness_linear_get</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, device_composition.o(i.light_lightness_linear_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = light_lightness_linear_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>light_lightness_linear_set</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, device_composition.o(i.light_lightness_linear_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = light_lightness_linear_set &rArr; light_lightness_linear_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_tt_values
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>light_lightness_linear_set_unack</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, device_composition.o(i.light_lightness_linear_set_unack))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = light_lightness_linear_set_unack &rArr; light_lightness_linear_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_tt_values
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>light_lightness_linear_status</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, device_composition.o(i.light_lightness_linear_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = light_lightness_linear_status &rArr; net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>light_lightness_range_get</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, device_composition.o(i.light_lightness_range_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = light_lightness_range_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[3e7]"></a>light_lightness_range_publish</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, device_composition.o(i.light_lightness_range_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = light_lightness_range_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_set_unack
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_set
</UL>

<P><STRONG><a name="[74]"></a>light_lightness_range_set</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, device_composition.o(i.light_lightness_range_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = light_lightness_range_set &rArr; light_lightness_range_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_setunack
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_publish
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>light_lightness_range_set_unack</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, device_composition.o(i.light_lightness_range_set_unack))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = light_lightness_range_set_unack &rArr; light_lightness_range_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_setunack
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[3e8]"></a>light_lightness_range_setunack</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, device_composition.o(i.light_lightness_range_setunack))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = light_lightness_range_setunack &rArr; net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_set_unack
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_range_set
</UL>

<P><STRONG><a name="[7a]"></a>light_lightness_range_status</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, device_composition.o(i.light_lightness_range_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = light_lightness_range_status &rArr; net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>light_lightness_set</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, device_composition.o(i.light_lightness_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = light_lightness_set &rArr; light_lightness_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_tt_values
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>light_lightness_set_unack</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, device_composition.o(i.light_lightness_set_unack))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = light_lightness_set_unack &rArr; light_lightness_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_tt_values
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>light_lightness_status</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, device_composition.o(i.light_lightness_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = light_lightness_status &rArr; net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[3df]"></a>light_lightness_status_t</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, device_composition.o(i.light_lightness_status_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = light_lightness_status_t &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_get
</UL>

<P><STRONG><a name="[8b]"></a>vnd_get</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, device_composition.o(i.vnd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = vnd_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le32
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>vnd_set</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, device_composition.o(i.vnd_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vnd_set &rArr; gap_beacon_disable &rArr; Host2Mesh_msg_send &rArr; btstack_memory_dtbt_msg_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_led_command
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_beacon_disable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>vnd_set_unack</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, device_composition.o(i.vnd_set_unack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vnd_set_unack &rArr; net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>vnd_status</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, device_composition.o(i.vnd_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vnd_status &rArr; net_buf_simple_pull_le32 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le32
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_composition.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>ceiling</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, state_binding.o(i.ceiling))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ceiling &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actual_to_linear
</UL>

<P><STRONG><a name="[46b]"></a>constrain_lightness</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, state_binding.o(i.constrain_lightness))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_binding
</UL>

<P><STRONG><a name="[46a]"></a>constrain_lightness2</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, state_binding.o(i.constrain_lightness2))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_binding
</UL>

<P><STRONG><a name="[343]"></a>constrain_target_lightness</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, state_binding.o(i.constrain_target_lightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = constrain_target_lightness &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_lightness_target_values
</UL>

<P><STRONG><a name="[346]"></a>level_to_light_ctl_temp</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, state_binding.o(i.level_to_light_ctl_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = level_to_light_ctl_temp &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_binding
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temp_target_values
</UL>

<P><STRONG><a name="[342]"></a>light_ctl_temp_to_level</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, state_binding.o(i.light_ctl_temp_to_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = light_ctl_temp_to_level &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_binding
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temp_target_values
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_lightness_target_values
</UL>

<P><STRONG><a name="[3cd]"></a>ble_npl_callout_set_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, transition.o(i.ble_npl_callout_set_arg))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_handler
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_handler
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_handler
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_handler
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_handler
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_handler
</UL>

<P><STRONG><a name="[20b]"></a>ble_npl_callout_stop</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, transition.o(i.ble_npl_callout_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_npl_callout_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_work_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_work_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_work_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_work_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_work_handler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_work_handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_work_handler
</UL>

<P><STRONG><a name="[3cf]"></a>ble_npl_event_get_arg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, transition.o(i.ble_npl_event_get_arg))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_tt_handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_tt_handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_tt_handler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_tt_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_tt_handler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_tt_handler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_tt_handler
</UL>

<P><STRONG><a name="[3ce]"></a>ble_npl_time_ms_to_ticks32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, transition.o(i.ble_npl_time_ms_to_ticks32))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_tt_handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_tt_handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_tt_handler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_tt_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_tt_handler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_tt_handler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_tt_handler
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_handler
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_handler
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_handler
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_handler
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_handler
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_temp_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_lightness_handler
</UL>

<P><STRONG><a name="[3d2]"></a>bound_states_transition_type_reassignment</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, transition.o(i.bound_states_transition_type_reassignment))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_tt_values
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_tt_values
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_tt_values
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_tt_values
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_tt_values
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_tt_values
</UL>

<P><STRONG><a name="[52]"></a>dummy_timer_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, transition.o(i.dummy_timer_handler))
<BR>[Address Reference Count : 1]<UL><LI> transition.o(i.transition_timers_init)
</UL>
<P><STRONG><a name="[38]"></a>level_lightness_tt_handler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, transition.o(i.level_lightness_tt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = level_lightness_tt_handler &rArr; npl_freertos_callout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_event_get_arg
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transition.o(i.level_lightness_handler)
</UL>
<P><STRONG><a name="[4c]"></a>level_lightness_work_handler</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, transition.o(i.level_lightness_work_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = level_lightness_work_handler &rArr; state_binding &rArr; linear_to_actual &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_binding
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_light_state
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transition.o(i.transition_timers_init)
</UL>
<P><STRONG><a name="[39]"></a>level_temp_tt_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, transition.o(i.level_temp_tt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = level_temp_tt_handler &rArr; npl_freertos_callout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_event_get_arg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transition.o(i.level_temp_handler)
</UL>
<P><STRONG><a name="[4d]"></a>level_temp_work_handler</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, transition.o(i.level_temp_work_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = level_temp_work_handler &rArr; state_binding &rArr; linear_to_actual &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_binding
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_light_state
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transition.o(i.transition_timers_init)
</UL>
<P><STRONG><a name="[3b]"></a>light_ctl_temp_tt_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, transition.o(i.light_ctl_temp_tt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = light_ctl_temp_tt_handler &rArr; npl_freertos_callout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_event_get_arg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transition.o(i.light_ctl_temp_handler)
</UL>
<P><STRONG><a name="[51]"></a>light_ctl_temp_work_handler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, transition.o(i.light_ctl_temp_work_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = light_ctl_temp_work_handler &rArr; state_binding &rArr; linear_to_actual &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_binding
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_light_state
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transition.o(i.transition_timers_init)
</UL>
<P><STRONG><a name="[3a]"></a>light_ctl_tt_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, transition.o(i.light_ctl_tt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = light_ctl_tt_handler &rArr; npl_freertos_callout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_event_get_arg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transition.o(i.light_ctl_handler)
</UL>
<P><STRONG><a name="[50]"></a>light_ctl_work_handler</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, transition.o(i.light_ctl_work_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = light_ctl_work_handler &rArr; state_binding &rArr; linear_to_actual &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_binding
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_light_state
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transition.o(i.transition_timers_init)
</UL>
<P><STRONG><a name="[3c]"></a>light_lightness_actual_tt_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, transition.o(i.light_lightness_actual_tt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = light_lightness_actual_tt_handler &rArr; npl_freertos_callout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_event_get_arg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transition.o(i.light_lightness_actual_handler)
</UL>
<P><STRONG><a name="[4e]"></a>light_lightness_actual_work_handler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, transition.o(i.light_lightness_actual_work_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = light_lightness_actual_work_handler &rArr; state_binding &rArr; linear_to_actual &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_binding
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_light_state
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transition.o(i.transition_timers_init)
</UL>
<P><STRONG><a name="[3d]"></a>light_lightness_linear_tt_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, transition.o(i.light_lightness_linear_tt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = light_lightness_linear_tt_handler &rArr; npl_freertos_callout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_event_get_arg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transition.o(i.light_lightness_linear_handler)
</UL>
<P><STRONG><a name="[4f]"></a>light_lightness_linear_work_handler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, transition.o(i.light_lightness_linear_work_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = light_lightness_linear_work_handler &rArr; state_binding &rArr; linear_to_actual &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_binding
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_light_state
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transition.o(i.transition_timers_init)
</UL>
<P><STRONG><a name="[45]"></a>onoff_tt_handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, transition.o(i.onoff_tt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = onoff_tt_handler &rArr; npl_freertos_callout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_time_ms_to_ticks32
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_event_get_arg
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transition.o(i.onoff_handler)
</UL>
<P><STRONG><a name="[4b]"></a>onoff_work_handler</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, transition.o(i.onoff_work_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = onoff_work_handler &rArr; state_binding &rArr; linear_to_actual &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_binding
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_light_state
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_npl_callout_stop
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transition.o(i.transition_timers_init)
</UL>
<P><STRONG><a name="[3d3]"></a>tt_values_calculator</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, transition.o(i.tt_values_calculator))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tt_values_calculator &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onoff_tt_values
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_linear_tt_values
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_actual_tt_values
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_tt_values
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_temp_tt_values
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_tt_values
</UL>

<P><STRONG><a name="[145]"></a>NET_BUF_SIMPLE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, access.o(i.NET_BUF_SIMPLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NET_BUF_SIMPLE &rArr; os_msys_get &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_start
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_retransmit
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
</UL>

<P><STRONG><a name="[2c7]"></a>find_op</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, access.o(i.find_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = find_op &rArr; model_has_key &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_find_group
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_has_key
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_recv
</UL>

<P><STRONG><a name="[2c6]"></a>get_opcode</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, access.o(i.get_opcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_opcode &rArr; net_buf_simple_pull_be16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_be16
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_recv
</UL>

<P><STRONG><a name="[1f]"></a>mod_init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, access.o(i.mod_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mod_init &rArr; k_delayed_work_init &rArr; ble_npl_callout_init &rArr; npl_freertos_callout_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_add_arg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> access.o(i.bt_mesh_comp_register)
</UL>
<P><STRONG><a name="[43]"></a>mod_publish</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, access.o(i.mod_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = mod_publish &rArr; bt_mesh_model_publish &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get_32
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_pub_period_get
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_retransmit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> access.o(i.mod_init)
</UL>
<P><STRONG><a name="[383]"></a>model_has_key</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, access.o(i.model_has_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = model_has_key &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_send
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_op
</UL>

<P><STRONG><a name="[2c4]"></a>model_send</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, access.o(i.model_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_is_provisioned
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_send
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_has_key
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_start
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
</UL>

<P><STRONG><a name="[261]"></a>modlog_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, access.o(i.modlog_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_start
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_recv
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_get
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_comp_unprovision
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_comp_provision
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_sent
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_period
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_send
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_has_key
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_publish
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_opcode
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
</UL>

<P><STRONG><a name="[2c0]"></a>net_buf_simple_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, access.o(i.net_buf_simple_init))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_retransmit
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_publish
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
</UL>

<P><STRONG><a name="[41f]"></a>next_period</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, access.o(i.next_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = next_period &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get_32
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_pub_period_get
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish_sent
</UL>

<P><STRONG><a name="[40b]"></a>publish_retransmit</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, access.o(i.publish_retransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = publish_retransmit &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_send
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_transmit_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_find
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_elem
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_publish
</UL>

<P><STRONG><a name="[92]"></a>publish_sent</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, access.o(i.publish_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = publish_sent &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_period
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> access.o(.constdata)
</UL>
<P><STRONG><a name="[19]"></a>adv_alloc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adv.o(i.adv_alloc))
<BR>[Address Reference Count : 1]<UL><LI> adv.o(i.bt_mesh_adv_create)
</UL>
<P><STRONG><a name="[17d]"></a>adv_send</STRONG> (Thumb, 384 bytes, Stack size 64 bytes, adv.o(i.adv_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = adv_send &rArr; bt_le_adv_start &rArr; ble_adv_conf_adv_instance &rArr; ble_gap_ext_adv_configure &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_sleep
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_stop
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_start
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_adv_thread
</UL>

<P><STRONG><a name="[1e8]"></a>bt_mesh_scan_cb</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, adv.o(i.bt_mesh_scan_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = bt_mesh_scan_cb &rArr; bt_mesh_net_recv &rArr; bt_mesh_trans_recv &rArr; trans_seg &rArr; ctl_recv &rArr; bt_mesh_friend_req &rArr; friend_cred_create &rArr; friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_adv_recv
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_recv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_gap_mesh_cb
</UL>

<P><STRONG><a name="[17f]"></a>modlog_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adv.o(i.modlog_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_cb
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_send
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set_white_list
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_update
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_send
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_adv_start
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_adv_set_data
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_adv_rsp_set_data
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_adv_configure
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_gap_mesh_cb
</UL>

<P><STRONG><a name="[97]"></a>beacon_complete</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, beacon.o(i.beacon_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = beacon_complete &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get_32
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> beacon.o(.constdata)
</UL>
<P><STRONG><a name="[1b]"></a>beacon_send</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, beacon.o(i.beacon_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = beacon_send &rArr; unprovisioned_beacon_send &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_is_provisioned
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_prov_active
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_get
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprovisioned_beacon_send
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_send
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> beacon.o(i.bt_mesh_beacon_init)
</UL>
<P><STRONG><a name="[1c7]"></a>modlog_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, beacon.o(i.modlog_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_create
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprovisioned_beacon_send
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unprov_beacon_recv
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_send
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_beacon_recv
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_complete
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_recv
</UL>

<P><STRONG><a name="[246]"></a>secure_beacon_recv</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, beacon.o(i.secure_beacon_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = secure_beacon_recv &rArr; bt_mesh_subnet_find &rArr; auth_match &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_be32
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_find
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_sec_update
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_iv_update
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_beacon_update
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_kr_update
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_sec_update_done
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_get
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_ivu_initiator
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_recv
</UL>

<P><STRONG><a name="[1cc]"></a>secure_beacon_send</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, beacon.o(i.secure_beacon_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = secure_beacon_send &rArr; bt_mesh_proxy_beacon_send &rArr;  bt_mesh_proxy_beacon_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get_32
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_beacon_send
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_create
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_send
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
</UL>

<P><STRONG><a name="[244]"></a>unprov_beacon_recv</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, beacon.o(i.unprov_beacon_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = unprov_beacon_recv &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_recv
</UL>

<P><STRONG><a name="[1cd]"></a>unprovisioned_beacon_send</STRONG> (Thumb, 336 bytes, Stack size 104 bytes, beacon.o(i.unprovisioned_beacon_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = unprovisioned_beacon_send &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_be16
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_authen_TMO
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_get
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_aes_cmac
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_send
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_create
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
</UL>

<P><STRONG><a name="[146]"></a>NET_BUF_SIMPLE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cfg_cli.o(i.NET_BUF_SIMPLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NET_BUF_SIMPLE &rArr; os_msys_get &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_app_key_add
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
</UL>

<P><STRONG><a name="[24b]"></a>cli_prepare</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cfg_cli.o(i.cli_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cli_prepare &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_app_key_add
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
</UL>

<P><STRONG><a name="[24d]"></a>cli_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cfg_cli.o(i.cli_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_reset &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_app_key_add
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
</UL>

<P><STRONG><a name="[250]"></a>mod_app_bind</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, cfg_cli.o(i.mod_app_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = mod_app_bind &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_reset
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_prepare
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_mod_app_bind_vnd
</UL>

<P><STRONG><a name="[24c]"></a>modlog_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cfg_cli.o(i.modlog_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_cli_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_app_key_add
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_prepare
</UL>

<P><STRONG><a name="[147]"></a>NET_BUF_SIMPLE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cfg_srv.o(i.NET_BUF_SIMPLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NET_BUF_SIMPLE &rArr; os_msys_get &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get_vnd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_unbind
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_get
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout_get
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_sub_send_status
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pub_send_status
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_comp_data_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ttl_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ttl_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_update
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_del
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_add
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_key_status
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_sub_status
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_pub_status
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_krp_status
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gatt_proxy_status
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_status
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_get
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_transmit_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_transmit_get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_get
</UL>

<P><STRONG><a name="[15b]"></a>_mod_pub_set</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, cfg_srv.o(i._mod_pub_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _mod_pub_set &rArr; bt_mesh_store_mod_pub &rArr; schedule_store &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_find
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_pub_period_get
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_mod_pub
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_va_set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_set
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_unbind
</UL>

<P><STRONG><a name="[1a]"></a>_mod_unbind</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cfg_srv.o(i._mod_unbind))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _mod_unbind &rArr; mod_unbind &rArr; _mod_pub_set &rArr; bt_mesh_store_mod_pub &rArr; schedule_store &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_unbind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(i.bt_mesh_app_key_del)
</UL>
<P><STRONG><a name="[99]"></a>app_key_add</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, cfg_srv.o(i.app_key_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = app_key_add &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_idx_unpack
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_idx_pack
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>app_key_del</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, cfg_srv.o(i.app_key_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = app_key_del &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_find
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_idx_unpack
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_idx_pack
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>app_key_get</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, cfg_srv.o(i.app_key_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = app_key_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_idx_pack
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[408]"></a>app_key_is_valid</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, cfg_srv.o(i.app_key_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_key_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_unbind
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_bind
</UL>

<P><STRONG><a name="[9a]"></a>app_key_update</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, cfg_srv.o(i.app_key_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = app_key_update &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_idx_unpack
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_idx_pack
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>beacon_get</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, cfg_srv.o(i.beacon_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = beacon_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>beacon_set</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, cfg_srv.o(i.beacon_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = beacon_set &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_enable
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_disable
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[353]"></a>comp_add_elem</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, cfg_srv.o(i.comp_add_elem))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = comp_add_elem &rArr; net_buf_simple_add_u8 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_get_page_0
</UL>

<P><STRONG><a name="[354]"></a>comp_get_page_0</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, cfg_srv.o(i.comp_get_page_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = comp_get_page_0 &rArr; comp_add_elem &rArr; net_buf_simple_add_u8 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_comp_get
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_add_elem
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_comp_data_get
</UL>

<P><STRONG><a name="[36b]"></a>create_mod_app_status</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, cfg_srv.o(i.create_mod_app_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = create_mod_app_status &rArr; bt_mesh_model_msg_init &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_unbind
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
</UL>

<P><STRONG><a name="[9f]"></a>default_ttl_get</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, cfg_srv.o(i.default_ttl_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = default_ttl_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_default_ttl_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>default_ttl_set</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, cfg_srv.o(i.default_ttl_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = default_ttl_set &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_cfg
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_default_ttl_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>dev_comp_data_get</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, cfg_srv.o(i.dev_comp_data_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = dev_comp_data_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_get_page_0
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>friend_get</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, cfg_srv.o(i.friend_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = friend_get &rArr; send_friend_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>friend_set</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, cfg_srv.o(i.friend_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = friend_set &rArr; send_friend_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_send
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_cfg
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear_net_idx
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>gatt_proxy_get</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, cfg_srv.o(i.gatt_proxy_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = gatt_proxy_get &rArr; send_gatt_proxy_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gatt_proxy_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>gatt_proxy_set</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, cfg_srv.o(i.gatt_proxy_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = gatt_proxy_set &rArr; send_gatt_proxy_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_send
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_update
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_cfg
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_identity_stop
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_gatt_disconnect
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_gatt_proxy_get
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gatt_proxy_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[3ab]"></a>get_model</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, cfg_srv.o(i.get_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_model &rArr; net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_find_vnd
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_find
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_overwrite
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_del
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_add
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_overwrite
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_del_all
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_del
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_add
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_va_set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_unbind
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_get
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
</UL>

<P><STRONG><a name="[3b1]"></a>hb_log</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cfg_srv.o(i.hb_log))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_sub_send_status
</UL>

<P><STRONG><a name="[329]"></a>hb_pub_disable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cfg_srv.o(i.hb_pub_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hb_pub_disable &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_pub_set
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_del
</UL>

<P><STRONG><a name="[3ad]"></a>hb_pub_send_status</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, cfg_srv.o(i.hb_pub_send_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = hb_pub_send_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_pub_set
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_pub_get
</UL>

<P><STRONG><a name="[1d]"></a>hb_publish</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, cfg_srv.o(i.hb_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = hb_publish &rArr; hb_send &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_send
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pwr2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(i.bt_mesh_cfg_srv_init)
</UL>
<P><STRONG><a name="[3af]"></a>hb_pwr2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cfg_srv.o(i.hb_pwr2))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_sub_set
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_pub_set
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_publish
</UL>

<P><STRONG><a name="[2be]"></a>hb_send</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, cfg_srv.o(i.hb_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = hb_send &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_relay_get
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_transmit_get
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_elem
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ctl_send
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_gatt_proxy_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_publish
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_set
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_status_changed
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_set
</UL>

<P><STRONG><a name="[3b0]"></a>hb_sub_send_status</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, cfg_srv.o(i.hb_sub_send_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = hb_sub_send_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_log
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_sub_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_sub_get
</UL>

<P><STRONG><a name="[c2]"></a>heartbeat_pub_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cfg_srv.o(i.heartbeat_pub_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = heartbeat_pub_get &rArr; hb_pub_send_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pub_send_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>heartbeat_pub_set</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, cfg_srv.o(i.heartbeat_pub_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = heartbeat_pub_set &rArr; hb_pub_send_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pwr2
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pub_send_status
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pub_disable
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_submit
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_hb_pub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>heartbeat_sub_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cfg_srv.o(i.heartbeat_sub_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = heartbeat_sub_get &rArr; hb_sub_send_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_sub_send_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>heartbeat_sub_set</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, cfg_srv.o(i.heartbeat_sub_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = heartbeat_sub_set &rArr; hb_sub_send_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_primary_addr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_sub_send_status
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pwr2
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_set_hb_sub_dst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>key_idx_pack</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cfg_srv.o(i.key_idx_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = key_idx_pack &rArr; net_buf_simple_add_u8 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_update
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_del
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_add
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_get
</UL>

<P><STRONG><a name="[189]"></a>key_idx_unpack</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cfg_srv.o(i.key_idx_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = key_idx_unpack &rArr; net_buf_simple_pull &rArr; os_mbuf_adj &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_le16
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_update
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_del
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_add
</UL>

<P><STRONG><a name="[c0]"></a>krp_get</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, cfg_srv.o(i.krp_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = krp_get &rArr; send_krp_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_krp_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>krp_set</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, cfg_srv.o(i.krp_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = krp_set &rArr; send_krp_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_beacon_update
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_refresh
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_revoke_keys
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_krp_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>lpn_timeout_get</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, cfg_srv.o(i.lpn_timeout_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = lpn_timeout_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_remaining_get
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>mod_app_bind</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, cfg_srv.o(i.mod_app_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = mod_app_bind &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_mod_app_status
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>mod_app_get</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, cfg_srv.o(i.mod_app_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = mod_app_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>mod_app_unbind</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, cfg_srv.o(i.mod_app_unbind))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = mod_app_unbind &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_mod_app_status
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_unbind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>mod_pub_get</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, cfg_srv.o(i.mod_pub_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = mod_pub_get &rArr; send_mod_pub_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_pub_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>mod_pub_set</STRONG> (Thumb, 328 bytes, Stack size 96 bytes, cfg_srv.o(i.mod_pub_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = mod_pub_set &rArr; send_mod_pub_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mod_pub_set
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_pub_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>mod_pub_va_set</STRONG> (Thumb, 362 bytes, Stack size 80 bytes, cfg_srv.o(i.mod_pub_va_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = mod_pub_va_set &rArr; send_mod_pub_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mod_pub_set
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;va_add
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_pub_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[1c]"></a>mod_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cfg_srv.o(i.mod_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mod_reset &rArr; bt_mesh_store_mod_sub &rArr; schedule_store &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_list_clear
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_mod_sub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(i.bt_mesh_cfg_reset)
</UL>
<P><STRONG><a name="[aa]"></a>mod_sub_add</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, cfg_srv.o(i.mod_sub_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = mod_sub_add &rArr; send_mod_sub_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_find_group
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_mod_sub
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_group_add
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_sub_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>mod_sub_del</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, cfg_srv.o(i.mod_sub_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = mod_sub_del &rArr; send_mod_sub_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_find_group
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_mod_sub
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_group_del
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_sub_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>mod_sub_del_all</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, cfg_srv.o(i.mod_sub_del_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = mod_sub_del_all &rArr; send_mod_sub_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_list_clear
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_mod_sub
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_group_del
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_sub_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>mod_sub_get</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, cfg_srv.o(i.mod_sub_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = mod_sub_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_find
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>mod_sub_get_vnd</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, cfg_srv.o(i.mod_sub_get_vnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = mod_sub_get_vnd &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_find_vnd
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[40c]"></a>mod_sub_list_clear</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cfg_srv.o(i.mod_sub_list_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mod_sub_list_clear &rArr; bt_mesh_label_uuid_get &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_label_uuid_get
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;va_del
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_overwrite
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_overwrite
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_del_all
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_reset
</UL>

<P><STRONG><a name="[ae]"></a>mod_sub_overwrite</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, cfg_srv.o(i.mod_sub_overwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = mod_sub_overwrite &rArr; send_mod_sub_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_list_clear
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_mod_sub
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_group_del
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_group_add
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_sub_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>mod_sub_va_add</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, cfg_srv.o(i.mod_sub_va_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = mod_sub_va_add &rArr; send_mod_sub_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_find_group
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_mod_sub
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_group_add
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;va_add
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_sub_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>mod_sub_va_del</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, cfg_srv.o(i.mod_sub_va_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = mod_sub_va_del &rArr; send_mod_sub_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_find_group
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_mod_sub
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_group_del
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;va_del
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_sub_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>mod_sub_va_overwrite</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, cfg_srv.o(i.mod_sub_va_overwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = mod_sub_va_overwrite &rArr; send_mod_sub_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_find
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_list_clear
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_mod_sub
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_group_del
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_group_add
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;va_add
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_sub_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>modlog_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cfg_srv.o(i.modlog_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_get
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_srv_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_add
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_overwrite
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_del
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_add
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_overwrite
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_list_clear
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get_vnd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_del_all
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_del
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_add
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_va_set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_unbind
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_get
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_app_bind
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout_get
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krp_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krp_get
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_sub_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_sub_get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_pub_set
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_pub_get
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_sub_send_status
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_send
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_publish
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pub_send_status
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pub_disable
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_get
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_comp_data_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ttl_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ttl_get
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_add_elem
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_set
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_update
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_del
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_add
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mod_pub_set
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_unbind
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_bind
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_del
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_label_uuid_get
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_heartbeat
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_del
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_key_status
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_sub_status
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mod_pub_status
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_krp_status
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gatt_proxy_status
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_status
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_identity_get
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_transmit_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_transmit_get
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_get
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_del
</UL>

<P><STRONG><a name="[b3]"></a>net_key_add</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, cfg_srv.o(i.net_key_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = net_key_add &rArr; send_net_key_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_beacon_send
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_beacon_update
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_update
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_subnet
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_keys_create
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_key_status
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>net_key_del</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cfg_srv.o(i.net_key_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = net_key_del &rArr; send_net_key_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_del
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_key_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>net_key_get</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, cfg_srv.o(i.net_key_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = net_key_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_idx_pack
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>net_key_update</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, cfg_srv.o(i.net_key_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = net_key_update &rArr; send_net_key_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_beacon_update
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_update
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_subnet
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_keys_create
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_key_status
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>net_transmit_get</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, cfg_srv.o(i.net_transmit_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = net_transmit_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_transmit_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>net_transmit_set</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, cfg_srv.o(i.net_transmit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = net_transmit_set &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_transmit_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>node_identity_get</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, cfg_srv.o(i.node_identity_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = node_identity_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>node_identity_set</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, cfg_srv.o(i.node_identity_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = node_identity_set &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_update
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_identity_stop
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_identity_start
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_gatt_proxy_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>node_reset</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, cfg_srv.o(i.node_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = node_reset &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[1e]"></a>node_reset_after</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cfg_srv.o(i.node_reset_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = node_reset_after &rArr; bt_mesh_reset &rArr; bt_mesh_tx_reset &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(i.bt_mesh_cfg_srv_init)
</UL>
<P><STRONG><a name="[a5]"></a>relay_get</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, cfg_srv.o(i.relay_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = relay_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_relay_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_relay_retransmit_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>relay_set</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, cfg_srv.o(i.relay_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = relay_set &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_relay_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_send
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_cfg
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_relay_retransmit_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfg_srv.o(.constdata)
</UL>
<P><STRONG><a name="[389]"></a>send_friend_status</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, cfg_srv.o(i.send_friend_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = send_friend_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_get
</UL>

<P><STRONG><a name="[392]"></a>send_gatt_proxy_status</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, cfg_srv.o(i.send_gatt_proxy_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = send_gatt_proxy_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_gatt_proxy_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_get
</UL>

<P><STRONG><a name="[3cb]"></a>send_krp_status</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, cfg_srv.o(i.send_krp_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = send_krp_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krp_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krp_get
</UL>

<P><STRONG><a name="[409]"></a>send_mod_pub_status</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, cfg_srv.o(i.send_mod_pub_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = send_mod_pub_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_va_set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_get
</UL>

<P><STRONG><a name="[411]"></a>send_mod_sub_status</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, cfg_srv.o(i.send_mod_sub_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = send_mod_sub_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_overwrite
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_del
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_add
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_overwrite
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_del_all
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_del
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_add
</UL>

<P><STRONG><a name="[41e]"></a>send_net_key_status</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, cfg_srv.o(i.send_net_key_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = send_net_key_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_add
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_update
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_del
</UL>

<P><STRONG><a name="[40a]"></a>va_add</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, cfg_srv.o(i.va_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = va_add &rArr; bt_mesh_virtual_addr &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_virtual_addr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_overwrite
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_add
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_pub_va_set
</UL>

<P><STRONG><a name="[412]"></a>va_del</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, cfg_srv.o(i.va_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = va_del &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_va_del
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sub_list_clear
</UL>

<P><STRONG><a name="[230]"></a>bt_mesh_aes_cmac_one</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, crypto.o(i.bt_mesh_aes_cmac_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_aes_cmac
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_conf_salt
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k3
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k2
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k1
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_auth
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_s1
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_virtual_addr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k4
</UL>

<P><STRONG><a name="[295]"></a>bt_mesh_s1</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, crypto.o(i.bt_mesh_s1))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_aes_cmac_one
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k3
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k2
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_id128
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_virtual_addr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k4
</UL>

<P><STRONG><a name="[233]"></a>create_app_nonce</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, crypto.o(i.create_app_nonce))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = create_app_nonce
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_be32
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_encrypt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_decrypt
</UL>

<P><STRONG><a name="[2d0]"></a>create_net_nonce</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, crypto.o(i.create_net_nonce))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = create_net_nonce
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_be32
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encrypt
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_decrypt
</UL>

<P><STRONG><a name="[2cf]"></a>create_proxy_nonce</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, crypto.o(i.create_proxy_nonce))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = create_proxy_nonce
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_be32
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encrypt
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_decrypt
</UL>

<P><STRONG><a name="[248]"></a>k_sem_take</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, crypto.o(i.k_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_time_ms_to_ticks
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ccm_encrypt
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ccm_decrypt
</UL>

<P><STRONG><a name="[232]"></a>modlog_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, crypto.o(i.modlog_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_conf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_obfuscate
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encrypt
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_decrypt
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k2
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_fcs_calc
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_auth
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_encrypt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_decrypt
</UL>

<P><STRONG><a name="[1e3]"></a>ble_adv_conf_adv_instance</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, glue.o(i.ble_adv_conf_adv_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ble_adv_conf_adv_instance &rArr; ble_gap_ext_adv_configure &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_adv_stop
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_adv_remove
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ext_adv_configure
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_start
</UL>

<P><STRONG><a name="[207]"></a>ble_npl_callout_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, glue.o(i.ble_npl_callout_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_npl_callout_init &rArr; npl_freertos_callout_init
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_init
</UL>

<P><STRONG><a name="[222]"></a>set_ad</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, glue.o(i.set_ad))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_ad
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_start
</UL>

<P><STRONG><a name="[148]"></a>NET_BUF_SIMPLE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, health_srv.o(i.NET_BUF_SIMPLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NET_BUF_SIMPLE &rArr; os_msys_get &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_health_period_status
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_attention_status
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_test
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_get
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_clear
</UL>

<P><STRONG><a name="[3b5]"></a>_os_mbuf_trailingspace</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, health_srv.o(i._os_mbuf_trailingspace))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_get_registered
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_get_current
</UL>

<P><STRONG><a name="[d2]"></a>attention_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, health_srv.o(i.attention_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = attention_get &rArr; send_attention_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_attention_status
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> health_srv.o(.constdata)
</UL>
<P><STRONG><a name="[23]"></a>attention_off</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, health_srv.o(i.attention_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = attention_off &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> health_srv.o(i.bt_mesh_health_srv_init)
</UL>
<P><STRONG><a name="[d3]"></a>attention_set</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, health_srv.o(i.attention_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = attention_set &rArr; send_attention_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_attention_status
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attention_set_unrel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> health_srv.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>attention_set_unrel</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, health_srv.o(i.attention_set_unrel))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = attention_set_unrel &rArr; bt_mesh_attention &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_attention
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attention_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> health_srv.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>fault_clear</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, health_srv.o(i.fault_clear))
<BR>[Address Reference Count : 1]<UL><LI> health_srv.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>fault_get_cur</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, health_srv.o(i.fault_get_cur))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fault_get_cur &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_faults
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> health_srv.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>fault_get_reg</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, health_srv.o(i.fault_get_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fault_get_reg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_faults
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> health_srv.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>fault_test</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, health_srv.o(i.fault_test))
<BR>[Address Reference Count : 1]<UL><LI> health_srv.o(.constdata)
</UL>
<P><STRONG><a name="[37e]"></a>get_faults</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, health_srv.o(i.get_faults))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_faults
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_get_reg
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_get_cur
</UL>

<P><STRONG><a name="[cb]"></a>health_fault_clear</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, health_srv.o(i.health_fault_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = health_fault_clear &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_get_registered
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> health_srv.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>health_fault_clear_unrel</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, health_srv.o(i.health_fault_clear_unrel))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = health_fault_clear_unrel &rArr; net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> health_srv.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>health_fault_get</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, health_srv.o(i.health_fault_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = health_fault_get &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_get_registered
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> health_srv.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>health_fault_test</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, health_srv.o(i.health_fault_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = health_fault_test &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_get_registered
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> health_srv.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>health_fault_test_unrel</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, health_srv.o(i.health_fault_test_unrel))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = health_fault_test_unrel &rArr; net_buf_simple_pull_le16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_le16
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> health_srv.o(.constdata)
</UL>
<P><STRONG><a name="[3b4]"></a>health_get_current</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, health_srv.o(i.health_get_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = health_get_current &rArr; bt_mesh_model_msg_init &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_comp_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_trailingspace
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_pub_update
</UL>

<P><STRONG><a name="[3b3]"></a>health_get_registered</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, health_srv.o(i.health_get_registered))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = health_get_registered &rArr; bt_mesh_model_msg_init &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_le16
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_os_mbuf_trailingspace
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_test
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_get
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_clear
</UL>

<P><STRONG><a name="[cf]"></a>health_period_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, health_srv.o(i.health_period_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = health_period_get &rArr; send_health_period_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_health_period_status
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> health_srv.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>health_period_set</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, health_srv.o(i.health_period_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = health_period_set &rArr; send_health_period_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_health_period_status
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_period_set_unrel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> health_srv.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>health_period_set_unrel</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, health_srv.o(i.health_period_set_unrel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = health_period_set_unrel &rArr; net_buf_simple_pull_u8 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_period_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> health_srv.o(.constdata)
</UL>
<P><STRONG><a name="[22]"></a>health_pub_update</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, health_srv.o(i.health_pub_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = health_pub_update &rArr; health_get_current &rArr; bt_mesh_model_msg_init &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_get_current
</UL>
<BR>[Address Reference Count : 1]<UL><LI> health_srv.o(i.bt_mesh_health_srv_init)
</UL>
<P><STRONG><a name="[1c0]"></a>modlog_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, health_srv.o(i.modlog_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_health_srv_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_attention
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_health_period_status
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_attention_status
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_pub_update
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_period_set_unrel
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_period_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_period_get
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_get_registered
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_get_current
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_test_unrel
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_test
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_get
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_clear_unrel
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_fault_clear
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attention_set_unrel
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attention_set
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attention_off
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attention_get
</UL>

<P><STRONG><a name="[1c1]"></a>send_attention_status</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, health_srv.o(i.send_attention_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = send_attention_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_remaining_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attention_set
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attention_get
</UL>

<P><STRONG><a name="[3b7]"></a>send_health_period_status</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, health_srv.o(i.send_health_period_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = send_health_period_status &rArr; bt_mesh_model_send &rArr; model_send &rArr; bt_mesh_trans_send &rArr; send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_msg_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_period_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_period_get
</UL>

<P><STRONG><a name="[24]"></a>bt_mesh_gap_event</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mesh.o(i.bt_mesh_gap_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = bt_mesh_gap_event &rArr; ble_adv_gap_mesh_cb &rArr; bt_mesh_scan_cb &rArr; bt_mesh_net_recv &rArr; bt_mesh_trans_recv &rArr; trans_seg &rArr; ctl_recv &rArr; bt_mesh_friend_req &rArr; friend_cred_create &rArr; friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_adv_gap_mesh_cb
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_proxy_gap_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh.o(i.bt_mesh_init)
</UL>
<P><STRONG><a name="[301]"></a>modlog_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mesh.o(i.modlog_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_provision
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_reset
</UL>

<P><STRONG><a name="[149]"></a>NET_BUF_SIMPLE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, prov.o(i.NET_BUF_SIMPLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NET_BUF_SIMPLE &rArr; os_msys_get &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_init
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_start
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pub_key
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_confirm
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_fail_msg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_random
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_invite
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirm
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_ack
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_send_pub_key
</UL>

<P><STRONG><a name="[d5]"></a>ack_complete</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, prov.o(i.ack_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ack_complete &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>adv_buf_create</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, prov.o(i.adv_buf_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = adv_buf_create &rArr; bt_mesh_adv_create &rArr; bt_mesh_adv_create_from_pool &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_create
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_prov_link_establish
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_ctl_send
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_adv
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_ack_send
</UL>

<P><STRONG><a name="[1a2]"></a>atomic_and</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, prov.o(i.atomic_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_and
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_and_clear_bit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_clear_bit
</UL>

<P><STRONG><a name="[1a6]"></a>atomic_clear_bit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, prov.o(i.atomic_clear_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_clear_bit &rArr; atomic_and
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_and
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_link
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
</UL>

<P><STRONG><a name="[1a7]"></a>atomic_or</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, prov.o(i.atomic_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_and_set_bit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set_bit
</UL>

<P><STRONG><a name="[1a9]"></a>atomic_set_bit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, prov.o(i.atomic_set_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_set_bit &rArr; atomic_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_or
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_link
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_gatt_close
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pub_key_ready_for_next
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pub_key_ready
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_pub_key
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_dh_key_cb
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirm
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_complete
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_capabilities
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_open
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_ack
</UL>

<P><STRONG><a name="[1ab]"></a>atomic_test_and_clear_bit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, prov.o(i.atomic_test_and_clear_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atomic_test_and_clear_bit &rArr; atomic_and
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_and
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pub_key_ready_for_next
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pub_key_ready
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_dh_key_cb
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_ack
</UL>

<P><STRONG><a name="[1ae]"></a>atomic_test_and_set_bit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, prov.o(i.atomic_test_and_set_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atomic_test_and_set_bit &rArr; atomic_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_or
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_gatt_open
</UL>

<P><STRONG><a name="[1af]"></a>atomic_test_bit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, prov.o(i.atomic_test_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_test_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_prov_active
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_prov_link_establish
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_adv_recv
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_gatt_close
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_retransmit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_pub_key
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_dh_key_cb
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirm
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_open
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_recv
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_ctl
</UL>

<P><STRONG><a name="[1d5]"></a>bearer_ctl_send</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, prov.o(i.bearer_ctl_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bearer_ctl_send &rArr; net_buf_simple_add_u8 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_be32
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_buf_create
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_reliable
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_clear_tx
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_timeout
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_open
</UL>

<P><STRONG><a name="[269]"></a>bt_mesh_dev_key</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, prov.o(i.bt_mesh_dev_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = bt_mesh_dev_key &rArr; bt_mesh_k1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k1
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_random
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
</UL>

<P><STRONG><a name="[2ff]"></a>bt_mesh_prov_nonce</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, prov.o(i.bt_mesh_prov_nonce))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = bt_mesh_prov_nonce &rArr; bt_mesh_k1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k1
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
</UL>

<P><STRONG><a name="[320]"></a>bt_mesh_session_key</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, prov.o(i.bt_mesh_session_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = bt_mesh_session_key &rArr; bt_mesh_k1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k1
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
</UL>

<P><STRONG><a name="[1]"></a>buf_sent</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, prov.o(i.buf_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = buf_sent &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(.data)
</UL>
<P><STRONG><a name="[352]"></a>close_link</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, prov.o(i.close_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = close_link &rArr; prov_send_fail_msg &rArr; prov_send &rArr; prov_send_adv &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_disable
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_ctl_send
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_clear_bit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_attention
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_con_state
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_gatt_close
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_fail_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pub_key
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_confirm
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_random
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_pub_key
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_msg_recv
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_invite
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_dh_key_cb
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirm
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_send_pub_key
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_start
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_cont
</UL>

<P><STRONG><a name="[384]"></a>free_segments</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, prov.o(i.free_segments))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = free_segments &rArr; net_buf_unref &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_adv
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_clear_tx
</UL>

<P><STRONG><a name="[e1]"></a>gen_prov_ack</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, prov.o(i.gen_prov_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gen_prov_ack &rArr; gen_send_pub_key &rArr; close_link &rArr; prov_send_fail_msg &rArr; prov_send &rArr; prov_send_adv &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_and_clear_bit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_clear_tx
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_send_pub_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(.constdata)
</UL>
<P><STRONG><a name="[3a3]"></a>gen_prov_ack_send</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, prov.o(i.gen_prov_ack_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gen_prov_ack_send &rArr; net_buf_simple_add_u8 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_be32
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_send
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_buf_create
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_msg_recv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_start
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_cont
</UL>

<P><STRONG><a name="[e2]"></a>gen_prov_cont</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, prov.o(i.gen_prov_cont))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = gen_prov_cont &rArr; prov_msg_recv &rArr; close_link &rArr; prov_send_fail_msg &rArr; prov_send &rArr; prov_send_adv &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_msg_recv
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_ack_send
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>gen_prov_ctl</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, prov.o(i.gen_prov_ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gen_prov_ctl &rArr; link_open &rArr; bt_mesh_scan_enable &rArr; ble_gap_ext_disc &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_link
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_open
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(.constdata)
</UL>
<P><STRONG><a name="[2f1]"></a>gen_prov_recv</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, prov.o(i.gen_prov_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gen_prov_recv &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_adv_recv
</UL>

<P><STRONG><a name="[e0]"></a>gen_prov_start</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, prov.o(i.gen_prov_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = gen_prov_start &rArr; prov_msg_recv &rArr; close_link &rArr; prov_send_fail_msg &rArr; prov_send &rArr; prov_send_adv &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_be16
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_msg_recv
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_ack_send
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(.constdata)
</UL>
<P><STRONG><a name="[3a2]"></a>gen_send_pub_key</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, prov.o(i.gen_send_pub_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gen_send_pub_key &rArr; close_link &rArr; prov_send_fail_msg &rArr; prov_send &rArr; prov_send_adv &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pub_key_get
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy_swap
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_buf_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_ack
</UL>

<P><STRONG><a name="[44d]"></a>is_pb_gatt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, prov.o(i.is_pb_gatt))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
</UL>

<P><STRONG><a name="[3a6]"></a>link_ack</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, prov.o(i.link_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = link_ack &rArr; prov_send &rArr; prov_send_adv &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flag_for_adv_sent
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set_bit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_buf_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_ctl
</UL>

<P><STRONG><a name="[3a5]"></a>link_open</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, prov.o(i.link_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = link_open &rArr; bt_mesh_scan_enable &rArr; ble_gap_ext_disc &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmds_put
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_get_adv_addr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_disable
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_ctl_send
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set_bit
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_ctl
</UL>

<P><STRONG><a name="[16b]"></a>modlog_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, prov.o(i.modlog_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_prov_link_establish
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_adv_recv
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_sent
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_ctl_send
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_buf_create
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_complete
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_init
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubkey_reproduce
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_whitelist_remove
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_gatt_recv
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_gatt_open
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_gatt_close
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy_swap
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_start
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pub_key
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_confirm
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pub_key_ready_for_next
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pub_key_ready
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_start
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_adv
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_retransmit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_random
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_pub_key
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_msg_recv
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_invite
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_input_complete
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_failed
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_dh_key_cb
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirm
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_complete
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_clear_tx
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_capabilities
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_timeout
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_open
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_ack
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_send_pub_key
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_start
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_recv
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_ctl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_cont
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_ack_send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_ack
</UL>

<P><STRONG><a name="[2fe]"></a>net_buf_simple_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, prov.o(i.net_buf_simple_init))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_link
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pub_key
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_buf_init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_open
</UL>

<P><STRONG><a name="[2b]"></a>protocol_timeout</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, prov.o(i.protocol_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = protocol_timeout &rArr; prov_whitelist_remove &rArr; bt_mesh_scan_enable &rArr; ble_gap_ext_disc &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_ctl_send
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_link
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_con_state
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_whitelist_remove
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_gatt_close
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(i.bt_mesh_prov_init)
</UL>
<P><STRONG><a name="[447]"></a>prov_auth</STRONG> (Thumb, 402 bytes, Stack size 80 bytes, prov.o(i.prov_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prov_auth &rArr; bt_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set_bit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rand
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_be32
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_start
</UL>

<P><STRONG><a name="[3a8]"></a>prov_buf_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, prov.o(i.prov_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prov_buf_init &rArr; net_buf_simple_add_u8 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_init
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_start
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pub_key
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_confirm
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_fail_msg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_random
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_invite
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirm
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_ack
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_send_pub_key
</UL>

<P><STRONG><a name="[d7]"></a>prov_capabilities</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, prov.o(i.prov_capabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prov_capabilities &rArr; prov_send_fail_msg &rArr; prov_send &rArr; prov_send_adv &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set_bit
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_be16
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_node_alloc
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_start
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_fail_msg
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(.constdata)
</UL>
<P><STRONG><a name="[1d6]"></a>prov_clear_tx</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, prov.o(i.prov_clear_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prov_clear_tx &rArr; free_segments &rArr; net_buf_unref &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_segments
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_prov_link_establish
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_ctl_send
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_link
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_adv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_pub_key
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirm
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_ack
</UL>

<P><STRONG><a name="[de]"></a>prov_complete</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, prov.o(i.prov_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = prov_complete &rArr; bt_mesh_store_node &rArr; store_node &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set_bit
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_node
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_node_added
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>prov_confirm</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, prov.o(i.prov_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = prov_confirm &rArr; send_confirm &rArr; bt_mesh_prov_conf &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set_bit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_con_state
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_confirm
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_clear_tx
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_buf_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>prov_data</STRONG> (Thumb, 438 bytes, Stack size 128 bytes, prov.o(i.prov_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = prov_data &rArr; bt_mesh_provision &rArr; bt_mesh_net_create &rArr; bt_mesh_net_keys_create &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_put
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_disable
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_session_key
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_nonce
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_dev_key
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_clear_bit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_provision
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_be32
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_be16
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_decrypt
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_identity_enable
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_buf_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pb_gatt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>prov_dh_key_cb</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, prov.o(i.prov_dh_key_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = prov_dh_key_cb &rArr; send_confirm &rArr; bt_mesh_prov_conf &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_and_clear_bit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set_bit
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy_swap
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_confirm
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> prov.o(i.prov_pub_key)
<LI> prov.o(i.send_pub_key)
</UL>
<P><STRONG><a name="[df]"></a>prov_failed</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, prov.o(i.prov_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 932<LI>Call Chain = prov_failed &rArr; bt_pub_key_gen &rArr; ble_sm_alg_gen_key_pair &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pub_key_gen
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>prov_input_complete</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, prov.o(i.prov_input_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prov_input_complete &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>prov_invite</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, prov.o(i.prov_invite))
<BR><BR>[Stack]<UL><LI>Max Depth = 940<LI>Call Chain = prov_invite &rArr; pubkey_reproduce &rArr; bt_pub_key_gen &rArr; ble_sm_alg_gen_key_pair &rArr; uECC_make_key &rArr; EccPoint_compute_public_key &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_be16
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_elem_count
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_attention
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pubkey_reproduce
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_buf_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(.constdata)
</UL>
<P><STRONG><a name="[3a4]"></a>prov_msg_recv</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, prov.o(i.prov_msg_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prov_msg_recv &rArr; close_link &rArr; prov_send_fail_msg &rArr; prov_send &rArr; prov_send_adv &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_fcs_check
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_fail_msg
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_ack_send
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_start
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_prov_cont
</UL>

<P><STRONG><a name="[d9]"></a>prov_pub_key</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, prov.o(i.prov_pub_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 964<LI>Call Chain = prov_pub_key &rArr; send_pub_key &rArr; bt_dh_key_gen &rArr; ble_sm_alg_gen_dhkey &rArr; uECC_shared_secret &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set_bit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_dh_key_gen
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_con_state
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy_swap
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pub_key
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_confirm
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_clear_tx
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>prov_random</STRONG> (Thumb, 418 bytes, Stack size 120 bytes, prov.o(i.prov_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = prov_random &rArr; send_prov_data &rArr; bt_mesh_prov_nonce &rArr; bt_mesh_k1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_aes_cmac
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_dev_key
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_conf
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_con_state
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_buf_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(.constdata)
</UL>
<P><STRONG><a name="[29]"></a>prov_retransmit</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, prov.o(i.prov_retransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prov_retransmit &rArr; bt_mesh_scan_enable &rArr; ble_gap_ext_disc &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_disable
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_send
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_link
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(i.bt_mesh_prov_init)
</UL>
<P><STRONG><a name="[3aa]"></a>prov_send</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, prov.o(i.prov_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prov_send &rArr; prov_send_adv &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_con_state
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_send
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_adv
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_start
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pub_key
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_confirm
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_fail_msg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_random
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_invite
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirm
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_ack
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_send_pub_key
</UL>

<P><STRONG><a name="[453]"></a>prov_send_adv</STRONG> (Thumb, 426 bytes, Stack size 48 bytes, prov.o(i.prov_send_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prov_send_adv &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_be16
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_be32
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_segments
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_buf_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_fcs_calc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_reliable
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_clear_tx
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
</UL>

<P><STRONG><a name="[2f4]"></a>prov_send_fail_msg</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, prov.o(i.prov_send_fail_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prov_send_fail_msg &rArr; prov_send &rArr; prov_send_adv &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_gatt_recv
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_prov_data
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_start
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_msg_recv
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_capabilities
</UL>

<P><STRONG><a name="[d8]"></a>prov_start</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, prov.o(i.prov_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prov_start &rArr; prov_send_fail_msg &rArr; prov_send &rArr; prov_send_adv &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_fail_msg
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_auth
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(.constdata)
</UL>
<P><STRONG><a name="[3]"></a>pub_key_ready</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, prov.o(i.pub_key_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = pub_key_ready &rArr; send_pub_key &rArr; bt_dh_key_gen &rArr; ble_sm_alg_gen_dhkey &rArr; uECC_shared_secret &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_and_clear_bit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set_bit
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pub_key
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>pub_key_ready_for_next</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, prov.o(i.pub_key_ready_for_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pub_key_ready_for_next &rArr; atomic_test_and_clear_bit &rArr; atomic_and
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_and_clear_bit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set_bit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prov.o(.data)
</UL>
<P><STRONG><a name="[44c]"></a>send_confirm</STRONG> (Thumb, 424 bytes, Stack size 32 bytes, prov.o(i.send_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = send_confirm &rArr; bt_mesh_prov_conf &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rand
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_conf_salt
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_conf_key
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_conf
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_con_state
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_buf_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_pub_key
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_dh_key_cb
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_confirm
</UL>

<P><STRONG><a name="[452]"></a>send_prov_data</STRONG> (Thumb, 384 bytes, Stack size 64 bytes, prov.o(i.send_prov_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = send_prov_data &rArr; bt_mesh_prov_nonce &rArr; bt_mesh_k1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_be16
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_be32
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_flags
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_session_key
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_nonce
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_dev_key
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_encrypt
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_fail_msg
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_buf_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_random
</UL>

<P><STRONG><a name="[451]"></a>send_pub_key</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, prov.o(i.send_pub_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 940<LI>Call Chain = send_pub_key &rArr; bt_dh_key_gen &rArr; ble_sm_alg_gen_dhkey &rArr; uECC_shared_secret &rArr; EccPoint_mult &rArr; XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_link
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_pub_key_get
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_dh_key_gen
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memcpy_swap
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_buf_init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pub_key_ready
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_pub_key
</UL>

<P><STRONG><a name="[1d9]"></a>send_reliable</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, prov.o(i.send_reliable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = send_reliable &rArr; bt_mesh_adv_send &rArr; net_buf_put &rArr; npl_freertos_eventq_put
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_prov_link_establish
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bearer_ctl_send
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_adv
</UL>

<P><STRONG><a name="[449]"></a>send_start</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, prov.o(i.send_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = send_start &rArr; prov_send &rArr; prov_send_adv &rArr; net_buf_simple_add_be16 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_buf_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_capabilities
</UL>

<P><STRONG><a name="[3a9]"></a>sys_memcpy_swap</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, prov.o(i.sys_memcpy_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sys_memcpy_swap &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pub_key
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_pub_key
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_dh_key_cb
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_send_pub_key
</UL>

<P><STRONG><a name="[14a]"></a>NET_BUF_SIMPLE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, proxy.o(i.NET_BUF_SIMPLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NET_BUF_SIMPLE &rArr; os_msys_get &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_init
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_relay
</UL>

<P><STRONG><a name="[184]"></a>advertise_subnet</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, proxy.o(i.advertise_subnet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = advertise_subnet
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_gatt_proxy_get
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_sub
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_advertise
</UL>

<P><STRONG><a name="[1ce]"></a>beacon_send</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, proxy.o(i.beacon_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = beacon_send &rArr; bt_mesh_beacon_create &rArr; net_buf_simple_add_u8 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_create
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_segment_and_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_beacon_send
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_send_beacons
</UL>

<P><STRONG><a name="[313]"></a>client_filter_match</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, proxy.o(i.client_filter_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = client_filter_match &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_relay
</UL>

<P><STRONG><a name="[5]"></a>dummy_access_cb</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, proxy.o(i.dummy_access_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dummy_access_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_raise_assertion
</UL>
<BR>[Address Reference Count : 2]<UL><LI> proxy.o(.data)
<LI> proxy.o(.data)
</UL>
<P><STRONG><a name="[307]"></a>filter_add</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, proxy.o(i.filter_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = filter_add &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_addr_add
</UL>

<P><STRONG><a name="[306]"></a>filter_remove</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, proxy.o(i.filter_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = filter_remove &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_addr_add
</UL>

<P><STRONG><a name="[37f]"></a>filter_set</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, proxy.o(i.filter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = filter_set &rArr; net_buf_simple_pull_u8 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg
</UL>

<P><STRONG><a name="[315]"></a>find_client</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, proxy.o(i.find_client))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ccc_write
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ccc_write
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_send
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_recv
</UL>

<P><STRONG><a name="[309]"></a>gatt_prov_adv_create</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, proxy.o(i.gatt_prov_adv_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gatt_prov_adv_create &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_get
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_be16
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_adv_start
</UL>

<P><STRONG><a name="[38f]"></a>gatt_proxy_adv_create</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, proxy.o(i.gatt_proxy_adv_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gatt_proxy_adv_create &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_prov_get
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_be16
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_id_adv
</UL>

<P><STRONG><a name="[30b]"></a>gatt_proxy_advertise</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, proxy.o(i.gatt_proxy_advertise))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = gatt_proxy_advertise &rArr; node_id_adv &rArr; bt_le_adv_start &rArr; ble_adv_conf_adv_instance &rArr; ble_gap_ext_adv_configure &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get_32
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_gatt_proxy_get
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_id_adv
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_sub
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_id_adv
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertise_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_adv_start
</UL>

<P><STRONG><a name="[202]"></a>modlog_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, proxy.o(i.modlog_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_handle_set
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_prov_enable
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_prov_disable
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_gatt_disable
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_proxy_gap_event
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_gatt_disconnect
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_filter_status
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_send
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_disconnected
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_connected
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_complete_pdu
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_ccc_write
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_ccc_write
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_id_adv
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_id_adv
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_advertise
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_adv_create
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_prov_adv_create
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_set
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_remove
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_add
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_filter_match
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_send
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_identity_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_segment_and_send
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_recv
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_relay
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_gatt_enable
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_adv_start
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_addr_add
</UL>

<P><STRONG><a name="[1cf]"></a>net_buf_simple_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, proxy.o(i.net_buf_simple_init))
<BR><BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_filter_status
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_connected
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_complete_pdu
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_relay
</UL>

<P><STRONG><a name="[391]"></a>net_id_adv</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, proxy.o(i.net_id_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = net_id_adv &rArr; bt_le_adv_start &rArr; ble_adv_conf_adv_instance &rArr; ble_gap_ext_adv_configure &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_start
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_advertise
</UL>

<P><STRONG><a name="[30a]"></a>next_sub</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, proxy.o(i.next_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = next_sub &rArr; advertise_subnet
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertise_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_advertise
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_adv_start
</UL>

<P><STRONG><a name="[390]"></a>node_id_adv</STRONG> (Thumb, 306 bytes, Stack size 64 bytes, proxy.o(i.node_id_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = node_id_adv &rArr; bt_le_adv_start &rArr; ble_adv_conf_adv_instance &rArr; ble_gap_ext_adv_configure &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_primary_addr
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_le_adv_start
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rand
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_be16
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_encrypt_be
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_adv_create
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_proxy_advertise
</UL>

<P><STRONG><a name="[206]"></a>prov_ccc_write</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, proxy.o(i.prov_ccc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prov_ccc_write &rArr; bt_mesh_pb_gatt_open &rArr; atomic_test_and_set_bit &rArr; atomic_or
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_client
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_gatt_open
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_proxy_gap_event
</UL>

<P><STRONG><a name="[205]"></a>proxy_ccc_write</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, proxy.o(i.proxy_ccc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = proxy_ccc_write &rArr; k_work_submit &rArr; npl_freertos_callout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_submit
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_add_arg
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_client
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_proxy_gap_event
</UL>

<P><STRONG><a name="[455]"></a>proxy_cfg</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, proxy.o(i.proxy_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = proxy_cfg &rArr; bt_mesh_net_decode &rArr; net_find_and_decrypt &rArr; friend_decrypt &rArr; net_decrypt &rArr; bt_mesh_net_decrypt &rArr; bt_mesh_ccm_decrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_be16
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_filter_status
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_set
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_remove
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_add
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_complete_pdu
</UL>

<P><STRONG><a name="[457]"></a>proxy_complete_pdu</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, proxy.o(i.proxy_complete_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = proxy_complete_pdu &rArr; bt_mesh_net_recv &rArr; bt_mesh_trans_recv &rArr; trans_seg &rArr; ctl_recv &rArr; bt_mesh_friend_req &rArr; friend_cred_create &rArr; friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_recv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_recv
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_gatt_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_recv
</UL>

<P><STRONG><a name="[200]"></a>proxy_connected</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, proxy.o(i.proxy_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = proxy_connected &rArr; bt_mesh_is_provisioned &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_is_provisioned
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_update
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_proxy_gap_event
</UL>

<P><STRONG><a name="[203]"></a>proxy_disconnected</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, proxy.o(i.proxy_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = proxy_disconnected &rArr; bt_mesh_pb_gatt_close &rArr; bt_mesh_attention &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_update
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_pb_gatt_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mesh_proxy_gap_event
</UL>

<P><STRONG><a name="[459]"></a>proxy_send</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, proxy.o(i.proxy_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = proxy_send &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_notify_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_segment_and_send
</UL>

<P><STRONG><a name="[2c]"></a>proxy_send_beacons</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, proxy.o(i.proxy_send_beacons))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = proxy_send_beacons &rArr; beacon_send &rArr; bt_mesh_beacon_create &rArr; net_buf_simple_add_u8 &rArr; os_mbuf_append &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proxy.o(i.bt_mesh_proxy_init)
</UL>
<P><STRONG><a name="[456]"></a>send_filter_status</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, proxy.o(i.send_filter_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = send_filter_status &rArr; bt_mesh_net_encode &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_be16
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_primary_addr
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_segment_and_send
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_cfg
</UL>

<P><STRONG><a name="[42]"></a>proxy_service_adv_sent</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mesh_queue.o(i.proxy_service_adv_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = proxy_service_adv_sent &rArr; bt_mesh_proxy_adv_start &rArr; gatt_proxy_advertise &rArr; node_id_adv &rArr; bt_le_adv_start &rArr; ble_adv_conf_adv_instance &rArr; ble_gap_ext_adv_configure &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_is_provisioned
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_adv_start
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_queue.o(i.meshque_msg_dispose)
</UL>
<P><STRONG><a name="[424]"></a>in_isr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, npl_os_freertos.o(i.in_isr))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_release
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_callout_reset
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_get
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_put
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_pend
</UL>

<P><STRONG><a name="[44]"></a>os_callout_timer_cb</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, npl_os_freertos.o(i.os_callout_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_callout_timer_cb &rArr; npl_freertos_eventq_put
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_eventq_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npl_os_freertos.o(i.npl_freertos_callout_init)
</UL>
<P><STRONG><a name="[163]"></a>_os_mbuf_copypkthdr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, os_mbuf.o(i._os_mbuf_copypkthdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _os_mbuf_copypkthdr
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
</UL>

<P><STRONG><a name="[42b]"></a>_os_mbuf_trailingspace</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_mbuf.o(i._os_mbuf_trailingspace))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_pullup
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_extend
</UL>

<P><STRONG><a name="[431]"></a>_os_msys_find_pool</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_mbuf.o(i._os_msys_find_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _os_msys_find_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get
</UL>

<P><STRONG><a name="[3c7]"></a>k_sem_take</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cmac_mode.o(i.k_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_time_ms_to_ticks
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npl_freertos_sem_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_update
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_setup
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_cmac_final
</UL>

<P><STRONG><a name="[14b]"></a>NET_BUF_SIMPLE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, friend.o(i.NET_BUF_SIMPLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NET_BUF_SIMPLE &rArr; os_msys_get &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_sub_cfm
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_offer
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_update
</UL>

<P><STRONG><a name="[37]"></a>adv_alloc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, friend.o(i.adv_alloc))
<BR>[Address Reference Count : 1]<UL><LI> friend.o(i.friend_buf_alloc)
</UL>
<P><STRONG><a name="[e6]"></a>buf_send_end</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, friend.o(i.buf_send_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = buf_send_end &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> friend.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>buf_send_start</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, friend.o(i.buf_send_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = buf_send_start &rArr; net_buf_unref &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> friend.o(.constdata)
</UL>
<P><STRONG><a name="[21]"></a>clear_timeout</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, friend.o(i.clear_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = clear_timeout &rArr; send_friend_clear &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get_32
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_clear
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> friend.o(i.bt_mesh_friend_init)
</UL>
<P><STRONG><a name="[367]"></a>create_friend_pdu</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, friend.o(i.create_friend_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_be16
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_obfuscate
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encrypt
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_get
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_lpn_enqueue_tx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_lpn_enqueue_rx
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_friend_ctl
</UL>

<P><STRONG><a name="[370]"></a>discard_buffer</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, friend.o(i.discard_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = discard_buffer &rArr; net_buf_unref &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_get
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_buf_alloc
</UL>

<P><STRONG><a name="[373]"></a>encode_friend_ctl</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, friend.o(i.encode_friend_ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_primary_addr
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_push_u8
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_next_seq
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_friend_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_sub_cfm
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_offer
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_update
</UL>

<P><STRONG><a name="[376]"></a>encode_update</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, friend.o(i.encode_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_flags
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_friend_ctl
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_update
</UL>

<P><STRONG><a name="[378]"></a>enqueue_buf</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, friend.o(i.enqueue_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = enqueue_buf &rArr; net_buf_unref &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_put
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_get
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_update
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_friend_pdu
</UL>

<P><STRONG><a name="[379]"></a>enqueue_friend_pdu</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, friend.o(i.enqueue_friend_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_put
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_peek_head
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_merge_slist
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_update
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_lpn_enqueue_tx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_lpn_enqueue_rx
</UL>

<P><STRONG><a name="[289]"></a>enqueue_offer</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, friend.o(i.enqueue_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = enqueue_offer &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_friend_ctl
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_req
</UL>

<P><STRONG><a name="[28e]"></a>enqueue_sub_cfm</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, friend.o(i.enqueue_sub_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = enqueue_sub_cfm &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_friend_ctl
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_sub_rem
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_sub_add
</UL>

<P><STRONG><a name="[284]"></a>enqueue_update</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, friend.o(i.enqueue_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_buf
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_update
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_sec_update_done
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_poll
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_friend_pdu
</UL>

<P><STRONG><a name="[368]"></a>friend_buf_alloc</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, friend.o(i.friend_buf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = friend_buf_alloc &rArr; bt_mesh_adv_create_from_pool &rArr; os_mbuf_get_pkthdr &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_create_from_pool
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discard_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_friend_pdu
</UL>

<P><STRONG><a name="[274]"></a>friend_clear</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, friend.o(i.friend_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = friend_clear &rArr; net_buf_unref &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_is_empty
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_get
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_del
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear_net_idx
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_req
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_timeout
</UL>

<P><STRONG><a name="[e4]"></a>friend_clear_sent</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, friend.o(i.friend_clear_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = friend_clear_sent &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> friend.o(.constdata)
</UL>
<P><STRONG><a name="[27d]"></a>friend_lpn_enqueue_rx</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, friend.o(i.friend_lpn_enqueue_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = friend_lpn_enqueue_rx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_purge_old_ack
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_friend_pdu
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_friend_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_enqueue_rx
</UL>

<P><STRONG><a name="[27f]"></a>friend_lpn_enqueue_tx</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, friend.o(i.friend_lpn_enqueue_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_next_seq
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_purge_old_ack
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_friend_pdu
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_friend_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_enqueue_tx
</UL>

<P><STRONG><a name="[277]"></a>friend_lpn_matches</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, friend.o(i.friend_lpn_matches))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_match
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_enqueue_tx
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_enqueue_rx
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear_incomplete
</UL>

<P><STRONG><a name="[38a]"></a>friend_purge_old_ack</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, friend.o(i.friend_purge_old_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = friend_purge_old_ack &rArr; net_buf_unref &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_remove
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_peek_next
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_peek_head
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_lpn_enqueue_tx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_lpn_enqueue_rx
</UL>

<P><STRONG><a name="[283]"></a>friend_recv_delay</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, friend.o(i.friend_recv_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = friend_recv_delay &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_sub_rem
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_sub_add
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_poll
</UL>

<P><STRONG><a name="[20]"></a>friend_timeout</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, friend.o(i.friend_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = friend_timeout &rArr; bt_mesh_adv_send &rArr; net_buf_put &rArr; npl_freertos_eventq_put
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_send
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_slist_get
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> friend.o(i.bt_mesh_friend_init)
</UL>
<P><STRONG><a name="[272]"></a>modlog_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, friend.o(i.modlog_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_find
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear_net_idx
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_sub_rem
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_sub_add
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_sec_update
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_req
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_poll
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_match
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_enqueue_tx
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_enqueue_rx
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear_incomplete
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear_cfm
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_clear
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offer_delay
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_timeout
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_recv_delay
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_purge_old_ack
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_lpn_enqueue_tx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_lpn_enqueue_rx
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_clear
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_buf_alloc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_update
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_sub_cfm
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_offer
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_friend_pdu
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_update
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_friend_ctl
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discard_buffer
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_friend_pdu
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_timeout
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_send_start
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_send_end
</UL>

<P><STRONG><a name="[377]"></a>net_buf_simple_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, friend.o(i.net_buf_simple_init))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_sub_cfm
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_offer
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_update
</UL>

<P><STRONG><a name="[287]"></a>offer_delay</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, friend.o(i.offer_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = offer_delay &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_req
</UL>

<P><STRONG><a name="[286]"></a>send_friend_clear</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, friend.o(i.send_friend_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = send_friend_clear &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_transmit_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_primary_addr
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ctl_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_req
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_timeout
</UL>

<P><STRONG><a name="[291]"></a>modlog_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, health_cli.o(i.modlog_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_health_cli_init
</UL>

<P><STRONG><a name="[1a5]"></a>atomic_and</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lpn.o(i.atomic_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_and
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_group_add
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_and_clear_bit
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_sub_cfm
</UL>

<P><STRONG><a name="[1a8]"></a>atomic_or</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lpn.o(i.atomic_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set_bit
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_sub_cfm
</UL>

<P><STRONG><a name="[1aa]"></a>atomic_set_bit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpn.o(i.atomic_set_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_set_bit &rArr; atomic_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_or
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_group_del
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_update
</UL>

<P><STRONG><a name="[1ac]"></a>atomic_test_and_clear_bit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpn.o(i.atomic_test_and_clear_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atomic_test_and_clear_bit &rArr; atomic_and
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_and
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_sub_cfm
</UL>

<P><STRONG><a name="[1b0]"></a>atomic_test_bit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lpn.o(i.atomic_test_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_test_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_group_del
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_update
</UL>

<P><STRONG><a name="[2b5]"></a>bt_mesh_lpn_established</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpn.o(i.bt_mesh_lpn_established))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_group_del
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_group_add
</UL>

<P><STRONG><a name="[2a6]"></a>clear_friendship</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, lpn.o(i.clear_friendship))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = clear_friendship &rArr; bt_mesh_lpn_status_changed &rArr; hb_send &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_rx_reset
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_status_changed
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_clear
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_del
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_disable
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_clear_sent
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_clear_cfm
</UL>

<P><STRONG><a name="[e7]"></a>friend_clear_sent</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lpn.o(i.friend_clear_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = friend_clear_sent &rArr; clear_friendship &rArr; bt_mesh_lpn_status_changed &rArr; hb_send &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_friendship
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpn.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>friend_poll_sent_end</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lpn.o(i.friend_poll_sent_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = friend_poll_sent_end &rArr; net_buf_unref &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpn.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>friend_req_end</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lpn.o(i.friend_req_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = friend_req_end &rArr; net_buf_unref &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpn.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>friend_req_sent</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lpn.o(i.friend_req_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = friend_req_sent &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpn.o(.constdata)
</UL>
<P><STRONG><a name="[2ad]"></a>friend_response_received</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lpn.o(i.friend_response_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = friend_response_received &rArr; bt_mesh_scan_disable &rArr; ble_gap_disc_cancel &rArr; hci_cmds_put &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_disable
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_msg_received
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_sub_cfm
</UL>

<P><STRONG><a name="[2b4]"></a>lpn_group_add</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lpn.o(i.lpn_group_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lpn_group_add &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_and
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_group_add
</UL>

<P><STRONG><a name="[25]"></a>lpn_timeout</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, lpn.o(i.lpn_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = lpn_timeout &rArr; update_timeout &rArr; clear_friendship &rArr; bt_mesh_lpn_status_changed &rArr; hb_send &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_disable
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_update
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_req
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_poll
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_friendship
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpn.o(i.bt_mesh_lpn_init)
</UL>
<P><STRONG><a name="[2a8]"></a>modlog_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lpn.o(i.modlog_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_group_del
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_group_add
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_update
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_req
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_poll
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_clear
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;req_sent
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_timeout
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_group_add
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_response_received
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_req_sent
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_req_end
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_poll_sent_end
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_clear_sent
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_friendship
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_poll
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_msg_received
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_init
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_sub_cfm
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_offer
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_clear_cfm
</UL>

<P><STRONG><a name="[2af]"></a>poll_timeout</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lpn.o(i.poll_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = poll_timeout &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_tx_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_sub_cfm
</UL>

<P><STRONG><a name="[ea]"></a>req_sent</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lpn.o(i.req_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = req_sent &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpn.o(.constdata)
</UL>
<P><STRONG><a name="[350]"></a>send_friend_clear</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, lpn.o(i.send_friend_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = send_friend_clear &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_transmit_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_primary_addr
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ctl_send
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_friendship
</UL>

<P><STRONG><a name="[2aa]"></a>send_friend_poll</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, lpn.o(i.send_friend_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = send_friend_poll &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_primary_addr
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ctl_send
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_poll
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_msg_received
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_sub_cfm
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_offer
</UL>

<P><STRONG><a name="[2b8]"></a>send_friend_req</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, lpn.o(i.send_friend_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = send_friend_req &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_primary_addr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_comp_get
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ctl_send
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_init
</UL>

<P><STRONG><a name="[2ae]"></a>sub_update</STRONG> (Thumb, 344 bytes, Stack size 88 bytes, lpn.o(i.sub_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = sub_update &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_primary_addr
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ctl_send
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_group_del
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_group_add
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_sub_cfm
</UL>

<P><STRONG><a name="[3eb]"></a>update_timeout</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lpn.o(i.update_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = update_timeout &rArr; clear_friendship &rArr; bt_mesh_lpn_status_changed &rArr; hb_send &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_disable
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_friend_poll
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_friendship
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpn_timeout
</UL>

<P><STRONG><a name="[2d2]"></a>_os_mbuf_trailingspace</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net.o(i._os_mbuf_trailingspace))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encode
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_send
</UL>

<P><STRONG><a name="[1c4]"></a>auth_match</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, net.o(i.auth_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = auth_match &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_auth
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_find
</UL>

<P><STRONG><a name="[2e1]"></a>bt_mesh_net_relay</STRONG> (Thumb, 530 bytes, Stack size 40 bytes, net.o(i.bt_mesh_net_relay))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = bt_mesh_net_relay &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_disable
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_relay_get
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_transmit_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_send
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_create
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_obfuscate
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encrypt
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_relay_retransmit_get
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_gatt_proxy_get
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_relay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_recv
</UL>

<P><STRONG><a name="[387]"></a>friend_decrypt</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, net.o(i.friend_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = friend_decrypt &rArr; net_decrypt &rArr; bt_mesh_net_decrypt &rArr; bt_mesh_ccm_decrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decrypt
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_find_and_decrypt
</UL>

<P><STRONG><a name="[26]"></a>ivu_refresh</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, net.o(i.ivu_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ivu_refresh &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_iv_update
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_ivu_initiator
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_iv
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net.o(i.bt_mesh_net_init)
</UL>
<P><STRONG><a name="[1c6]"></a>modlog_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net.o(i.modlog_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_iv_update
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_beacon_update
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_kr_update
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_recv
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_create
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_update
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_revoke_keys
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_keys_create
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_encode
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_decode
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_get
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_create
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_cred_set
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_send
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_resend
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_local
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_find_and_decrypt
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decrypt
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ivu_refresh
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_decrypt
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_relay
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_match
</UL>

<P><STRONG><a name="[41d]"></a>msg_cache_match</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, net.o(i.msg_cache_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = msg_cache_match
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decrypt
</UL>

<P><STRONG><a name="[388]"></a>net_decrypt</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, net.o(i.net_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = net_decrypt &rArr; bt_mesh_net_decrypt &rArr; bt_mesh_ccm_decrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_be16
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_obfuscate
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_decrypt
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_cache_match
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_find_and_decrypt
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_decrypt
</UL>

<P><STRONG><a name="[2cc]"></a>net_find_and_decrypt</STRONG> (Thumb, 314 bytes, Stack size 72 bytes, net.o(i.net_find_and_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = net_find_and_decrypt &rArr; friend_decrypt &rArr; net_decrypt &rArr; bt_mesh_net_decrypt &rArr; bt_mesh_ccm_decrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decrypt
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friend_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_decode
</UL>

<P><STRONG><a name="[28]"></a>relay_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net.o(i.relay_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = relay_stop &rArr; bt_mesh_beacon_enable &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_beacon_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net.o(i.bt_mesh_net_init)
</UL>
<P><STRONG><a name="[f1]"></a>app_key_set</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, settings.o(i.app_key_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = app_key_set &rArr; bt_mesh_k4 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_find
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_bytes_from_str
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_k4
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_del
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_alloc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.constdata)
</UL>
<P><STRONG><a name="[1ad]"></a>atomic_test_and_clear_bit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, settings.o(i.atomic_test_and_clear_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atomic_test_and_clear_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending
</UL>

<P><STRONG><a name="[1b1]"></a>atomic_test_bit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, settings.o(i.atomic_test_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_test_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
</UL>

<P><STRONG><a name="[f3]"></a>cfg_set</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, settings.o(i.cfg_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cfg_set &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_bytes_from_str
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_get
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.constdata)
</UL>
<P><STRONG><a name="[258]"></a>clear_app_key</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, settings.o(i.clear_app_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = clear_app_key &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flashmirror_info
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_binary_value
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_app_key
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_keys
</UL>

<P><STRONG><a name="[25f]"></a>clear_net_key</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, settings.o(i.clear_net_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = clear_net_key &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flashmirror_info
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_binary_value
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_subnet
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_keys
</UL>

<P><STRONG><a name="[25c]"></a>clear_node</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, settings.o(i.clear_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = clear_node &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_binary_value
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_nodes
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_node
</UL>

<P><STRONG><a name="[3e]"></a>commit_mod</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, settings.o(i.commit_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = commit_mod &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_pub_period_get
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.mesh_commit)
</UL>
<P><STRONG><a name="[374]"></a>encode_mod_path</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, settings.o(i.encode_mod_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = encode_mod_path &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_raise_assertion
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_index_in_elems
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flashmirror_info
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_mod_sub
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_mod_pub
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_mod_bind
</UL>

<P><STRONG><a name="[f2]"></a>hb_pub_set</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, settings.o(i.hb_pub_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hb_pub_set &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_bytes_from_str
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_hb_pub_get
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>iv_set</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, settings.o(i.iv_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iv_set &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_bytes_from_str
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.constdata)
</UL>
<P><STRONG><a name="[256]"></a>key_update_find</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, settings.o(i.key_update_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = key_update_find
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_subnet
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_app_key
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_subnet
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_app_key
</UL>

<P><STRONG><a name="[7]"></a>mesh_commit</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, settings.o(i.mesh_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = mesh_commit &rArr; subnet_init &rArr; bt_mesh_net_keys_create &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_foreach
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_work_submit
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_proxy_prov_disable
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_start
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_hb_pub_get
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_get
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subnet_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_load_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>mesh_set</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, settings.o(i.mesh_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mesh_set &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 2]<UL><LI> settings.o(i.conf_parse_and_lookup_new)
<LI> settings.o(.data)
</UL>
<P><STRONG><a name="[40d]"></a>mod_set</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, settings.o(i.mod_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mod_set &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_get
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_set_sub
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_set_pub
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_set_bind
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vnd_mod_set
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sig_mod_set
</UL>

<P><STRONG><a name="[40e]"></a>mod_set_bind</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, settings.o(i.mod_set_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mod_set_bind &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_bytes_from_str
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_set
</UL>

<P><STRONG><a name="[410]"></a>mod_set_pub</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, settings.o(i.mod_set_pub))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mod_set_pub &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_bytes_from_str
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_set
</UL>

<P><STRONG><a name="[40f]"></a>mod_set_sub</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, settings.o(i.mod_set_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mod_set_sub &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_bytes_from_str
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_set
</UL>

<P><STRONG><a name="[199]"></a>modlog_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, settings.o(i.modlog_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_subnet
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_app_key
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_subnet
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_app_key
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_node
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_node_addr
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_net_key
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_app_key
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subnet_init
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_rpl
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_seq
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_nodes
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_net
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_mod_sub
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_mod_pub
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_mod_bind
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_keys
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_iv
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_hb_pub
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_cfg
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_node
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_net_key
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_app_key
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seq_set
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_store
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_key_set
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_set_sub
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_set_pub
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_set_bind
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_set
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_commit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iv_set
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_pub_set
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commit_mod
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_node
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_net_key
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_app_key
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_key_set
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_parse_and_lookup_new
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_node
</UL>

<P><STRONG><a name="[f0]"></a>net_key_set</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, settings.o(i.net_key_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = net_key_set &rArr; bt_mesh_subnet_del &rArr; bt_mesh_app_key_del &rArr; bt_mesh_clear_app_key &rArr; clear_app_key &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_bytes_from_str
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_del
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>net_set</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, settings.o(i.net_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = net_set &rArr; bt_mesh_comp_provision &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_comp_unprovision
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_comp_provision
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_bytes_from_str
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>node_set</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, settings.o(i.node_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = node_set &rArr; bt_mesh_node_del &rArr; bt_mesh_clear_node &rArr; clear_node &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_node_find
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_node_del
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_bytes_from_str
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_node_alloc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.constdata)
</UL>
<P><STRONG><a name="[25b]"></a>node_update_find</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, settings.o(i.node_update_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = node_update_find
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_node
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_node
</UL>

<P><STRONG><a name="[ef]"></a>rpl_set</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, settings.o(i.rpl_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rpl_set &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_bytes_from_str
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.constdata)
</UL>
<P><STRONG><a name="[257]"></a>schedule_store</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, settings.o(i.schedule_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = schedule_store &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_net
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_iv
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_net
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_subnet
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_mod_sub
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_mod_pub
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_mod_bind
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_hb_pub
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_cfg
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_app_key
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_subnet
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_app_key
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_node
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_seq
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_rpl
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_clear_node
</UL>

<P><STRONG><a name="[ee]"></a>seq_set</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, settings.o(i.seq_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = seq_set &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_bytes_from_str
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>sig_mod_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, settings.o(i.sig_mod_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sig_mod_set &rArr; mod_set &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.constdata)
</UL>
<P><STRONG><a name="[322]"></a>store_app_key</STRONG> (Thumb, 130 bytes, Stack size 104 bytes, settings.o(i.store_app_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = store_app_key &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_str_from_bytes
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flashmirror_info
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_binary_value
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_app_key
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_keys
</UL>

<P><STRONG><a name="[328]"></a>store_net_key</STRONG> (Thumb, 172 bytes, Stack size 120 bytes, settings.o(i.store_net_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = store_net_key &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_str_from_bytes
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flashmirror_info
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_binary_value
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_subnet
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_keys
</UL>

<P><STRONG><a name="[327]"></a>store_node</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, settings.o(i.store_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = store_node &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_str_from_bytes
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flashmirror_info
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_binary_value
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_store_node
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_nodes
</UL>

<P><STRONG><a name="[2d]"></a>store_pending</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, settings.o(i.store_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = store_pending &rArr; store_pending_keys &rArr; store_net_key &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_foreach
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flashmirror_info
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_rpl
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_seq
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_nodes
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_net
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_keys
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_iv
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_hb_pub
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_cfg
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_and_clear_bit
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_binary_value
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.bt_mesh_settings_init)
</UL>
<P><STRONG><a name="[472]"></a>store_pending_cfg</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, settings.o(i.store_pending_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = store_pending_cfg &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_str_from_bytes
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_cfg_get
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_binary_value
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending
</UL>

<P><STRONG><a name="[471]"></a>store_pending_hb_pub</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, settings.o(i.store_pending_hb_pub))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = store_pending_hb_pub &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_str_from_bytes
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_hb_pub_get
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_binary_value
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending
</UL>

<P><STRONG><a name="[46f]"></a>store_pending_iv</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, settings.o(i.store_pending_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = store_pending_iv &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_str_from_bytes
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_binary_value
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending
</UL>

<P><STRONG><a name="[46d]"></a>store_pending_keys</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, settings.o(i.store_pending_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = store_pending_keys &rArr; store_net_key &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_subnet_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_key_find
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_net_key
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_app_key
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_net_key
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_app_key
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending
</UL>

<P><STRONG><a name="[4a]"></a>store_pending_mod</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, settings.o(i.store_pending_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = store_pending_mod &rArr; store_pending_mod_pub &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_mod_sub
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_mod_pub
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_mod_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.store_pending)
</UL>
<P><STRONG><a name="[474]"></a>store_pending_mod_bind</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, settings.o(i.store_pending_mod_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = store_pending_mod_bind &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_str_from_bytes
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mod_path
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_binary_value
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_mod
</UL>

<P><STRONG><a name="[476]"></a>store_pending_mod_pub</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, settings.o(i.store_pending_mod_pub))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = store_pending_mod_pub &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_str_from_bytes
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mod_path
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_binary_value
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_mod
</UL>

<P><STRONG><a name="[475]"></a>store_pending_mod_sub</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, settings.o(i.store_pending_mod_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = store_pending_mod_sub &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_str_from_bytes
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mod_path
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_binary_value
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending_mod
</UL>

<P><STRONG><a name="[46e]"></a>store_pending_net</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, settings.o(i.store_pending_net))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = store_pending_net &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_primary_addr
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_str_from_bytes
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_binary_value
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending
</UL>

<P><STRONG><a name="[473]"></a>store_pending_nodes</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, settings.o(i.store_pending_nodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = store_pending_nodes &rArr; store_node &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_node_find
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flashmirror_info
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_node
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_node
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending
</UL>

<P><STRONG><a name="[470]"></a>store_pending_seq</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, settings.o(i.store_pending_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = store_pending_seq &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_str_from_bytes
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_binary_value
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending
</UL>

<P><STRONG><a name="[46c]"></a>store_rpl</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, settings.o(i.store_rpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = store_rpl &rArr; save_binary_value &rArr; parse_path2index_new &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_str_from_bytes
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flashmirror_info
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_binary_value
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_pending
</UL>

<P><STRONG><a name="[3ef]"></a>subnet_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, settings.o(i.subnet_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = subnet_init &rArr; bt_mesh_net_keys_create &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_beacon_update
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_keys_create
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_commit
</UL>

<P><STRONG><a name="[479]"></a>sync_app_key</STRONG> (Thumb, 148 bytes, Stack size 152 bytes, settings.o(i.sync_app_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sync_app_key &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_put
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_str_from_bytes
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_kv
</UL>

<P><STRONG><a name="[47a]"></a>sync_net_key</STRONG> (Thumb, 176 bytes, Stack size 168 bytes, settings.o(i.sync_net_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sync_net_key &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_put
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_str_from_bytes
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_kv
</UL>

<P><STRONG><a name="[47b]"></a>sync_node_addr</STRONG> (Thumb, 126 bytes, Stack size 104 bytes, settings.o(i.sync_node_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sync_node_addr &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_put
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_str_from_bytes
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_kv
</UL>

<P><STRONG><a name="[f5]"></a>vnd_mod_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, settings.o(i.vnd_mod_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vnd_mod_set &rArr; mod_set &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>NET_BUF_SIMPLE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, transport.o(i.NET_BUF_SIMPLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NET_BUF_SIMPLE &rArr; os_msys_get &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msys_get
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_init
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdu_recv
</UL>

<P><STRONG><a name="[332]"></a>_os_mbuf_trailingspace</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, transport.o(i._os_mbuf_trailingspace))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_send
</UL>

<P><STRONG><a name="[16c]"></a>ack_timeout</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, transport.o(i.ack_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ack_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_default_ttl_get
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_ack
</UL>

<P><STRONG><a name="[32b]"></a>bt_mesh_lpn_established</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, transport.o(i.bt_mesh_lpn_established))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_recv
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_seg
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctl_recv
</UL>

<P><STRONG><a name="[32c]"></a>bt_mesh_lpn_waiting_update</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, transport.o(i.bt_mesh_lpn_waiting_update))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_recv
</UL>

<P><STRONG><a name="[36c]"></a>ctl_recv</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, transport.o(i.ctl_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ctl_recv &rArr; bt_mesh_friend_req &rArr; friend_cred_create &rArr; friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_sub_rem
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_sub_add
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_req
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_poll
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear_cfm
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_sub_cfm
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_offer
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_friend_clear_cfm
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_heartbeat
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_ack
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_established
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_unseg
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
</UL>

<P><STRONG><a name="[265]"></a>modlog_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, transport.o(i.modlog_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_send
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_tx_reset
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_rx_reset
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ctl_send
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_recv
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_unseg
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_heartbeat
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_ack
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unseg
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_seg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack_end
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_tx_send_unacked
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_tx_reset
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_rx_reset
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_rx_is_valid
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_rx_find
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_rx_alloc
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_ack
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdu_recv
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctl_recv
</UL>

<P><STRONG><a name="[45b]"></a>net_buf_simple_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, transport.o(i.net_buf_simple_init))
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_rx_alloc
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdu_recv
</UL>

<P><STRONG><a name="[32f]"></a>net_buf_simple_restore</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, transport.o(i.net_buf_simple_restore))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_recv
</UL>

<P><STRONG><a name="[32d]"></a>net_buf_simple_save</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, transport.o(i.net_buf_simple_save))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_recv
</UL>

<P><STRONG><a name="[45a]"></a>sdu_recv</STRONG> (Thumb, 582 bytes, Stack size 80 bytes, transport.o(i.sdu_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sdu_recv &rArr; bt_mesh_app_decrypt &rArr; bt_mesh_ccm_decrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_node_find
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_model_recv
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_free_chain
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_app_decrypt
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_label_uuid_get
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NET_BUF_SIMPLE
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_unseg
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
</UL>

<P><STRONG><a name="[2f]"></a>seg_ack</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, transport.o(i.seg_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = seg_ack &rArr; send_ack &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get_32
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_rx_reset
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport.o(i.bt_mesh_trans_init)
</UL>
<P><STRONG><a name="[f7]"></a>seg_first_send_start</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, transport.o(i.seg_first_send_start))
<BR>[Address Reference Count : 1]<UL><LI> transport.o(.constdata)
</UL>
<P><STRONG><a name="[481]"></a>seg_len</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, transport.o(i.seg_len))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
</UL>

<P><STRONG><a name="[2e]"></a>seg_retransmit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, transport.o(i.seg_retransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = seg_retransmit &rArr; seg_tx_send_unacked &rArr; bt_mesh_net_resend &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_tx_send_unacked
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport.o(i.bt_mesh_trans_init)
</UL>
<P><STRONG><a name="[45e]"></a>seg_rx_alloc</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, transport.o(i.seg_rx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = seg_rx_alloc &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
</UL>

<P><STRONG><a name="[45f]"></a>seg_rx_find</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, transport.o(i.seg_rx_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = seg_rx_find &rArr; seg_rx_reset &rArr; bt_mesh_friend_clear_incomplete &rArr; net_buf_unref &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_rx_reset
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
</UL>

<P><STRONG><a name="[460]"></a>seg_rx_is_valid</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, transport.o(i.seg_rx_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = seg_rx_is_valid &rArr; modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
</UL>

<P><STRONG><a name="[31e]"></a>seg_rx_reset</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, transport.o(i.seg_rx_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = seg_rx_reset &rArr; bt_mesh_friend_clear_incomplete &rArr; net_buf_unref &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_clear_incomplete
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_rx_reset
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_rx_find
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_ack
</UL>

<P><STRONG><a name="[f9]"></a>seg_send_start</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, transport.o(i.seg_send_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = seg_send_start &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>seg_sent</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, transport.o(i.seg_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = seg_sent &rArr; k_delayed_work_submit &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport.o(.constdata)
</UL>
<P><STRONG><a name="[461]"></a>seg_tx_complete</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, transport.o(i.seg_tx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = seg_tx_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_ack
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_tx_send_unacked
</UL>

<P><STRONG><a name="[335]"></a>seg_tx_reset</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, transport.o(i.seg_tx_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_sec_update
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_iv_update
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_tx_reset
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_seg
</UL>

<P><STRONG><a name="[45d]"></a>seg_tx_send_unacked</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, transport.o(i.seg_tx_send_unacked))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = seg_tx_send_unacked &rArr; bt_mesh_net_resend &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_resend
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_tx_complete
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_ack
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_retransmit
</UL>

<P><STRONG><a name="[45c]"></a>send_ack</STRONG> (Thumb, 246 bytes, Stack size 80 bytes, transport.o(i.send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = send_ack &rArr; bt_mesh_ctl_send &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_transmit_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_primary_addr
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_be32
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_be16
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_ctl_send
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_established
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_seg
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_ack
</UL>

<P><STRONG><a name="[fa]"></a>send_ack_end</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, transport.o(i.send_ack_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_ack_end &rArr; net_buf_unref &rArr; os_mbuf_free_chain &rArr; os_mbuf_free &rArr; os_memblock_put
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport.o(.constdata)
</UL>
<P><STRONG><a name="[333]"></a>send_seg</STRONG> (Thumb, 660 bytes, Stack size 64 bytes, transport.o(i.send_seg))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = send_seg &rArr; seg_tx_reset &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_ref
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_create
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_reserve
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_default_ttl_get
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_enqueue_tx
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_send
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_poll
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_tx_reset
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_established
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_send
</UL>

<P><STRONG><a name="[334]"></a>send_unseg</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, transport.o(i.send_unseg))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = send_unseg &rArr; bt_mesh_friend_enqueue_tx &rArr; friend_lpn_enqueue_tx &rArr; enqueue_friend_pdu &rArr; enqueue_update &rArr; encode_update &rArr; encode_friend_ctl &rArr; create_friend_pdu &rArr; bt_mesh_net_encrypt &rArr; bt_mesh_ccm_encrypt &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mbuf_append
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_add_u8
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_create
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_reserve
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_friend_enqueue_tx
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_net_send
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_send
</UL>

<P><STRONG><a name="[36d]"></a>trans_ack</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, transport.o(i.trans_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = trans_ack &rArr; seg_tx_send_unacked &rArr; bt_mesh_net_resend &rArr; bt_mesh_net_iv_update &rArr; bt_mesh_net_beacon_update &rArr; bt_mesh_beacon_auth &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_be16
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_be32
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_unref
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_tx_send_unacked
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_tx_complete
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctl_recv
</UL>

<P><STRONG><a name="[36e]"></a>trans_heartbeat</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, transport.o(i.trans_heartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = trans_heartbeat &rArr; net_buf_simple_pull_be16 &rArr; os_mbuf_pullup &rArr; os_mbuf_get &rArr; os_memblock_get
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_be16
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_heartbeat
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctl_recv
</UL>

<P><STRONG><a name="[32e]"></a>trans_seg</STRONG> (Thumb, 964 bytes, Stack size 64 bytes, transport.o(i.trans_seg))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = trans_seg &rArr; ctl_recv &rArr; bt_mesh_friend_req &rArr; friend_cred_create &rArr; friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_submit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_cancel
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_be16
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_uptime_get_32
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_delayed_work_remaining_get
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_rx_reset
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_rx_is_valid
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_rx_find
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_rx_alloc
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_len
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdu_recv
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctl_recv
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_lpn_established
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_timeout
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_recv
</UL>

<P><STRONG><a name="[330]"></a>trans_unseg</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, transport.o(i.trans_unseg))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = trans_unseg &rArr; ctl_recv &rArr; bt_mesh_friend_req &rArr; friend_cred_create &rArr; friend_cred_set &rArr; bt_mesh_k2 &rArr; bt_mesh_s1 &rArr; bt_mesh_aes_cmac_one &rArr; bt_mesh_aes_cmac &rArr; tc_cmac_update &rArr; k_sem_take &rArr; npl_freertos_time_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_buf_simple_pull_u8
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdu_recv
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modlog_dummy
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctl_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_trans_recv
</UL>

<P><STRONG><a name="[8]"></a>conf_fcb_load</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_fcb.o(i.conf_fcb_load))
<BR>[Address Reference Count : 1]<UL><LI> config_fcb.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>conf_fcb_save</STRONG> (Thumb, 152 bytes, Stack size 352 bytes, config_fcb.o(i.conf_fcb_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = conf_fcb_save &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write2mirror
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flash_write_mark
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_mark
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_fcb.o(.data)
</UL>
<P><STRONG><a name="[178]"></a>addr_is_free</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, nodes.o(i.addr_is_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = addr_is_free
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_primary_addr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_comp_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_node_alloc
</UL>

<P><STRONG><a name="[2ed]"></a>modlog_dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nodes.o(i.modlog_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = modlog_dummy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_node_del
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_node_alloc
</UL>

<P><STRONG><a name="[18]"></a>ble_sm_alg_rand</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_sm_alg.o(i.ble_sm_alg_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_sm_alg_rand &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_sm_alg.o(i.ble_sm_alg_ecc_init)
</UL>
<P><STRONG><a name="[47f]"></a>compress</STRONG> (Thumb, 442 bytes, Stack size 144 bytes, sha256.o(i.compress))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = compress
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_sha256_update
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_sha256_final
</UL>

<P><STRONG><a name="[128]"></a>XYcZ_addC</STRONG> (Thumb, 280 bytes, Stack size 128 bytes, ecc.o(i.XYcZ_addC))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = XYcZ_addC &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[126]"></a>XYcZ_initial_double</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, ecc.o(i.XYcZ_initial_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = XYcZ_initial_double &rArr; apply_z &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[48f]"></a>muladd</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, ecc.o(i.muladd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = muladd
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult
</UL>

<P><STRONG><a name="[371]"></a>uECC_vli_add</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, ecc.o(i.uECC_vli_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv_update
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
</UL>

<P><STRONG><a name="[14f]"></a>uECC_vli_modSquare_fast</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ecc.o(i.uECC_vli_modSquare_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = uECC_vli_modSquare_fast &rArr; uECC_vli_modMult_fast &rArr; uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_point
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
</UL>

<P><STRONG><a name="[48e]"></a>uECC_vli_mult</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, ecc.o(i.uECC_vli_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uECC_vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muladd
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
</UL>

<P><STRONG><a name="[372]"></a>uECC_vli_rshift1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ecc.o(i.uECC_vli_rshift1))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mmod
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv_update
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
</UL>

<P><STRONG><a name="[48d]"></a>vli_modInv_update</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ecc.o(i.vli_modInv_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vli_modInv_update &rArr; uECC_vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
</UL>

<P><STRONG><a name="[153]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[166]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[165]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL>
<P><STRONG><a name="[159]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[156]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[168]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[167]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
